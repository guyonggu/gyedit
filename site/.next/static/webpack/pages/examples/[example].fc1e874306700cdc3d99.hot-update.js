webpackHotUpdate_N_E("pages/examples/[example]",{

/***/ "../src/withMarkdown.ts":
/*!******************************!*\
  !*** ../src/withMarkdown.ts ***!
  \******************************/
/*! exports provided: withMarkdown */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"withMarkdown\", function() { return withMarkdown; });\n/* harmony import */ var _babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/slicedToArray */ \"../node_modules/@babel/runtime/helpers/esm/slicedToArray.js\");\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! slate */ \"../node_modules/slate/dist/index.es.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util */ \"../src/util.ts\");\n\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\nvar SHORTCUTS = {\n  '*': 'ul-item',\n  '-': 'ul-item',\n  '+': 'ul-item',\n  '>': 'block-quote',\n  '#': 'heading-one',\n  '##': 'heading-two',\n  '###': 'heading-three',\n  '####': 'heading-four',\n  '#####': 'heading-five',\n  '######': 'heading-six'\n};\nvar withMarkdown = function withMarkdown(editor) {\n  var deleteBackward = editor.deleteBackward,\n      insertText = editor.insertText,\n      insertBreak = editor.insertBreak,\n      deleteFragment = editor.deleteFragment;\n\n  var insertBreak2 = function insertBreak2() {\n    var handled = false;\n    var selection = editor.selection;\n\n    if (!selection || slate__WEBPACK_IMPORTED_MODULE_1__[\"Range\"].isExpanded(selection)) {\n      insertBreak();\n      return;\n    }\n\n    var block = slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].above(editor, {\n      match: function match(n) {\n        return slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].isBlock(editor, n);\n      }\n    });\n\n    if (!block || slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].isEditor(block[0])) {\n      insertBreak();\n      return;\n    }\n\n    var parent = slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].parent(editor, block[1]);\n\n    if (!parent || slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].isEditor(parent[0])) {\n      insertBreak();\n      return;\n    }\n\n    var text = slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].string(editor, block[1]);\n\n    if (text) {\n      insertBreak();\n      return;\n    }\n\n    var blockPath = block[1];\n    var indent = 0;\n\n    if (typeof parent[0].indent === \"number\") {\n      indent = parent[0].indent > 1 ? parent[0].indent - 1 : 0;\n    }\n\n    slate__WEBPACK_IMPORTED_MODULE_1__[\"Transforms\"].setNodes(editor, {\n      type: 'paragraph',\n      indent: indent\n    }, {\n      at: blockPath\n    }); // if it is the last child\n\n    if (blockPath[blockPath.length - 1] === parent[0].children.length - 1) {\n      slate__WEBPACK_IMPORTED_MODULE_1__[\"Transforms\"].liftNodes(editor, {\n        at: blockPath\n      });\n      return;\n    }\n  };\n\n  editor.insertBreak = function () {\n    insertBreak2();\n    Object(_util__WEBPACK_IMPORTED_MODULE_2__[\"fixList\"])(editor);\n  };\n\n  editor.insertText = function (text) {\n    var selection = editor.selection;\n\n    if (text !== ' ' || !selection || !slate__WEBPACK_IMPORTED_MODULE_1__[\"Range\"].isCollapsed(selection)) {\n      insertText(text);\n      return;\n    }\n\n    var anchor = selection.anchor;\n    var block = slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].above(editor, {\n      match: function match(n) {\n        return slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].isBlock(editor, n);\n      }\n    });\n    var path = block ? block[1] : [];\n    var start = slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].start(editor, path);\n    var range = {\n      anchor: anchor,\n      focus: start\n    };\n    var beforeText = slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].string(editor, range);\n    var tabs = 0;\n\n    var _iterator = _createForOfIteratorHelper(beforeText),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var c = _step.value;\n\n        if (c === '\\t') {\n          tabs++;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    beforeText = beforeText.substr(tabs);\n    var blockType = block[0].type;\n    var inList = typeof blockType === 'string' ? blockType === 'list-item' : false;\n    var type = SHORTCUTS[beforeText];\n\n    if (!type && /^[1-9]\\d*\\./.test(beforeText)) {\n      type = 'ol-item';\n    }\n\n    var list;\n\n    switch (type) {\n      case 'ul-item':\n        if (inList) {\n          insertText(text);\n          break;\n        }\n\n        slate__WEBPACK_IMPORTED_MODULE_1__[\"Transforms\"].select(editor, range);\n        slate__WEBPACK_IMPORTED_MODULE_1__[\"Transforms\"][\"delete\"](editor);\n        slate__WEBPACK_IMPORTED_MODULE_1__[\"Transforms\"].setNodes(editor, {\n          type: 'list-item'\n        }, {\n          match: function match(n) {\n            return slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].isBlock(editor, n);\n          }\n        });\n        list = {\n          type: 'bulleted-list',\n          indent: tabs,\n          children: []\n        };\n        slate__WEBPACK_IMPORTED_MODULE_1__[\"Transforms\"].wrapNodes(editor, list, {\n          match: function match(n) {\n            return n.type === 'list-item';\n          }\n        });\n        Object(_util__WEBPACK_IMPORTED_MODULE_2__[\"fixList\"])(editor);\n        break;\n\n      case 'ol-item':\n        if (inList) {\n          insertText(text);\n          break;\n        }\n\n        var found = beforeText.match(/^([\\t]*)\\d+\\./);\n        slate__WEBPACK_IMPORTED_MODULE_1__[\"Transforms\"].select(editor, range);\n        slate__WEBPACK_IMPORTED_MODULE_1__[\"Transforms\"][\"delete\"](editor);\n        slate__WEBPACK_IMPORTED_MODULE_1__[\"Transforms\"].setNodes(editor, {\n          type: 'list-item'\n        }, {\n          match: function match(n) {\n            return slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].isBlock(editor, n);\n          }\n        });\n        list = {\n          type: 'numbered-list',\n          indent: tabs,\n          children: []\n        };\n        slate__WEBPACK_IMPORTED_MODULE_1__[\"Transforms\"].wrapNodes(editor, list, {\n          match: function match(n) {\n            return n.type === 'list-item';\n          }\n        });\n        Object(_util__WEBPACK_IMPORTED_MODULE_2__[\"fixList\"])(editor);\n        break;\n\n      case 'block-quote':\n        if (inList || blockType !== 'paragraph') {\n          insertText(text);\n          break;\n        }\n\n        var parent = slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].above(editor, {\n          match: function match(n) {\n            return n.type === 'block-quote';\n          }\n        });\n\n        if (parent) {\n          insertText(text);\n          break;\n        }\n\n        slate__WEBPACK_IMPORTED_MODULE_1__[\"Transforms\"].select(editor, range);\n        slate__WEBPACK_IMPORTED_MODULE_1__[\"Transforms\"][\"delete\"](editor);\n        slate__WEBPACK_IMPORTED_MODULE_1__[\"Transforms\"].wrapNodes(editor, {\n          type: 'block-quote',\n          children: []\n        }, {\n          match: function match(n) {\n            return n.type === 'paragraph';\n          }\n        });\n        break;\n\n      default:\n        insertText(text);\n    }\n\n    return;\n  };\n\n  var deleteBackward2 = function deleteBackward2(unit) {\n    console.log(\"editor.deleteBackward:\", unit);\n    var selection = editor.selection;\n\n    if (!selection || slate__WEBPACK_IMPORTED_MODULE_1__[\"Range\"].isExpanded(selection)) {\n      deleteBackward(unit);\n      return;\n    }\n\n    var match = slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].above(editor, {\n      match: function match(n) {\n        return slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].isBlock(editor, n);\n      }\n    });\n\n    if (!match || slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].isEditor(match[0])) {\n      deleteBackward(unit);\n      return;\n    }\n\n    var _ref = match,\n        _ref2 = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_ref, 2),\n        block = _ref2[0],\n        path = _ref2[1];\n\n    var start = slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].start(editor, path);\n\n    if (slate__WEBPACK_IMPORTED_MODULE_1__[\"Point\"].equals(selection.anchor, start)) {\n      if (block.type === 'list-item') {\n        var _ref3 = slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].parent(editor, path),\n            _ref4 = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_ref3, 1),\n            listNode = _ref4[0];\n\n        if (listNode && listNode.indent > 0) {\n          slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].withoutNormalizing(editor, function () {\n            slate__WEBPACK_IMPORTED_MODULE_1__[\"Transforms\"].wrapNodes(editor, {\n              type: listNode.type,\n              indent: listNode.indent - 1,\n              children: []\n            }, {\n              at: path\n            });\n            slate__WEBPACK_IMPORTED_MODULE_1__[\"Transforms\"].liftNodes(editor, {\n              at: path\n            });\n          });\n        } else {\n          slate__WEBPACK_IMPORTED_MODULE_1__[\"Transforms\"].setNodes(editor, {\n            type: 'paragraph'\n          });\n          slate__WEBPACK_IMPORTED_MODULE_1__[\"Transforms\"].unwrapNodes(editor, {\n            match: function match(n) {\n              return typeof n.type === 'string' && n.type.endsWith('-list');\n            },\n            split: true\n          }); // deleteBackward(unit)\n        }\n      } else if (block.type === 'paragraph') {\n        if (block.indent && block.indent > 0) {\n          slate__WEBPACK_IMPORTED_MODULE_1__[\"Transforms\"].setNodes(editor, {\n            indent: block.indent - 1\n          }, {\n            at: path\n          });\n          return;\n        } else {\n          deleteBackward(unit);\n        }\n      } else {\n        slate__WEBPACK_IMPORTED_MODULE_1__[\"Transforms\"].setNodes(editor, {\n          type: 'paragraph'\n        });\n      }\n\n      return;\n    } // end if at start\n\n\n    deleteBackward(unit);\n  };\n\n  editor.deleteBackward = function (unit) {\n    console.log(\"editor.deleteBackward:\", unit);\n    deleteBackward2(unit);\n    Object(_util__WEBPACK_IMPORTED_MODULE_2__[\"fixList\"])(editor);\n  };\n\n  editor.deleteFragment = function () {\n    console.log(\"editor.deleteFragment:\");\n    deleteFragment();\n  };\n\n  return editor;\n};\n\nvar beforeTextInBlock = function beforeTextInBlock(editor) {\n  var selection = editor.selection;\n\n  if (!selection) {\n    return '';\n  }\n\n  var block = slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].above(editor, {\n    match: function match(n) {\n      return slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].isBlock(editor, n);\n    }\n  });\n  var path = block ? block[1] : [];\n  var start = slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].start(editor, path);\n  var range = {\n    anchor: slate__WEBPACK_IMPORTED_MODULE_1__[\"Range\"].start(editor.selection),\n    focus: start\n  };\n  var beforeText = slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].string(editor, range);\n  return beforeText;\n};\n\nslate__WEBPACK_IMPORTED_MODULE_1__[\"Transforms\"][\"delete\"] = function (editor) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].withoutNormalizing(editor, function () {\n    var _options$reverse = options.reverse,\n        reverse = _options$reverse === void 0 ? false : _options$reverse,\n        _options$unit = options.unit,\n        unit = _options$unit === void 0 ? 'character' : _options$unit,\n        _options$distance = options.distance,\n        distance = _options$distance === void 0 ? 1 : _options$distance,\n        _options$voids = options.voids,\n        voids = _options$voids === void 0 ? false : _options$voids;\n    var _options$at = options.at,\n        at = _options$at === void 0 ? editor.selection : _options$at,\n        _options$hanging = options.hanging,\n        hanging = _options$hanging === void 0 ? false : _options$hanging;\n\n    if (!at) {\n      return;\n    }\n\n    if (slate__WEBPACK_IMPORTED_MODULE_1__[\"Range\"].isRange(at) && slate__WEBPACK_IMPORTED_MODULE_1__[\"Range\"].isCollapsed(at)) {\n      at = at.anchor;\n    }\n\n    if (slate__WEBPACK_IMPORTED_MODULE_1__[\"Point\"].isPoint(at)) {\n      var furthestVoid = slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"][\"void\"](editor, {\n        at: at,\n        mode: 'highest'\n      });\n\n      if (!voids && furthestVoid) {\n        var _furthestVoid = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(furthestVoid, 2),\n            voidPath = _furthestVoid[1];\n\n        at = voidPath;\n      } else {\n        var opts = {\n          unit: unit,\n          distance: distance\n        };\n        var target = reverse ? slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].before(editor, at, opts) || slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].start(editor, []) : slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].after(editor, at, opts) || slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].end(editor, []);\n        at = {\n          anchor: at,\n          focus: target\n        };\n        hanging = true;\n      }\n    }\n\n    if (slate__WEBPACK_IMPORTED_MODULE_1__[\"Path\"].isPath(at)) {\n      slate__WEBPACK_IMPORTED_MODULE_1__[\"Transforms\"].removeNodes(editor, {\n        at: at,\n        voids: voids\n      });\n      return;\n    }\n\n    if (slate__WEBPACK_IMPORTED_MODULE_1__[\"Range\"].isCollapsed(at)) {\n      return;\n    }\n\n    if (!hanging) {\n      at = slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].unhangRange(editor, at, {\n        voids: voids\n      });\n    }\n\n    var _Range$edges = slate__WEBPACK_IMPORTED_MODULE_1__[\"Range\"].edges(at),\n        _Range$edges2 = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_Range$edges, 2),\n        start = _Range$edges2[0],\n        end = _Range$edges2[1];\n\n    var startBlock = slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].above(editor, {\n      match: function match(n) {\n        return slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].isBlock(editor, n);\n      },\n      at: start,\n      voids: voids\n    });\n    var endBlock = slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].above(editor, {\n      match: function match(n) {\n        return slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].isBlock(editor, n);\n      },\n      at: end,\n      voids: voids\n    });\n    var isAcrossBlocks = startBlock && endBlock && !slate__WEBPACK_IMPORTED_MODULE_1__[\"Path\"].equals(startBlock[1], endBlock[1]);\n    var isSingleText = slate__WEBPACK_IMPORTED_MODULE_1__[\"Path\"].equals(start.path, end.path);\n    var startVoid = voids ? null : slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"][\"void\"](editor, {\n      at: start,\n      mode: 'highest'\n    });\n    var endVoid = voids ? null : slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"][\"void\"](editor, {\n      at: end,\n      mode: 'highest'\n    }); // If the start or end points are inside an inline void, nudge them out.\n\n    if (startVoid) {\n      var before = slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].before(editor, start);\n\n      if (before && startBlock && slate__WEBPACK_IMPORTED_MODULE_1__[\"Path\"].isAncestor(startBlock[1], before.path)) {\n        start = before;\n      }\n    }\n\n    if (endVoid) {\n      var after = slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].after(editor, end);\n\n      if (after && endBlock && slate__WEBPACK_IMPORTED_MODULE_1__[\"Path\"].isAncestor(endBlock[1], after.path)) {\n        end = after;\n      }\n    } // Get the highest nodes that are completely inside the range, as well as\n    // the start and end nodes.\n\n\n    var matches = [];\n    var lastPath;\n\n    var _iterator2 = _createForOfIteratorHelper(slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].nodes(editor, {\n      at: at,\n      voids: voids\n    })),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var entry = _step2.value;\n\n        var _entry = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(entry, 2),\n            _node2 = _entry[0],\n            _path3 = _entry[1];\n\n        if (lastPath && slate__WEBPACK_IMPORTED_MODULE_1__[\"Path\"].compare(_path3, lastPath) === 0) {\n          continue;\n        }\n\n        if (!voids && slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].isVoid(editor, _node2) || !slate__WEBPACK_IMPORTED_MODULE_1__[\"Path\"].isCommon(_path3, start.path) && !slate__WEBPACK_IMPORTED_MODULE_1__[\"Path\"].isCommon(_path3, end.path)) {\n          matches.push(entry);\n          lastPath = _path3;\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    var pathRefs = Array.from(matches, function (_ref5) {\n      var _ref6 = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_ref5, 2),\n          p = _ref6[1];\n\n      return slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].pathRef(editor, p);\n    });\n    var startRef = slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].pointRef(editor, start);\n    var endRef = slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].pointRef(editor, end);\n\n    if (!isSingleText && !startVoid) {\n      var _point = startRef.current;\n\n      var _Editor$leaf = slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].leaf(editor, _point),\n          _Editor$leaf2 = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_Editor$leaf, 1),\n          node = _Editor$leaf2[0];\n\n      var path = _point.path;\n      var _start = start,\n          offset = _start.offset;\n      var text = node.text.slice(offset);\n      editor.apply({\n        type: 'remove_text',\n        path: path,\n        offset: offset,\n        text: text\n      });\n    }\n\n    for (var _i = 0, _pathRefs = pathRefs; _i < _pathRefs.length; _i++) {\n      var pathRef = _pathRefs[_i];\n\n      var _path = pathRef.unref();\n\n      console.log(\"remove not at:\", _path);\n      slate__WEBPACK_IMPORTED_MODULE_1__[\"Transforms\"].removeNodes(editor, {\n        at: _path,\n        voids: voids\n      });\n    }\n\n    if (!endVoid) {\n      var _point2 = endRef.current;\n\n      var _Editor$leaf3 = slate__WEBPACK_IMPORTED_MODULE_1__[\"Editor\"].leaf(editor, _point2),\n          _Editor$leaf4 = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_Editor$leaf3, 1),\n          _node = _Editor$leaf4[0];\n\n      var _path2 = _point2.path;\n\n      var _offset = isSingleText ? start.offset : 0;\n\n      var _text = _node.text.slice(_offset, end.offset);\n\n      editor.apply({\n        type: 'remove_text',\n        path: _path2,\n        offset: _offset,\n        text: _text\n      });\n    }\n\n    if (!isSingleText && isAcrossBlocks && endRef.current && startRef.current) {\n      console.log(\"merge node at:\", at);\n      slate__WEBPACK_IMPORTED_MODULE_1__[\"Transforms\"].mergeNodes(editor, {\n        at: endRef.current,\n        hanging: true,\n        voids: voids\n      });\n    }\n\n    var point = endRef.unref() || startRef.unref();\n\n    if (options.at == null && point) {\n      slate__WEBPACK_IMPORTED_MODULE_1__[\"Transforms\"].select(editor, point);\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4uL3NyYy93aXRoTWFya2Rvd24udHM/MzRiNiJdLCJuYW1lcyI6WyJTSE9SVENVVFMiLCJ3aXRoTWFya2Rvd24iLCJlZGl0b3IiLCJkZWxldGVCYWNrd2FyZCIsImluc2VydFRleHQiLCJpbnNlcnRCcmVhayIsImRlbGV0ZUZyYWdtZW50IiwiaW5zZXJ0QnJlYWsyIiwiaGFuZGxlZCIsInNlbGVjdGlvbiIsIlJhbmdlIiwiaXNFeHBhbmRlZCIsImJsb2NrIiwiRWRpdG9yIiwiYWJvdmUiLCJtYXRjaCIsIm4iLCJpc0Jsb2NrIiwiaXNFZGl0b3IiLCJwYXJlbnQiLCJ0ZXh0Iiwic3RyaW5nIiwiYmxvY2tQYXRoIiwiaW5kZW50IiwiVHJhbnNmb3JtcyIsInNldE5vZGVzIiwidHlwZSIsImF0IiwibGVuZ3RoIiwiY2hpbGRyZW4iLCJsaWZ0Tm9kZXMiLCJmaXhMaXN0IiwiaXNDb2xsYXBzZWQiLCJhbmNob3IiLCJwYXRoIiwic3RhcnQiLCJyYW5nZSIsImZvY3VzIiwiYmVmb3JlVGV4dCIsInRhYnMiLCJjIiwic3Vic3RyIiwiYmxvY2tUeXBlIiwiaW5MaXN0IiwidGVzdCIsImxpc3QiLCJzZWxlY3QiLCJ3cmFwTm9kZXMiLCJmb3VuZCIsImRlbGV0ZUJhY2t3YXJkMiIsInVuaXQiLCJjb25zb2xlIiwibG9nIiwiUG9pbnQiLCJlcXVhbHMiLCJsaXN0Tm9kZSIsIndpdGhvdXROb3JtYWxpemluZyIsInVud3JhcE5vZGVzIiwiZW5kc1dpdGgiLCJzcGxpdCIsImJlZm9yZVRleHRJbkJsb2NrIiwib3B0aW9ucyIsInJldmVyc2UiLCJkaXN0YW5jZSIsInZvaWRzIiwiaGFuZ2luZyIsImlzUmFuZ2UiLCJpc1BvaW50IiwiZnVydGhlc3RWb2lkIiwibW9kZSIsInZvaWRQYXRoIiwib3B0cyIsInRhcmdldCIsImJlZm9yZSIsImFmdGVyIiwiZW5kIiwiUGF0aCIsImlzUGF0aCIsInJlbW92ZU5vZGVzIiwidW5oYW5nUmFuZ2UiLCJlZGdlcyIsInN0YXJ0QmxvY2siLCJlbmRCbG9jayIsImlzQWNyb3NzQmxvY2tzIiwiaXNTaW5nbGVUZXh0Iiwic3RhcnRWb2lkIiwiZW5kVm9pZCIsImlzQW5jZXN0b3IiLCJtYXRjaGVzIiwibGFzdFBhdGgiLCJub2RlcyIsImVudHJ5Iiwibm9kZSIsImNvbXBhcmUiLCJpc1ZvaWQiLCJpc0NvbW1vbiIsInB1c2giLCJwYXRoUmVmcyIsIkFycmF5IiwiZnJvbSIsInAiLCJwYXRoUmVmIiwic3RhcnRSZWYiLCJwb2ludFJlZiIsImVuZFJlZiIsInBvaW50IiwiY3VycmVudCIsImxlYWYiLCJvZmZzZXQiLCJzbGljZSIsImFwcGx5IiwidW5yZWYiLCJtZXJnZU5vZGVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7QUFFQTtBQUVBLElBQU1BLFNBQVMsR0FBRztBQUNkLE9BQUssU0FEUztBQUVkLE9BQUssU0FGUztBQUdkLE9BQUssU0FIUztBQUlkLE9BQUssYUFKUztBQUtkLE9BQUssYUFMUztBQU1kLFFBQU0sYUFOUTtBQU9kLFNBQU8sZUFQTztBQVFkLFVBQVEsY0FSTTtBQVNkLFdBQVMsY0FUSztBQVVkLFlBQVU7QUFWSSxDQUFsQjtBQWFPLElBQU1DLFlBQVksR0FBRyxTQUFmQSxZQUFlLENBQUNDLE1BQUQsRUFBb0I7QUFBQSxNQUNyQ0MsY0FEcUMsR0FDc0JELE1BRHRCLENBQ3JDQyxjQURxQztBQUFBLE1BQ3JCQyxVQURxQixHQUNzQkYsTUFEdEIsQ0FDckJFLFVBRHFCO0FBQUEsTUFDVEMsV0FEUyxHQUNzQkgsTUFEdEIsQ0FDVEcsV0FEUztBQUFBLE1BQ0lDLGNBREosR0FDc0JKLE1BRHRCLENBQ0lJLGNBREo7O0FBRzVDLE1BQU1DLFlBQVksR0FBRyxTQUFmQSxZQUFlLEdBQU07QUFDdkIsUUFBSUMsT0FBTyxHQUFHLEtBQWQ7QUFEdUIsUUFFaEJDLFNBRmdCLEdBRUhQLE1BRkcsQ0FFaEJPLFNBRmdCOztBQUl2QixRQUFJLENBQUNBLFNBQUQsSUFBY0MsMkNBQUssQ0FBQ0MsVUFB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TUFBbEIsRUFBMEJ1RyxLQUExQjtBQUNIO0FBQ0osR0E1SkQ7QUE2SkgsQ0F4S0QiLCJmaWxlIjoiLi4vc3JjL3dpdGhNYXJrZG93bi50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RWRpdG9yLCBQYXRoLCBQb2ludCwgUmFuZ2UsIFRyYW5zZm9ybXMsIE5vZGVFbnRyeX0gZnJvbSBcInNsYXRlXCI7XG5pbXBvcnQge0xpc3ROb2RlfSBmcm9tICcuL3R5cGVzJ1xuaW1wb3J0IHtmaXhMaXN0fSBmcm9tIFwiLi91dGlsXCI7XG5cbmNvbnN0IFNIT1JUQ1VUUyA9IHtcbiAgICAnKic6ICd1bC1pdGVtJyxcbiAgICAnLSc6ICd1bC1pdGVtJyxcbiAgICAnKyc6ICd1bC1pdGVtJyxcbiAgICAnPic6ICdibG9jay1xdW90ZScsXG4gICAgJyMnOiAnaGVhZGluZy1vbmUnLFxuICAgICcjIyc6ICdoZWFkaW5nLXR3bycsXG4gICAgJyMjIyc6ICdoZWFkaW5nLXRocmVlJyxcbiAgICAnIyMjIyc6ICdoZWFkaW5nLWZvdXInLFxuICAgICcjIyMjIyc6ICdoZWFkaW5nLWZpdmUnLFxuICAgICcjIyMjIyMnOiAnaGVhZGluZy1zaXgnLFxufVxuXG5leHBvcnQgY29uc3Qgd2l0aE1hcmtkb3duID0gKGVkaXRvcjogRWRpdG9yKSA9PiB7XG4gICAgY29uc3Qge2RlbGV0ZUJhY2t3YXJkLCBpbnNlcnRUZXh0LCBpbnNlcnRCcmVhaywgZGVsZXRlRnJhZ21lbnR9ID0gZWRpdG9yXG5cbiAgICBjb25zdCBpbnNlcnRCcmVhazIgPSAoKSA9PiB7XG4gICAgICAgIGxldCBoYW5kbGVkID0gZmFsc2VcbiAgICAgICAgY29uc3Qge3NlbGVjdGlvbn0gPSBlZGl0b3JcblxuICAgICAgICBpZiAoIXNlbGVjdGlvbiB8fCBSYW5nZS5pc0V4cGFuZGVkKHNlbGVjdGlvbikpIHtcbiAgICAgICAgICAgIGluc2VydEJyZWFrKClcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJsb2NrID0gRWRpdG9yLmFib3ZlKGVkaXRvciwge1xuICAgICAgICAgICAgbWF0Y2g6IG4gPT4gRWRpdG9yLmlzQmxvY2soZWRpdG9yLCBuKSxcbiAgICAgICAgfSlcbiAgICAgICAgaWYgKCFibG9jayB8fCBFZGl0b3IuaXNFZGl0b3IoYmxvY2tbMF0pKSB7XG4gICAgICAgICAgICBpbnNlcnRCcmVhaygpXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXJlbnQgPSBFZGl0b3IucGFyZW50KGVkaXRvciwgYmxvY2tbMV0pXG4gICAgICAgIGlmICghcGFyZW50IHx8IEVkaXRvci5pc0VkaXRvcihwYXJlbnRbMF0pKSB7XG4gICAgICAgICAgICBpbnNlcnRCcmVhaygpXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0ZXh0ID0gRWRpdG9yLnN0cmluZyhlZGl0b3IsIGJsb2NrWzFdKVxuICAgICAgICBpZiAodGV4dCkge1xuICAgICAgICAgICAgaW5zZXJ0QnJlYWsoKVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYmxvY2tQYXRoOiBQYXRoID0gYmxvY2tbMV1cbiAgICAgICAgbGV0IGluZGVudCA9IDBcbiAgICAgICAgaWYgKHR5cGVvZiBwYXJlbnRbMF0uaW5kZW50ID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICBpbmRlbnQgPSBwYXJlbnRbMF0uaW5kZW50ID4gMSA/IHBhcmVudFswXS5pbmRlbnQgLSAxIDogMFxuICAgICAgICB9XG4gICAgICAgIFRyYW5zZm9ybXMuc2V0Tm9kZXMoZWRpdG9yLCB7dHlwZTogJ3BhcmFncmFwaCcsIGluZGVudH0sIHthdDogYmxvY2tQYXRofSlcbiAgICAgICAgLy8gaWYgaXQgaXMgdGhlIGxhc3QgY2hpbGRcbiAgICAgICAgaWYgKGJsb2NrUGF0aFtibG9ja1BhdGgubGVuZ3RoIC0gMV0gPT09IHBhcmVudFswXS5jaGlsZHJlbi5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICBUcmFuc2Zvcm1zLmxpZnROb2RlcyhlZGl0b3IsIHthdDogYmxvY2tQYXRofSlcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgfVxuICAgIGVkaXRvci5pbnNlcnRCcmVhayA9ICgpID0+IHtcbiAgICAgICAgaW5zZXJ0QnJlYWsyKClcbiAgICAgICAgZml4TGlzdChlZGl0b3IpXG4gICAgfVxuICAgIGVkaXRvci5pbnNlcnRUZXh0ID0gKHRleHQ6IHN0cmluZykgPT4ge1xuICAgICAgICBjb25zdCB7c2VsZWN0aW9ufSA9IGVkaXRvclxuICAgICAgICBpZiAoKHRleHQgIT09ICcgJykgfHwgIXNlbGVjdGlvbiB8fCAhUmFuZ2UuaXNDb2xsYXBzZWQoc2VsZWN0aW9uKSkge1xuICAgICAgICAgICAgaW5zZXJ0VGV4dCh0ZXh0KVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7YW5jaG9yfSA9IHNlbGVjdGlvblxuICAgICAgICBjb25zdCBibG9jayA9IEVkaXRvci5hYm92ZShlZGl0b3IsIHtcbiAgICAgICAgICAgIG1hdGNoOiBuID0+IEVkaXRvci5pc0Jsb2NrKGVkaXRvciwgbiksXG4gICAgICAgIH0pXG4gICAgICAgIGNvbnN0IHBhdGggPSBibG9jayA/IGJsb2NrWzFdIDogW11cbiAgICAgICAgY29uc3Qgc3RhcnQgPSBFZGl0b3Iuc3RhcnQoZWRpdG9yLCBwYXRoKVxuICAgICAgICBjb25zdCByYW5nZSA9IHthbmNob3IsIGZvY3VzOiBzdGFydH1cbiAgICAgICAgbGV0IGJlZm9yZVRleHQgPSBFZGl0b3Iuc3RyaW5nKGVkaXRvciwgcmFuZ2UpXG4gICAgICAgIGxldCB0YWJzID0gMFxuICAgICAgICBmb3IgKGxldCBjIG9mIGJlZm9yZVRleHQpIHtcbiAgICAgICAgICAgIGlmIChjID09PSAnXFx0Jykge1xuICAgICAgICAgICAgICAgIHRhYnMrK1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJlZm9yZVRleHQgPSBiZWZvcmVUZXh0LnN1YnN0cih0YWJzKVxuICAgICAgICBjb25zdCBibG9ja1R5cGUgPSBibG9jayFbMF0udHlwZSBhcyBzdHJpbmdcbiAgICAgICAgbGV0IGluTGlzdCA9IHR5cGVvZiBibG9ja1R5cGUgPT09ICdzdHJpbmcnID8gYmxvY2tUeXBlID09PSAnbGlzdC1pdGVtJyA6IGZhbHNlXG5cblxuICAgICAgICBsZXQgdHlwZSA9IFNIT1JUQ1VUU1tiZWZvcmVUZXh0XVxuXG4gICAgICAgIGlmICghdHlwZSAmJiAvXlsxLTldXFxkKlxcLi8udGVzdChiZWZvcmVUZXh0KSkge1xuICAgICAgICAgICAgdHlwZSA9ICdvbC1pdGVtJ1xuICAgICAgICB9XG4gICAgICAgIGxldCBsaXN0XG4gICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSAndWwtaXRlbSc6XG4gICAgICAgICAgICAgICAgaWYgKGluTGlzdCkge1xuICAgICAgICAgICAgICAgICAgICBpbnNlcnRUZXh0KHRleHQpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFRyYW5zZm9ybXMuc2VsZWN0KGVkaXRvciwgcmFuZ2UpXG4gICAgICAgICAgICAgICAgVHJhbnNmb3Jtcy5kZWxldGUoZWRpdG9yKVxuICAgICAgICAgICAgICAgIFRyYW5zZm9ybXMuc2V0Tm9kZXMoXG4gICAgICAgICAgICAgICAgICAgIGVkaXRvcixcbiAgICAgICAgICAgICAgICAgICAge3R5cGU6ICdsaXN0LWl0ZW0nfSxcbiAgICAgICAgICAgICAgICAgICAge21hdGNoOiBuID0+IEVkaXRvci5pc0Jsb2NrKGVkaXRvciwgbil9XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIGxpc3QgPSB7dHlwZTogJ2J1bGxldGVkLWxpc3QnLCBpbmRlbnQ6IHRhYnMsIGNoaWxkcmVuOiBbXX1cbiAgICAgICAgICAgICAgICBUcmFuc2Zvcm1zLndyYXBOb2RlcyhlZGl0b3IsIGxpc3QsIHtcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2g6IG4gPT4gbi50eXBlID09PSAnbGlzdC1pdGVtJyxcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIGZpeExpc3QoZWRpdG9yKVxuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICBjYXNlICdvbC1pdGVtJzpcbiAgICAgICAgICAgICAgICBpZiAoaW5MaXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGluc2VydFRleHQodGV4dClcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgZm91bmQgPSBiZWZvcmVUZXh0Lm1hdGNoKC9eKFtcXHRdKilcXGQrXFwuLylcbiAgICAgICAgICAgICAgICBUcmFuc2Zvcm1zLnNlbGVjdChlZGl0b3IsIHJhbmdlKVxuICAgICAgICAgICAgICAgIFRyYW5zZm9ybXMuZGVsZXRlKGVkaXRvcilcbiAgICAgICAgICAgICAgICBUcmFuc2Zvcm1zLnNldE5vZGVzKFxuICAgICAgICAgICAgICAgICAgICBlZGl0b3IsXG4gICAgICAgICAgICAgICAgICAgIHt0eXBlOiAnbGlzdC1pdGVtJ30sXG4gICAgICAgICAgICAgICAgICAgIHttYXRjaDogbiA9PiBFZGl0b3IuaXNCbG9jayhlZGl0b3IsIG4pfVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICBsaXN0ID0ge3R5cGU6ICdudW1iZXJlZC1saXN0JywgaW5kZW50OiB0YWJzLCBjaGlsZHJlbjogW119XG4gICAgICAgICAgICAgICAgVHJhbnNmb3Jtcy53cmFwTm9kZXMoZWRpdG9yLCBsaXN0LCB7XG4gICAgICAgICAgICAgICAgICAgIG1hdGNoOiBuID0+IG4udHlwZSA9PT0gJ2xpc3QtaXRlbScsXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBmaXhMaXN0KGVkaXRvcilcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgY2FzZSAnYmxvY2stcXVvdGUnOlxuICAgICAgICAgICAgICAgIGlmIChpbkxpc3QgfHwgYmxvY2tUeXBlICE9PSAncGFyYWdyYXBoJykge1xuICAgICAgICAgICAgICAgICAgICBpbnNlcnRUZXh0KHRleHQpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCBwYXJlbnQgPSBFZGl0b3IuYWJvdmUoZWRpdG9yLCB7bWF0Y2g6IG4gPT4gbi50eXBlID09PSAnYmxvY2stcXVvdGUnfSlcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGluc2VydFRleHQodGV4dClcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgVHJhbnNmb3Jtcy5zZWxlY3QoZWRpdG9yLCByYW5nZSlcbiAgICAgICAgICAgICAgICBUcmFuc2Zvcm1zLmRlbGV0ZShlZGl0b3IpXG4gICAgICAgICAgICAgICAgVHJhbnNmb3Jtcy53cmFwTm9kZXMoZWRpdG9yLCB7dHlwZTogJ2Jsb2NrLXF1b3RlJywgY2hpbGRyZW46IFtdfSwge1xuICAgICAgICAgICAgICAgICAgICBtYXRjaDogbiA9PiBuLnR5cGUgPT09ICdwYXJhZ3JhcGgnXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBpbnNlcnRUZXh0KHRleHQpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgZGVsZXRlQmFja3dhcmQyID0gKHVuaXQ6ICdjaGFyYWN0ZXInIHwgJ3dvcmQnIHwgJ2xpbmUnIHwgJ2Jsb2NrJykgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhcImVkaXRvci5kZWxldGVCYWNrd2FyZDpcIiwgdW5pdClcbiAgICAgICAgY29uc3Qge3NlbGVjdGlvbn0gPSBlZGl0b3JcblxuICAgICAgICBpZiAoIXNlbGVjdGlvbiB8fCBSYW5nZS5pc0V4cGFuZGVkKHNlbGVjdGlvbikpIHtcbiAgICAgICAgICAgIGRlbGV0ZUJhY2t3YXJkKHVuaXQpXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBtYXRjaCA9IEVkaXRvci5hYm92ZShlZGl0b3IsIHtcbiAgICAgICAgICAgIG1hdGNoOiBuID0+IEVkaXRvci5pc0Jsb2NrKGVkaXRvciwgbiksXG4gICAgICAgIH0pXG5cbiAgICAgICAgaWYgKCFtYXRjaCB8fCBFZGl0b3IuaXNFZGl0b3IobWF0Y2hbMF0pKSB7XG4gICAgICAgICAgICBkZWxldGVCYWNrd2FyZCh1bml0KVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgW2Jsb2NrLCBwYXRoXSA9IG1hdGNoIGFzIE5vZGVFbnRyeTxMaXN0Tm9kZT5cbiAgICAgICAgY29uc3Qgc3RhcnQgPSBFZGl0b3Iuc3RhcnQoZWRpdG9yLCBwYXRoKVxuXG4gICAgICAgIGlmIChQb2ludC5lcXVhbHMoc2VsZWN0aW9uLmFuY2hvciwgc3RhcnQpKSB7XG4gICAgICAgICAgICBpZiAoYmxvY2sudHlwZSA9PT0gJ2xpc3QtaXRlbScpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBbbGlzdE5vZGVdID0gRWRpdG9yLnBhcmVudChlZGl0b3IsIHBhdGgpIGFzIE5vZGVFbnRyeTxMaXN0Tm9kZT5cbiAgICAgICAgICAgICAgICBpZiAobGlzdE5vZGUgJiYgKGxpc3ROb2RlLmluZGVudCBhcyBudW1iZXIgPiAwKSkge1xuICAgICAgICAgICAgICAgICAgICBFZGl0b3Iud2l0aG91dE5vcm1hbGl6aW5nKGVkaXRvciwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgVHJhbnNmb3Jtcy53cmFwTm9kZXMoZWRpdG9yLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogbGlzdE5vZGUudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRlbnQ6IGxpc3ROb2RlLmluZGVudCEgLSAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXVxuICAgICAgICAgICAgICAgICAgICAgICAgfSwge2F0OiBwYXRofSlcbiAgICAgICAgICAgICAgICAgICAgICAgIFRyYW5zZm9ybXMubGlmdE5vZGVzKGVkaXRvciwge2F0OiBwYXRofSlcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge3R5cGU6ICdwYXJhZ3JhcGgnfSlcbiAgICAgICAgICAgICAgICAgICAgVHJhbnNmb3Jtcy51bndyYXBOb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoOiBuID0+ICh0eXBlb2Ygbi50eXBlID09PSAnc3RyaW5nJyAmJiBuLnR5cGUuZW5kc1dpdGgoJy1saXN0JykpLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3BsaXQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC8vIGRlbGV0ZUJhY2t3YXJkKHVuaXQpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChibG9jay50eXBlID09PSAncGFyYWdyYXBoJykge1xuICAgICAgICAgICAgICAgIGlmIChibG9jay5pbmRlbnQgJiYgYmxvY2suaW5kZW50ID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge2luZGVudDogYmxvY2suaW5kZW50IC0gMX0sIHthdDogcGF0aH0pXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZUJhY2t3YXJkKHVuaXQpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBUcmFuc2Zvcm1zLnNldE5vZGVzKGVkaXRvciwge3R5cGU6ICdwYXJhZ3JhcGgnfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9IC8vIGVuZCBpZiBhdCBzdGFydFxuICAgICAgICBkZWxldGVCYWNrd2FyZCh1bml0KVxuICAgIH1cblxuICAgIGVkaXRvci5kZWxldGVCYWNrd2FyZCA9ICh1bml0OiAnY2hhcmFjdGVyJyB8ICd3b3JkJyB8ICdsaW5lJyB8ICdibG9jaycpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJlZGl0b3IuZGVsZXRlQmFja3dhcmQ6XCIsIHVuaXQpXG4gICAgICAgIGRlbGV0ZUJhY2t3YXJkMih1bml0KVxuICAgICAgICBmaXhMaXN0KGVkaXRvcilcbiAgICB9XG5cbiAgICBlZGl0b3IuZGVsZXRlRnJhZ21lbnQgPSAoKT0+e1xuICAgICAgICBjb25zb2xlLmxvZyhcImVkaXRvci5kZWxldGVGcmFnbWVudDpcIilcbiAgICAgICAgZGVsZXRlRnJhZ21lbnQoKVxuICAgIH1cblxuICAgIHJldHVybiBlZGl0b3Jcbn1cblxuY29uc3QgYmVmb3JlVGV4dEluQmxvY2sgPSAoZWRpdG9yOiBFZGl0b3IpOiBzdHJpbmcgPT4ge1xuICAgIGNvbnN0IHtzZWxlY3Rpb259ID0gZWRpdG9yXG4gICAgaWYgKCFzZWxlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuICcnXG4gICAgfVxuICAgIGNvbnN0IGJsb2NrID0gRWRpdG9yLmFib3ZlKGVkaXRvciwge1xuICAgICAgICBtYXRjaDogbiA9PiBFZGl0b3IuaXNCbG9jayhlZGl0b3IsIG4pLFxuICAgIH0pXG4gICAgY29uc3QgcGF0aCA9IGJsb2NrID8gYmxvY2tbMV0gOiBbXVxuICAgIGNvbnN0IHN0YXJ0ID0gRWRpdG9yLnN0YXJ0KGVkaXRvciwgcGF0aClcbiAgICBjb25zdCByYW5nZSA9IHthbmNob3I6IFJhbmdlLnN0YXJ0KGVkaXRvci5zZWxlY3Rpb24hKSwgZm9jdXM6IHN0YXJ0fVxuICAgIGxldCBiZWZvcmVUZXh0ID0gRWRpdG9yLnN0cmluZyhlZGl0b3IsIHJhbmdlKVxuICAgIHJldHVybiBiZWZvcmVUZXh0XG59XG5cblRyYW5zZm9ybXMuZGVsZXRlID0oXG4gICAgZWRpdG9yOiBFZGl0b3IsXG4gICAgb3B0aW9uczoge1xuICAgIGF0PzogTG9jYXRpb25cbiAgICBkaXN0YW5jZT86IG51bWJlclxuICAgIHVuaXQ/OiAnY2hhcmFjdGVyJyB8ICd3b3JkJyB8ICdsaW5lJyB8ICdibG9jaydcbiAgICByZXZlcnNlPzogYm9vbGVhblxuICAgIGhhbmdpbmc/OiBib29sZWFuXG4gICAgdm9pZHM/OiBib29sZWFuXG59ID0ge31cbik6dm9pZCA9PiB7XG4gICAgRWRpdG9yLndpdGhvdXROb3JtYWxpemluZyhlZGl0b3IsICgpID0+IHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgcmV2ZXJzZSA9IGZhbHNlLFxuICAgICAgICAgICAgdW5pdCA9ICdjaGFyYWN0ZXInLFxuICAgICAgICAgICAgZGlzdGFuY2UgPSAxLFxuICAgICAgICAgICAgdm9pZHMgPSBmYWxzZSxcbiAgICAgICAgfSA9IG9wdGlvbnNcbiAgICAgICAgbGV0IHsgYXQgPSBlZGl0b3Iuc2VsZWN0aW9uLCBoYW5naW5nID0gZmFsc2UgfSA9IG9wdGlvbnNcblxuICAgICAgICBpZiAoIWF0KSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChSYW5nZS5pc1JhbmdlKGF0KSAmJiBSYW5nZS5pc0NvbGxhcHNlZChhdCkpIHtcbiAgICAgICAgICAgIGF0ID0gYXQuYW5jaG9yXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoUG9pbnQuaXNQb2ludChhdCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGZ1cnRoZXN0Vm9pZCA9IEVkaXRvci52b2lkKGVkaXRvciwgeyBhdCwgbW9kZTogJ2hpZ2hlc3QnIH0pXG5cbiAgICAgICAgICAgIGlmICghdm9pZHMgJiYgZnVydGhlc3RWb2lkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgWywgdm9pZFBhdGhdID0gZnVydGhlc3RWb2lkXG4gICAgICAgICAgICAgICAgYXQgPSB2b2lkUGF0aFxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBvcHRzID0geyB1bml0LCBkaXN0YW5jZSB9XG4gICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gcmV2ZXJzZVxuICAgICAgICAgICAgICAgICAgICA/IEVkaXRvci5iZWZvcmUoZWRpdG9yLCBhdCwgb3B0cykgfHwgRWRpdG9yLnN0YXJ0KGVkaXRvciwgW10pXG4gICAgICAgICAgICAgICAgICAgIDogRWRpdG9yLmFmdGVyKGVkaXRvciwgYXQsIG9wdHMpIHx8IEVkaXRvci5lbmQoZWRpdG9yLCBbXSlcbiAgICAgICAgICAgICAgICBhdCA9IHsgYW5jaG9yOiBhdCwgZm9jdXM6IHRhcmdldCB9XG4gICAgICAgICAgICAgICAgaGFuZ2luZyA9IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChQYXRoLmlzUGF0aChhdCkpIHtcbiAgICAgICAgICAgIFRyYW5zZm9ybXMucmVtb3ZlTm9kZXMoZWRpdG9yLCB7IGF0LCB2b2lkcyB9KVxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoUmFuZ2UuaXNDb2xsYXBzZWQoYXQpKSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaGFuZ2luZykge1xuICAgICAgICAgICAgYXQgPSBFZGl0b3IudW5oYW5nUmFuZ2UoZWRpdG9yLCBhdCwgeyB2b2lkcyB9KVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IFtzdGFydCwgZW5kXSA9IFJhbmdlLmVkZ2VzKGF0KVxuICAgICAgICBjb25zdCBzdGFydEJsb2NrID0gRWRpdG9yLmFib3ZlKGVkaXRvciwge1xuICAgICAgICAgICAgbWF0Y2g6IG4gPT4gRWRpdG9yLmlzQmxvY2soZWRpdG9yLCBuKSxcbiAgICAgICAgICAgIGF0OiBzdGFydCxcbiAgICAgICAgICAgIHZvaWRzLFxuICAgICAgICB9KVxuICAgICAgICBjb25zdCBlbmRCbG9jayA9IEVkaXRvci5hYm92ZShlZGl0b3IsIHtcbiAgICAgICAgICAgIG1hdGNoOiBuID0+IEVkaXRvci5pc0Jsb2NrKGVkaXRvciwgbiksXG4gICAgICAgICAgICBhdDogZW5kLFxuICAgICAgICAgICAgdm9pZHMsXG4gICAgICAgIH0pXG4gICAgICAgIGNvbnN0IGlzQWNyb3NzQmxvY2tzID1cbiAgICAgICAgICAgIHN0YXJ0QmxvY2sgJiYgZW5kQmxvY2sgJiYgIVBhdGguZXF1YWxzKHN0YXJ0QmxvY2tbMV0sIGVuZEJsb2NrWzFdKVxuICAgICAgICBjb25zdCBpc1NpbmdsZVRleHQgPSBQYXRoLmVxdWFscyhzdGFydC5wYXRoLCBlbmQucGF0aClcbiAgICAgICAgY29uc3Qgc3RhcnRWb2lkID0gdm9pZHNcbiAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgOiBFZGl0b3Iudm9pZChlZGl0b3IsIHsgYXQ6IHN0YXJ0LCBtb2RlOiAnaGlnaGVzdCcgfSlcbiAgICAgICAgY29uc3QgZW5kVm9pZCA9IHZvaWRzXG4gICAgICAgICAgICA/IG51bGxcbiAgICAgICAgICAgIDogRWRpdG9yLnZvaWQoZWRpdG9yLCB7IGF0OiBlbmQsIG1vZGU6ICdoaWdoZXN0JyB9KVxuXG4gICAgICAgIC8vIElmIHRoZSBzdGFydCBvciBlbmQgcG9pbnRzIGFyZSBpbnNpZGUgYW4gaW5saW5lIHZvaWQsIG51ZGdlIHRoZW0gb3V0LlxuICAgICAgICBpZiAoc3RhcnRWb2lkKSB7XG4gICAgICAgICAgICBjb25zdCBiZWZvcmUgPSBFZGl0b3IuYmVmb3JlKGVkaXRvciwgc3RhcnQpXG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBiZWZvcmUgJiZcbiAgICAgICAgICAgICAgICBzdGFydEJsb2NrICYmXG4gICAgICAgICAgICAgICAgUGF0aC5pc0FuY2VzdG9yKHN0YXJ0QmxvY2tbMV0sIGJlZm9yZS5wYXRoKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgc3RhcnQgPSBiZWZvcmVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbmRWb2lkKSB7XG4gICAgICAgICAgICBjb25zdCBhZnRlciA9IEVkaXRvci5hZnRlcihlZGl0b3IsIGVuZClcblxuICAgICAgICAgICAgaWYgKGFmdGVyICYmIGVuZEJsb2NrICYmIFBhdGguaXNBbmNlc3RvcihlbmRCbG9ja1sxXSwgYWZ0ZXIucGF0aCkpIHtcbiAgICAgICAgICAgICAgICBlbmQgPSBhZnRlclxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2V0IHRoZSBoaWdoZXN0IG5vZGVzIHRoYXQgYXJlIGNvbXBsZXRlbHkgaW5zaWRlIHRoZSByYW5nZSwgYXMgd2VsbCBhc1xuICAgICAgICAvLyB0aGUgc3RhcnQgYW5kIGVuZCBub2Rlcy5cbiAgICAgICAgY29uc3QgbWF0Y2hlczogTm9kZUVudHJ5W10gPSBbXVxuICAgICAgICBsZXQgbGFzdFBhdGg6IFBhdGggfCB1bmRlZmluZWRcblxuICAgICAgICBmb3IgKGNvbnN0IGVudHJ5IG9mIEVkaXRvci5ub2RlcyhlZGl0b3IsIHsgYXQsIHZvaWRzIH0pKSB7XG4gICAgICAgICAgICBjb25zdCBbbm9kZSwgcGF0aF0gPSBlbnRyeVxuXG4gICAgICAgICAgICBpZiAobGFzdFBhdGggJiYgUGF0aC5jb21wYXJlKHBhdGgsIGxhc3RQYXRoKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAoIXZvaWRzICYmIEVkaXRvci5pc1ZvaWQoZWRpdG9yLCBub2RlKSkgfHxcbiAgICAgICAgICAgICAgICAoIVBhdGguaXNDb21tb24ocGF0aCwgc3RhcnQucGF0aCkgJiYgIVBhdGguaXNDb21tb24ocGF0aCwgZW5kLnBhdGgpKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgbWF0Y2hlcy5wdXNoKGVudHJ5KVxuICAgICAgICAgICAgICAgIGxhc3RQYXRoID0gcGF0aFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcGF0aFJlZnMgPSBBcnJheS5mcm9tKG1hdGNoZXMsIChbLCBwXSkgPT4gRWRpdG9yLnBhdGhSZWYoZWRpdG9yLCBwKSlcbiAgICAgICAgY29uc3Qgc3RhcnRSZWYgPSBFZGl0b3IucG9pbnRSZWYoZWRpdG9yLCBzdGFydClcbiAgICAgICAgY29uc3QgZW5kUmVmID0gRWRpdG9yLnBvaW50UmVmKGVkaXRvciwgZW5kKVxuXG4gICAgICAgIGlmICghaXNTaW5nbGVUZXh0ICYmICFzdGFydFZvaWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHBvaW50ID0gc3RhcnRSZWYuY3VycmVudCFcbiAgICAgICAgICAgIGNvbnN0IFtub2RlXSA9IEVkaXRvci5sZWFmKGVkaXRvciwgcG9pbnQpXG4gICAgICAgICAgICBjb25zdCB7IHBhdGggfSA9IHBvaW50XG4gICAgICAgICAgICBjb25zdCB7IG9mZnNldCB9ID0gc3RhcnRcbiAgICAgICAgICAgIGNvbnN0IHRleHQgPSBub2RlLnRleHQuc2xpY2Uob2Zmc2V0KVxuICAgICAgICAgICAgZWRpdG9yLmFwcGx5KHsgdHlwZTogJ3JlbW92ZV90ZXh0JywgcGF0aCwgb2Zmc2V0LCB0ZXh0IH0pXG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGNvbnN0IHBhdGhSZWYgb2YgcGF0aFJlZnMpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhdGggPSBwYXRoUmVmLnVucmVmKCkhXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInJlbW92ZSBub3QgYXQ6XCIsIHBhdGgpXG4gICAgICAgICAgICBUcmFuc2Zvcm1zLnJlbW92ZU5vZGVzKGVkaXRvciwgeyBhdDogcGF0aCwgdm9pZHMgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZW5kVm9pZCkge1xuICAgICAgICAgICAgY29uc3QgcG9pbnQgPSBlbmRSZWYuY3VycmVudCFcbiAgICAgICAgICAgIGNvbnN0IFtub2RlXSA9IEVkaXRvci5sZWFmKGVkaXRvciwgcG9pbnQpXG4gICAgICAgICAgICBjb25zdCB7IHBhdGggfSA9IHBvaW50XG4gICAgICAgICAgICBjb25zdCBvZmZzZXQgPSBpc1NpbmdsZVRleHQgPyBzdGFydC5vZmZzZXQgOiAwXG4gICAgICAgICAgICBjb25zdCB0ZXh0ID0gbm9kZS50ZXh0LnNsaWNlKG9mZnNldCwgZW5kLm9mZnNldClcbiAgICAgICAgICAgIGVkaXRvci5hcHBseSh7IHR5cGU6ICdyZW1vdmVfdGV4dCcsIHBhdGgsIG9mZnNldCwgdGV4dCB9KVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgIWlzU2luZ2xlVGV4dCAmJlxuICAgICAgICAgICAgaXNBY3Jvc3NCbG9ja3MgJiZcbiAgICAgICAgICAgIGVuZFJlZi5jdXJyZW50ICYmXG4gICAgICAgICAgICBzdGFydFJlZi5jdXJyZW50XG4gICAgICAgICkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJtZXJnZSBub2RlIGF0OlwiLCBhdClcbiAgICAgICAgICAgIFRyYW5zZm9ybXMubWVyZ2VOb2RlcyhlZGl0b3IsIHtcbiAgICAgICAgICAgICAgICBhdDogZW5kUmVmLmN1cnJlbnQsXG4gICAgICAgICAgICAgICAgaGFuZ2luZzogdHJ1ZSxcbiAgICAgICAgICAgICAgICB2b2lkcyxcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwb2ludCA9IGVuZFJlZi51bnJlZigpIHx8IHN0YXJ0UmVmLnVucmVmKClcblxuICAgICAgICBpZiAob3B0aW9ucy5hdCA9PSBudWxsICYmIHBvaW50KSB7XG4gICAgICAgICAgICBUcmFuc2Zvcm1zLnNlbGVjdChlZGl0b3IsIHBvaW50KVxuICAgICAgICB9XG4gICAgfSlcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../src/withMarkdown.ts\n");

/***/ })

})