webpackHotUpdate_N_E("pages/examples/[example]",{

/***/ "../src/withMarkdown.ts":
/*!******************************!*\
  !*** ../src/withMarkdown.ts ***!
  \******************************/
/*! exports provided: withMarkdown */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"withMarkdown\", function() { return withMarkdown; });\n/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutProperties */ \"../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/slicedToArray */ \"../node_modules/@babel/runtime/helpers/esm/slicedToArray.js\");\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! slate */ \"../node_modules/slate/dist/index.es.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util */ \"../src/util.ts\");\n\n\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\nvar SHORTCUTS = {\n  '*': 'ul-item',\n  '-': 'ul-item',\n  '+': 'ul-item',\n  '>': 'block-quote',\n  '#': 'heading-one',\n  '##': 'heading-two',\n  '###': 'heading-three',\n  '####': 'heading-four',\n  '#####': 'heading-five',\n  '######': 'heading-six'\n};\nvar withMarkdown = function withMarkdown(editor) {\n  var deleteBackward = editor.deleteBackward,\n      insertText = editor.insertText,\n      insertBreak = editor.insertBreak,\n      deleteFragment = editor.deleteFragment;\n\n  var insertBreak2 = function insertBreak2() {\n    var handled = false;\n    var selection = editor.selection;\n\n    if (!selection || slate__WEBPACK_IMPORTED_MODULE_2__[\"Range\"].isExpanded(selection)) {\n      insertBreak();\n      return;\n    }\n\n    var block = slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].above(editor, {\n      match: function match(n) {\n        return slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].isBlock(editor, n);\n      }\n    });\n\n    if (!block || slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].isEditor(block[0])) {\n      insertBreak();\n      return;\n    }\n\n    var parent = slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].parent(editor, block[1]);\n\n    if (!parent || slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].isEditor(parent[0])) {\n      insertBreak();\n      return;\n    }\n\n    var text = slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].string(editor, block[1]);\n\n    if (text) {\n      insertBreak();\n      return;\n    }\n\n    var blockPath = block[1];\n    var indent = 0;\n\n    if (typeof parent[0].indent === \"number\") {\n      indent = parent[0].indent > 1 ? parent[0].indent - 1 : 0;\n    }\n\n    slate__WEBPACK_IMPORTED_MODULE_2__[\"Transforms\"].setNodes(editor, {\n      type: 'paragraph',\n      indent: indent\n    }, {\n      at: blockPath\n    }); // if it is the last child\n\n    if (blockPath[blockPath.length - 1] === parent[0].children.length - 1) {\n      slate__WEBPACK_IMPORTED_MODULE_2__[\"Transforms\"].liftNodes(editor, {\n        at: blockPath\n      });\n      return;\n    }\n  };\n\n  editor.insertBreak = function () {\n    insertBreak2();\n    Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"fixList\"])(editor);\n  };\n\n  editor.insertText = function (text) {\n    var selection = editor.selection;\n\n    if (text !== ' ' || !selection || !slate__WEBPACK_IMPORTED_MODULE_2__[\"Range\"].isCollapsed(selection)) {\n      insertText(text);\n      return;\n    }\n\n    var anchor = selection.anchor;\n    var block = slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].above(editor, {\n      match: function match(n) {\n        return slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].isBlock(editor, n);\n      }\n    });\n    var path = block ? block[1] : [];\n    var start = slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].start(editor, path);\n    var range = {\n      anchor: anchor,\n      focus: start\n    };\n    var beforeText = slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].string(editor, range);\n    var tabs = 0;\n\n    var _iterator = _createForOfIteratorHelper(beforeText),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var c = _step.value;\n\n        if (c === '\\t') {\n          tabs++;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    beforeText = beforeText.substr(tabs);\n    var blockType = block[0].type;\n    var inList = typeof blockType === 'string' ? blockType === 'list-item' : false;\n    var type = SHORTCUTS[beforeText];\n\n    if (!type && /^[1-9]\\d*\\./.test(beforeText)) {\n      type = 'ol-item';\n    }\n\n    var list;\n\n    switch (type) {\n      case 'ul-item':\n        if (inList) {\n          insertText(text);\n          break;\n        }\n\n        slate__WEBPACK_IMPORTED_MODULE_2__[\"Transforms\"].select(editor, range);\n        slate__WEBPACK_IMPORTED_MODULE_2__[\"Transforms\"][\"delete\"](editor);\n        slate__WEBPACK_IMPORTED_MODULE_2__[\"Transforms\"].setNodes(editor, {\n          type: 'list-item'\n        }, {\n          match: function match(n) {\n            return slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].isBlock(editor, n);\n          }\n        });\n        list = {\n          type: 'bulleted-list',\n          indent: tabs,\n          children: []\n        };\n        slate__WEBPACK_IMPORTED_MODULE_2__[\"Transforms\"].wrapNodes(editor, list, {\n          match: function match(n) {\n            return n.type === 'list-item';\n          }\n        });\n        Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"fixList\"])(editor);\n        break;\n\n      case 'ol-item':\n        if (inList) {\n          insertText(text);\n          break;\n        }\n\n        var found = beforeText.match(/^([\\t]*)\\d+\\./);\n        slate__WEBPACK_IMPORTED_MODULE_2__[\"Transforms\"].select(editor, range);\n        slate__WEBPACK_IMPORTED_MODULE_2__[\"Transforms\"][\"delete\"](editor);\n        slate__WEBPACK_IMPORTED_MODULE_2__[\"Transforms\"].setNodes(editor, {\n          type: 'list-item'\n        }, {\n          match: function match(n) {\n            return slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].isBlock(editor, n);\n          }\n        });\n        list = {\n          type: 'numbered-list',\n          indent: tabs,\n          children: []\n        };\n        slate__WEBPACK_IMPORTED_MODULE_2__[\"Transforms\"].wrapNodes(editor, list, {\n          match: function match(n) {\n            return n.type === 'list-item';\n          }\n        });\n        Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"fixList\"])(editor);\n        break;\n\n      case 'block-quote':\n        if (inList || blockType !== 'paragraph') {\n          insertText(text);\n          break;\n        }\n\n        var parent = slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].above(editor, {\n          match: function match(n) {\n            return n.type === 'block-quote';\n          }\n        });\n\n        if (parent) {\n          insertText(text);\n          break;\n        }\n\n        slate__WEBPACK_IMPORTED_MODULE_2__[\"Transforms\"].select(editor, range);\n        slate__WEBPACK_IMPORTED_MODULE_2__[\"Transforms\"][\"delete\"](editor);\n        slate__WEBPACK_IMPORTED_MODULE_2__[\"Transforms\"].wrapNodes(editor, {\n          type: 'block-quote',\n          children: []\n        }, {\n          match: function match(n) {\n            return n.type === 'paragraph';\n          }\n        });\n        break;\n\n      default:\n        insertText(text);\n    }\n\n    return;\n  };\n\n  var deleteBackward2 = function deleteBackward2(unit) {\n    console.log(\"editor.deleteBackward:\", unit);\n    var selection = editor.selection;\n\n    if (!selection || slate__WEBPACK_IMPORTED_MODULE_2__[\"Range\"].isExpanded(selection)) {\n      deleteBackward(unit);\n      return;\n    }\n\n    var match = slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].above(editor, {\n      match: function match(n) {\n        return slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].isBlock(editor, n);\n      }\n    });\n\n    if (!match || slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].isEditor(match[0])) {\n      deleteBackward(unit);\n      return;\n    }\n\n    var _ref = match,\n        _ref2 = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_ref, 2),\n        block = _ref2[0],\n        path = _ref2[1];\n\n    var start = slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].start(editor, path);\n\n    if (slate__WEBPACK_IMPORTED_MODULE_2__[\"Point\"].equals(selection.anchor, start)) {\n      if (block.type === 'list-item') {\n        var _ref3 = slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].parent(editor, path),\n            _ref4 = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_ref3, 1),\n            listNode = _ref4[0];\n\n        if (listNode && listNode.indent > 0) {\n          slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].withoutNormalizing(editor, function () {\n            slate__WEBPACK_IMPORTED_MODULE_2__[\"Transforms\"].wrapNodes(editor, {\n              type: listNode.type,\n              indent: listNode.indent - 1,\n              children: []\n            }, {\n              at: path\n            });\n            slate__WEBPACK_IMPORTED_MODULE_2__[\"Transforms\"].liftNodes(editor, {\n              at: path\n            });\n          });\n        } else {\n          slate__WEBPACK_IMPORTED_MODULE_2__[\"Transforms\"].setNodes(editor, {\n            type: 'paragraph'\n          });\n          slate__WEBPACK_IMPORTED_MODULE_2__[\"Transforms\"].unwrapNodes(editor, {\n            match: function match(n) {\n              return typeof n.type === 'string' && n.type.endsWith('-list');\n            },\n            split: true\n          }); // deleteBackward(unit)\n        }\n      } else if (block.type === 'paragraph') {\n        if (block.indent && block.indent > 0) {\n          slate__WEBPACK_IMPORTED_MODULE_2__[\"Transforms\"].setNodes(editor, {\n            indent: block.indent - 1\n          }, {\n            at: path\n          });\n          return;\n        } else {\n          deleteBackward(unit);\n        }\n      } else {\n        slate__WEBPACK_IMPORTED_MODULE_2__[\"Transforms\"].setNodes(editor, {\n          type: 'paragraph'\n        });\n      }\n\n      return;\n    } // end if at start\n\n\n    deleteBackward(unit);\n  };\n\n  editor.deleteBackward = function (unit) {\n    console.log(\"editor.deleteBackward:\", unit);\n    deleteBackward2(unit);\n    Object(_util__WEBPACK_IMPORTED_MODULE_3__[\"fixList\"])(editor);\n  };\n\n  editor.deleteFragment = function () {\n    console.log(\"editor.deleteFragment:\");\n    deleteFragment();\n  };\n\n  return editor;\n};\n\nvar beforeTextInBlock = function beforeTextInBlock(editor) {\n  var selection = editor.selection;\n\n  if (!selection) {\n    return '';\n  }\n\n  var block = slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].above(editor, {\n    match: function match(n) {\n      return slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].isBlock(editor, n);\n    }\n  });\n  var path = block ? block[1] : [];\n  var start = slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].start(editor, path);\n  var range = {\n    anchor: slate__WEBPACK_IMPORTED_MODULE_2__[\"Range\"].start(editor.selection),\n    focus: start\n  };\n  var beforeText = slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].string(editor, range);\n  return beforeText;\n};\n\nslate__WEBPACK_IMPORTED_MODULE_2__[\"Transforms\"][\"delete\"] = function (editor) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].withoutNormalizing(editor, function () {\n    var _options$reverse = options.reverse,\n        reverse = _options$reverse === void 0 ? false : _options$reverse,\n        _options$unit = options.unit,\n        unit = _options$unit === void 0 ? 'character' : _options$unit,\n        _options$distance = options.distance,\n        distance = _options$distance === void 0 ? 1 : _options$distance,\n        _options$voids = options.voids,\n        voids = _options$voids === void 0 ? false : _options$voids;\n    var _options$at = options.at,\n        at = _options$at === void 0 ? editor.selection : _options$at,\n        _options$hanging = options.hanging,\n        hanging = _options$hanging === void 0 ? false : _options$hanging;\n\n    if (!at) {\n      return;\n    }\n\n    if (slate__WEBPACK_IMPORTED_MODULE_2__[\"Range\"].isRange(at) && slate__WEBPACK_IMPORTED_MODULE_2__[\"Range\"].isCollapsed(at)) {\n      at = at.anchor;\n    }\n\n    if (slate__WEBPACK_IMPORTED_MODULE_2__[\"Point\"].isPoint(at)) {\n      var furthestVoid = slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"][\"void\"](editor, {\n        at: at,\n        mode: 'highest'\n      });\n\n      if (!voids && furthestVoid) {\n        var _furthestVoid = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(furthestVoid, 2),\n            voidPath = _furthestVoid[1];\n\n        at = voidPath;\n      } else {\n        var opts = {\n          unit: unit,\n          distance: distance\n        };\n        var target = reverse ? slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].before(editor, at, opts) || slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].start(editor, []) : slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].after(editor, at, opts) || slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].end(editor, []);\n        at = {\n          anchor: at,\n          focus: target\n        };\n        hanging = true;\n      }\n    }\n\n    if (slate__WEBPACK_IMPORTED_MODULE_2__[\"Path\"].isPath(at)) {\n      slate__WEBPACK_IMPORTED_MODULE_2__[\"Transforms\"].removeNodes(editor, {\n        at: at,\n        voids: voids\n      });\n      return;\n    }\n\n    if (slate__WEBPACK_IMPORTED_MODULE_2__[\"Range\"].isCollapsed(at)) {\n      return;\n    }\n\n    if (!hanging) {\n      at = slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].unhangRange(editor, at, {\n        voids: voids\n      });\n    }\n\n    var _Range$edges = slate__WEBPACK_IMPORTED_MODULE_2__[\"Range\"].edges(at),\n        _Range$edges2 = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_Range$edges, 2),\n        start = _Range$edges2[0],\n        end = _Range$edges2[1];\n\n    var startBlock = slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].above(editor, {\n      match: function match(n) {\n        return slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].isBlock(editor, n);\n      },\n      at: start,\n      voids: voids\n    });\n    var endBlock = slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].above(editor, {\n      match: function match(n) {\n        return slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].isBlock(editor, n);\n      },\n      at: end,\n      voids: voids\n    });\n    var isAcrossBlocks = startBlock && endBlock && !slate__WEBPACK_IMPORTED_MODULE_2__[\"Path\"].equals(startBlock[1], endBlock[1]);\n    var isSingleText = slate__WEBPACK_IMPORTED_MODULE_2__[\"Path\"].equals(start.path, end.path);\n    var startVoid = voids ? null : slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"][\"void\"](editor, {\n      at: start,\n      mode: 'highest'\n    });\n    var endVoid = voids ? null : slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"][\"void\"](editor, {\n      at: end,\n      mode: 'highest'\n    }); // If the start or end points are inside an inline void, nudge them out.\n\n    if (startVoid) {\n      var before = slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].before(editor, start);\n\n      if (before && startBlock && slate__WEBPACK_IMPORTED_MODULE_2__[\"Path\"].isAncestor(startBlock[1], before.path)) {\n        start = before;\n      }\n    }\n\n    if (endVoid) {\n      var after = slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].after(editor, end);\n\n      if (after && endBlock && slate__WEBPACK_IMPORTED_MODULE_2__[\"Path\"].isAncestor(endBlock[1], after.path)) {\n        end = after;\n      }\n    } // Get the highest nodes that are completely inside the range, as well as\n    // the start and end nodes.\n\n\n    var matches = [];\n    var lastPath;\n\n    var _iterator2 = _createForOfIteratorHelper(slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].nodes(editor, {\n      at: at,\n      voids: voids\n    })),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var entry = _step2.value;\n\n        var _entry = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(entry, 2),\n            _node3 = _entry[0],\n            _path3 = _entry[1];\n\n        if (lastPath && slate__WEBPACK_IMPORTED_MODULE_2__[\"Path\"].compare(_path3, lastPath) === 0) {\n          continue;\n        }\n\n        if (!voids && slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].isVoid(editor, _node3) || !slate__WEBPACK_IMPORTED_MODULE_2__[\"Path\"].isCommon(_path3, start.path) && !slate__WEBPACK_IMPORTED_MODULE_2__[\"Path\"].isCommon(_path3, end.path)) {\n          matches.push(entry);\n          lastPath = _path3;\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    var pathRefs = Array.from(matches, function (_ref5) {\n      var _ref6 = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_ref5, 2),\n          p = _ref6[1];\n\n      return slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].pathRef(editor, p);\n    });\n    var startRef = slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].pointRef(editor, start);\n    var endRef = slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].pointRef(editor, end);\n\n    if (!isSingleText && !startVoid) {\n      var _point = startRef.current;\n\n      var _Editor$leaf = slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].leaf(editor, _point),\n          _Editor$leaf2 = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_Editor$leaf, 1),\n          _node = _Editor$leaf2[0];\n\n      var path = _point.path;\n      var _start = start,\n          offset = _start.offset;\n\n      var text = _node.text.slice(offset);\n\n      editor.apply({\n        type: 'remove_text',\n        path: path,\n        offset: offset,\n        text: text\n      });\n    }\n\n    for (var _i = 0, _pathRefs = pathRefs; _i < _pathRefs.length; _i++) {\n      var pathRef = _pathRefs[_i];\n\n      var _path = pathRef.unref();\n\n      console.log(\"remove not at:\", _path);\n      slate__WEBPACK_IMPORTED_MODULE_2__[\"Transforms\"].removeNodes(editor, {\n        at: _path,\n        voids: voids\n      });\n    }\n\n    if (!endVoid) {\n      var _point2 = endRef.current;\n\n      var _Editor$leaf3 = slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].leaf(editor, _point2),\n          _Editor$leaf4 = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_Editor$leaf3, 1),\n          _node2 = _Editor$leaf4[0];\n\n      var _path2 = _point2.path;\n\n      var _offset = isSingleText ? start.offset : 0;\n\n      var _text = _node2.text.slice(_offset, end.offset);\n\n      editor.apply({\n        type: 'remove_text',\n        path: _path2,\n        offset: _offset,\n        text: _text\n      });\n    }\n\n    if (!isSingleText && isAcrossBlocks && endRef.current && startRef.current) {\n      console.log(\"merge node at:\", at);\n      slate__WEBPACK_IMPORTED_MODULE_2__[\"Transforms\"].mergeNodes(editor, {\n        at: endRef.current,\n        hanging: true,\n        voids: voids\n      });\n    }\n\n    var point = endRef.unref() || startRef.unref();\n\n    if (options.at == null && point) {\n      slate__WEBPACK_IMPORTED_MODULE_2__[\"Transforms\"].select(editor, point);\n    }\n  });\n};\n\nslate__WEBPACK_IMPORTED_MODULE_2__[\"Transforms\"].mergeNodes = function (editor) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].withoutNormalizing(editor, function () {\n    var match = options.match,\n        _options$at2 = options.at,\n        at = _options$at2 === void 0 ? editor.selection : _options$at2;\n    var _options$hanging2 = options.hanging,\n        hanging = _options$hanging2 === void 0 ? false : _options$hanging2,\n        _options$voids2 = options.voids,\n        voids = _options$voids2 === void 0 ? false : _options$voids2,\n        _options$mode = options.mode,\n        mode = _options$mode === void 0 ? 'lowest' : _options$mode;\n\n    if (!at) {\n      return;\n    }\n\n    if (match == null) {\n      if (slate__WEBPACK_IMPORTED_MODULE_2__[\"Path\"].isPath(at)) {\n        var _Editor$parent = slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].parent(editor, at),\n            _Editor$parent2 = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_Editor$parent, 1),\n            parent = _Editor$parent2[0];\n\n        match = function match(n) {\n          return parent.children.includes(n);\n        };\n      } else {\n        match = function match(n) {\n          return slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].isBlock(editor, n);\n        };\n      }\n    }\n\n    if (!hanging && slate__WEBPACK_IMPORTED_MODULE_2__[\"Range\"].isRange(at)) {\n      at = slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].unhangRange(editor, at);\n    }\n\n    if (slate__WEBPACK_IMPORTED_MODULE_2__[\"Range\"].isRange(at)) {\n      if (slate__WEBPACK_IMPORTED_MODULE_2__[\"Range\"].isCollapsed(at)) {\n        at = at.anchor;\n      } else {\n        var _Range$edges3 = slate__WEBPACK_IMPORTED_MODULE_2__[\"Range\"].edges(at),\n            _Range$edges4 = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_Range$edges3, 2),\n            end = _Range$edges4[1];\n\n        var pointRef = slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].pointRef(editor, end);\n        slate__WEBPACK_IMPORTED_MODULE_2__[\"Transforms\"][\"delete\"](editor, {\n          at: at\n        });\n        at = pointRef.unref();\n\n        if (options.at == null) {\n          slate__WEBPACK_IMPORTED_MODULE_2__[\"Transforms\"].select(editor, at);\n        }\n      }\n    }\n\n    var _Editor$nodes = slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].nodes(editor, {\n      at: at,\n      match: match,\n      voids: voids,\n      mode: mode\n    }),\n        _Editor$nodes2 = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_Editor$nodes, 1),\n        current = _Editor$nodes2[0];\n\n    var prev = slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].previous(editor, {\n      at: at,\n      match: match,\n      voids: voids,\n      mode: mode\n    });\n\n    if (!current || !prev) {\n      return;\n    }\n\n    var _current = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(current, 2),\n        node = _current[0],\n        path = _current[1];\n\n    var _prev = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(prev, 2),\n        prevNode = _prev[0],\n        prevPath = _prev[1];\n\n    if (path.length === 0 || prevPath.length === 0) {\n      return;\n    }\n\n    var newPath = slate__WEBPACK_IMPORTED_MODULE_2__[\"Path\"].next(prevPath);\n    var commonPath = slate__WEBPACK_IMPORTED_MODULE_2__[\"Path\"].common(path, prevPath);\n    var isPreviousSibling = slate__WEBPACK_IMPORTED_MODULE_2__[\"Path\"].isSibling(path, prevPath);\n    var levels = Array.from(slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].levels(editor, {\n      at: path\n    }), function (_ref7) {\n      var _ref8 = Object(_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(_ref7, 1),\n          n = _ref8[0];\n\n      return n;\n    }).slice(commonPath.length).slice(0, -1); // Determine if the merge will leave an ancestor of the path empty as a\n    // result, in which case we'll want to remove it after merging.\n\n    var emptyAncestor = slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].above(editor, {\n      at: path,\n      mode: 'highest',\n      match: function match(n) {\n        return levels.includes(n) && slate__WEBPACK_IMPORTED_MODULE_2__[\"Element\"].isElement(n) && n.children.length === 1;\n      }\n    });\n    var emptyRef = emptyAncestor && slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].pathRef(editor, emptyAncestor[1]);\n    var properties;\n    var position; // Ensure that the nodes are equivalent, and figure out what the position\n    // and extra properties of the merge will be.\n\n    if (slate__WEBPACK_IMPORTED_MODULE_2__[\"Text\"].isText(node) && slate__WEBPACK_IMPORTED_MODULE_2__[\"Text\"].isText(prevNode)) {\n      var text = node.text,\n          rest = Object(_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(node, [\"text\"]);\n\n      position = prevNode.text.length;\n      properties = rest;\n    } else if (slate__WEBPACK_IMPORTED_MODULE_2__[\"Element\"].isElement(node) && slate__WEBPACK_IMPORTED_MODULE_2__[\"Element\"].isElement(prevNode)) {\n      var children = node.children,\n          _rest = Object(_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(node, [\"children\"]);\n\n      position = prevNode.children.length;\n      properties = _rest;\n    } else {\n      throw new Error(\"Cannot merge the node at path [\".concat(path, \"] with the previous sibling because it is not the same kind: \").concat(JSON.stringify(node), \" \").concat(JSON.stringify(prevNode)));\n    } // If the node isn't already the next sibling of the previous node, move\n    // it so that it is before merging.\n\n\n    if (!isPreviousSibling) {\n      console.log(\"In merge, movNodes from \", at, \"to\", newPath);\n      slate__WEBPACK_IMPORTED_MODULE_2__[\"Transforms\"].moveNodes(editor, {\n        at: path,\n        to: newPath,\n        voids: voids\n      });\n    } // If there was going to be an empty ancestor of the node that was merged,\n    // we remove it from the tree.\n\n\n    if (emptyRef) {\n      console.log(\"In merge, remove node at:\", emptyRef.current);\n      slate__WEBPACK_IMPORTED_MODULE_2__[\"Transforms\"].removeNodes(editor, {\n        at: emptyRef.current,\n        voids: voids\n      });\n    } // If the target node that we're merging with is empty, remove it instead\n    // of merging the two. This is a common rich text editor behavior to\n    // prevent losing formatting when deleting entire nodes when you have a\n    // hanging selection.\n\n\n    if (slate__WEBPACK_IMPORTED_MODULE_2__[\"Element\"].isElement(prevNode) && slate__WEBPACK_IMPORTED_MODULE_2__[\"Editor\"].isEmpty(editor, prevNode) || slate__WEBPACK_IMPORTED_MODULE_2__[\"Text\"].isText(prevNode) && prevNode.text === '') {\n      console.log(\"In merge, remove2 node at:\", prevPath);\n      slate__WEBPACK_IMPORTED_MODULE_2__[\"Transforms\"].removeNodes(editor, {\n        at: prevPath,\n        voids: voids\n      });\n    } else {\n      editor.apply({\n        type: 'merge_node',\n        path: newPath,\n        position: position,\n        properties: properties\n      });\n    }\n\n    if (emptyRef) {\n      emptyRef.unref();\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../src/withMarkdown.ts\n");

/***/ })

})