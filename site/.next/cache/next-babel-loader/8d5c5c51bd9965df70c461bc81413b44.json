{"ast":null,"code":"import { Editor, Range, Transforms } from 'slate';\nexport var onKeyDown = function onKeyDown() {\n  return function (e, editor) {\n    var selection = editor.selection;\n\n    if (e.key === 'Tab' && selection) {\n      var block = Editor.above(editor, {\n        match: function match(n) {\n          return Editor.isBlock(editor, n);\n        }\n      });\n\n      if (!block) {\n        return;\n      }\n\n      e.preventDefault();\n\n      if (block[0].type == 'list-item') {\n        if (Range.isCollapsed(selection)) {\n          var path = block[1];\n          var start = Editor.start(editor, path);\n          var range = {\n            anchor: selection.anchor,\n            focus: start\n          };\n          var beforeText = Editor.string(editor, range);\n\n          if (beforeText.length) {\n            Editor.insertText(editor, '\\t');\n            return;\n          }\n        } // // move down with tab\n        // const tab = !e.shiftKey;\n        // if (tab) {\n\n\n        moveListItemDown(editor, block[1]); // }\n      } else {\n        var p = selection.anchor;\n\n        if (Range.isCollapsed(selection)) {\n          p = p.path;\n        }\n\n        Transforms.select(editor, p);\n        Editor.insertText(editor, '\\t');\n        Transforms.select(editor, selection);\n      }\n    }\n  };\n};\n\nfunction moveListItemDown(editor, path) {\n  var entry = Editor.parent(editor, path);\n  var node = entry[0];\n\n  if (node.type.endsWith('-list')) {\n    console.log(\"indent:\", node.indent);\n    node.indent++;\n    Transforms.splitNodes(editor, {\n      at: path\n    });\n  }\n}","map":{"version":3,"sources":["/Users/yonggu/WebstormProjects/gyedit/src/onKeyDown.ts"],"names":["Editor","Range","Transforms","onKeyDown","e","editor","selection","key","block","above","match","n","isBlock","preventDefault","type","isCollapsed","path","start","range","anchor","focus","beforeText","string","length","insertText","moveListItemDown","p","select","entry","parent","node","endsWith","console","log","indent","splitNodes","at"],"mappings":"AAAA,SAAQA,MAAR,EAAgBC,KAAhB,EAAuCC,UAAvC,QAAwD,OAAxD;AAGA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA,SAAM,UAC3BC,CAD2B,EAE3BC,MAF2B,EAG1B;AAAA,QACIC,SADJ,GACiBD,MADjB,CACIC,SADJ;;AAED,QAAIF,CAAC,CAACG,GAAF,KAAU,KAAV,IAAmBD,SAAvB,EAAkC;AAC9B,UAAME,KAAK,GAAGR,MAAM,CAACS,KAAP,CAAaJ,MAAb,EAAqB;AAC/BK,QAAAA,KAAK,EAAE,eAAAC,CAAC;AAAA,iBAAIX,MAAM,CAACY,OAAP,CAAeP,MAAf,EAAuBM,CAAvB,CAAJ;AAAA;AADuB,OAArB,CAAd;;AAGA,UAAI,CAACH,KAAL,EAAW;AACP;AACH;;AACDJ,MAAAA,CAAC,CAACS,cAAF;;AACA,UAAIL,KAAK,CAAC,CAAD,CAAL,CAASM,IAAT,IAAiB,WAArB,EAAkC;AAC9B,YAAIb,KAAK,CAACc,WAAN,CAAkBT,SAAlB,CAAJ,EAAkC;AAC9B,cAAMU,IAAI,GAAGR,KAAK,CAAC,CAAD,CAAlB;AACA,cAAMS,KAAK,GAAGjB,MAAM,CAACiB,KAAP,CAAaZ,MAAb,EAAqBW,IAArB,CAAd;AACA,cAAME,KAAK,GAAG;AAACC,YAAAA,MAAM,EAAEb,SAAS,CAACa,MAAnB;AAA2BC,YAAAA,KAAK,EAAEH;AAAlC,WAAd;AACA,cAAII,UAAU,GAAGrB,MAAM,CAACsB,MAAP,CAAcjB,MAAd,EAAsBa,KAAtB,CAAjB;;AACA,cAAIG,UAAU,CAACE,MAAf,EAAuB;AACnBvB,YAAAA,MAAM,CAACwB,UAAP,CAAkBnB,MAAlB,EAA0B,IAA1B;AACA;AACH;AACJ,SAV6B,CAW9B;AACA;AACA;;;AACAoB,QAAAA,gBAAgB,CAACpB,MAAD,EAASG,KAAK,CAAC,CAAD,CAAd,CAAhB,CAd8B,CAe9B;AACH,OAhBD,MAgBO;AACH,YAAIkB,CAAU,GAAGpB,SAAS,CAACa,MAA3B;;AACA,YAAIlB,KAAK,CAACc,WAAN,CAAkBT,SAAlB,CAAJ,EAAkC;AAC9BoB,UAAAA,CAAC,GAAGA,CAAC,CAACV,IAAN;AACH;;AACDd,QAAAA,UAAU,CAACyB,MAAX,CAAkBtB,MAAlB,EAAyBqB,CAAzB;AACA1B,QAAAA,MAAM,CAACwB,UAAP,CAAkBnB,MAAlB,EAA0B,IAA1B;AACAH,QAAAA,UAAU,CAACyB,MAAX,CAAkBtB,MAAlB,EAA0BC,SAA1B;AACH;AACJ;AACJ,GAvCwB;AAAA,CAAlB;;AAyCP,SAASmB,gBAAT,CAA0BpB,MAA1B,EAA0CW,IAA1C,EAAsD;AAClD,MAAIY,KAAK,GAAG5B,MAAM,CAAC6B,MAAP,CAAcxB,MAAd,EAAsBW,IAAtB,CAAZ;AACA,MAAIc,IAAc,GAAGF,KAAK,CAAC,CAAD,CAA1B;;AACA,MAAIE,IAAI,CAAChB,IAAL,CAAUiB,QAAV,CAAmB,OAAnB,CAAJ,EAAiC;AAC7BC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,IAAI,CAACI,MAA5B;AACAJ,IAAAA,IAAI,CAACI,MAAL;AACAhC,IAAAA,UAAU,CAACiC,UAAX,CAAsB9B,MAAtB,EAA8B;AAAC+B,MAAAA,EAAE,EAAEpB;AAAL,KAA9B;AACH;AACJ","sourcesContent":["import {Editor, Range, Path, Location, Transforms} from 'slate'\nimport {ListNode, ListItemNode} from './types'\n\nexport const onKeyDown = () => (\n    e: KeyboardEvent,\n    editor: Editor\n) => {\n    let {selection} = editor\n    if (e.key === 'Tab' && selection) {\n        const block = Editor.above(editor, {\n            match: n => Editor.isBlock(editor, n),\n        })\n        if (!block){\n            return\n        }\n        e.preventDefault()\n        if (block[0].type == 'list-item') {\n            if (Range.isCollapsed(selection)) {\n                const path = block[1]\n                const start = Editor.start(editor, path)\n                const range = {anchor: selection.anchor, focus: start}\n                let beforeText = Editor.string(editor, range)\n                if (beforeText.length) {\n                    Editor.insertText(editor, '\\t')\n                    return\n                }\n            }\n            // // move down with tab\n            // const tab = !e.shiftKey;\n            // if (tab) {\n            moveListItemDown(editor, block[1]);\n            // }\n        } else {\n            let p:Location = selection.anchor\n            if (Range.isCollapsed(selection)) {\n                p = p.path\n            }\n            Transforms.select(editor,p)\n            Editor.insertText(editor, '\\t')\n            Transforms.select(editor, selection)\n        }\n    }\n};\n\nfunction moveListItemDown(editor: Editor, path: Path) {\n    let entry = Editor.parent(editor, path)\n    let node: ListNode = entry[0] as ListNode\n    if (node.type.endsWith('-list')) {\n        console.log(\"indent:\", node.indent)\n        node.indent++\n        Transforms.splitNodes(editor, {at: path})\n    }\n}"]},"metadata":{},"sourceType":"module"}