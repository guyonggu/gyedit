{"ast":null,"code":"import { Editor, Range, Transforms } from 'slate';\nexport var onKeyDown = function onKeyDown() {\n  return function (e, editor) {\n    var selection = editor.selection;\n\n    if (e.key === 'Tab' && selection) {\n      e.preventDefault();\n      var block = Editor.above(editor, {\n        match: function match(n) {\n          return Editor.isBlock(editor, n);\n        }\n      });\n\n      if (block[0].type == 'list-item') {\n        if (Range.isCollapsed(selection)) {\n          var path = block[1];\n          var start = Editor.start(editor, path);\n          var range = {\n            anchor: anchor,\n            focus: start\n          };\n          var beforeText = Editor.string(editor, range);\n\n          if (beforeText.length) {\n            return;\n          }\n        } // move down with tab\n\n\n        var tab = !e.shiftKey;\n\n        if (tab) {\n          moveListItemDown(editor, block[1]);\n        }\n      } else if (block[0].type == 'paragraph') {}\n    }\n  };\n};\n\nfunction moveListItemDown(editor, path) {\n  var entry = Editor.parent(editor, path);\n  var node = entry[0];\n\n  if (node.type.endsWith('-list')) {\n    console.log(\"indent:\", node.indent);\n    node.indent++;\n    Transforms.splitNodes(editor, {\n      at: path\n    });\n  }\n}","map":{"version":3,"sources":["/Users/yonggu/WebstormProjects/gyedit/src/onKeyDown.ts"],"names":["Editor","Range","Transforms","onKeyDown","e","editor","selection","key","preventDefault","block","above","match","n","isBlock","type","isCollapsed","path","start","range","anchor","focus","beforeText","string","length","tab","shiftKey","moveListItemDown","entry","parent","node","endsWith","console","log","indent","splitNodes","at"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,KAAjB,EAAyCC,UAAzC,QAA2D,OAA3D;AAGA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA,SAAM,UAC3BC,CAD2B,EAE3BC,MAF2B,EAG1B;AAAA,QACIC,SADJ,GACiBD,MADjB,CACIC,SADJ;;AAED,QAAIF,CAAC,CAACG,GAAF,KAAU,KAAV,IAAmBD,SAAvB,EAAkC;AAC9BF,MAAAA,CAAC,CAACI,cAAF;AACA,UAAMC,KAAK,GAAGT,MAAM,CAACU,KAAP,CAAaL,MAAb,EAAqB;AAC/BM,QAAAA,KAAK,EAAE,eAAAC,CAAC;AAAA,iBAAIZ,MAAM,CAACa,OAAP,CAAeR,MAAf,EAAuBO,CAAvB,CAAJ;AAAA;AADuB,OAArB,CAAd;;AAGA,UAAIH,KAAK,CAAC,CAAD,CAAL,CAASK,IAAT,IAAiB,WAArB,EAAkC;AAC9B,YAAIb,KAAK,CAACc,WAAN,CAAkBT,SAAlB,CAAJ,EAAkC;AAC9B,cAAMU,IAAI,GAAGP,KAAK,CAAC,CAAD,CAAlB;AACA,cAAMQ,KAAK,GAAGjB,MAAM,CAACiB,KAAP,CAAaZ,MAAb,EAAqBW,IAArB,CAAd;AACA,cAAME,KAAK,GAAG;AAACC,YAAAA,MAAM,EAANA,MAAD;AAASC,YAAAA,KAAK,EAAEH;AAAhB,WAAd;AACA,cAAII,UAAU,GAAGrB,MAAM,CAACsB,MAAP,CAAcjB,MAAd,EAAsBa,KAAtB,CAAjB;;AACA,cAAIG,UAAU,CAACE,MAAf,EAAsB;AAClB;AACH;AACJ,SAT6B,CAU9B;;;AACA,YAAMC,GAAG,GAAG,CAACpB,CAAC,CAACqB,QAAf;;AACA,YAAID,GAAJ,EAAS;AACLE,UAAAA,gBAAgB,CAACrB,MAAD,EAASI,KAAK,CAAC,CAAD,CAAd,CAAhB;AACH;AACJ,OAfD,MAeM,IAAGA,KAAK,CAAC,CAAD,CAAL,CAASK,IAAT,IAAiB,WAApB,EAAgC,CAErC;AACJ;AACJ,GA7BwB;AAAA,CAAlB;;AA+BP,SAASY,gBAAT,CAA0BrB,MAA1B,EAAyCW,IAAzC,EAAoD;AAChD,MAAMW,KAAK,GAAG3B,MAAM,CAAC4B,MAAP,CAAcvB,MAAd,EAAsBW,IAAtB,CAAd;AACA,MAAIa,IAAc,GAAGF,KAAK,CAAC,CAAD,CAA1B;;AACA,MAAIE,IAAI,CAACf,IAAL,CAAUgB,QAAV,CAAoB,OAApB,CAAJ,EAAkC;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBH,IAAI,CAACI,MAA3B;AACAJ,IAAAA,IAAI,CAACI,MAAL;AACA/B,IAAAA,UAAU,CAACgC,UAAX,CAAsB7B,MAAtB,EAA8B;AAAC8B,MAAAA,EAAE,EAAEnB;AAAL,KAA9B;AACH;AACJ","sourcesContent":["import { Editor, Range, Path, NodeEntry, Transforms } from 'slate'\nimport {ListNode, ListItemNode} from './types'\n\nexport const onKeyDown = () => (\n    e: KeyboardEvent,\n    editor: Editor\n) => {\n    let {selection} = editor\n    if (e.key === 'Tab' && selection) {\n        e.preventDefault()\n        const block = Editor.above(editor, {\n            match: n => Editor.isBlock(editor, n),\n        })!\n        if (block[0].type == 'list-item') {\n            if (Range.isCollapsed(selection)) {\n                const path = block[1]\n                const start = Editor.start(editor, path)\n                const range = {anchor, focus: start}\n                let beforeText = Editor.string(editor, range)\n                if (beforeText.length){\n                    return\n                }\n            }\n            // move down with tab\n            const tab = !e.shiftKey;\n            if (tab) {\n                moveListItemDown(editor, block[1]);\n            }\n        }else if(block[0].type == 'paragraph'){\n\n        }\n    }\n};\n\nfunction moveListItemDown(editor:Editor, path: Path){\n    const entry = Editor.parent(editor, path)\n    let node: ListNode = entry[0] as ListNode\n    if (node.type.endsWith( '-list')) {\n        console.log(\"indent:\",node.indent)\n        node.indent ++\n        Transforms.splitNodes(editor, {at: path})\n    }\n}"]},"metadata":{},"sourceType":"module"}