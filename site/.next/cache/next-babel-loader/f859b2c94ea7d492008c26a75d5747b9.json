{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nexport const Element = ({\n  attributes,\n  children,\n  element\n}) => {\n  switch (element.type) {\n    case 'block-quote':\n      return __jsx(\"blockquote\", attributes, children);\n\n    case 'bulleted-list':\n      attributes['data-indent'] = element.indent;\n      return __jsx(\"ul\", _extends({\n        style: {\n          paddingLeft: `calc(1em * ${element.indent})`\n        }\n      }, attributes), children);\n\n    case 'heading-one':\n      return __jsx(\"h1\", attributes, children);\n\n    case 'heading-two':\n      return __jsx(\"h2\", attributes, children);\n\n    case 'list-item':\n      return __jsx(\"li\", attributes, children);\n\n    case 'numbered-list':\n      attributes['data-indent'] = element.indent;\n      attributes.start = element.start;\n      return __jsx(\"ol\", _extends({\n        style: {\n          paddingLeft: `calc(1em * ${element.indent})`\n        }\n      }, attributes), children);\n\n    default:\n      return __jsx(\"p\", _extends({\n        style: {\n          paddingLeft: `calc(1em * ${element.indent})`\n        }\n      }, attributes), children);\n  }\n};\nexport const Leaf = ({\n  attributes,\n  children,\n  leaf\n}) => {\n  if (leaf.bold) {\n    children = __jsx(\"strong\", null, children);\n  }\n\n  if (leaf.code) {\n    children = __jsx(\"code\", null, children);\n  }\n\n  if (leaf.italic) {\n    children = __jsx(\"em\", null, children);\n  }\n\n  if (leaf.underline) {\n    children = __jsx(\"u\", null, children);\n  }\n\n  return __jsx(\"span\", attributes, children);\n};","map":null,"metadata":{},"sourceType":"module"}