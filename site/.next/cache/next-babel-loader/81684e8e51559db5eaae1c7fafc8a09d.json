{"ast":null,"code":"var _jsxFileName = \"/Users/yonggu/WebstormProjects/gyedit/src/renderer.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nexport const Element = ({\n  attributes,\n  children,\n  element\n}) => {\n  switch (element.type) {\n    case 'block-quote':\n      return __jsx(\"blockquote\", _extends({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 7,\n          columnNumber: 20\n        }\n      }), children);\n\n    case 'bulleted-list':\n      attributes['data-indent'] = element.indent;\n      return __jsx(\"ul\", _extends({\n        style: {\n          paddingLeft: `calc(1em * ${element.indent})`\n        }\n      }, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 20\n        }\n      }), children);\n\n    case 'heading-one':\n      return __jsx(\"h1\", _extends({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 20\n        }\n      }), children);\n\n    case 'heading-two':\n      return __jsx(\"h2\", _extends({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 20\n        }\n      }), children);\n\n    case 'list-item':\n      return __jsx(\"li\", _extends({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 20\n        }\n      }), children);\n\n    case 'numbered-list':\n      attributes['data-indent'] = element.indent;\n      return __jsx(\"ol\", _extends({\n        style: {\n          paddingLeft: `calc(1em * ${element.indent})`\n        }\n      }, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 20\n        }\n      }), children);\n\n    default:\n      return __jsx(\"p\", _extends({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 20\n        }\n      }), children);\n  }\n};\nexport const Leaf = ({\n  attributes,\n  children,\n  leaf\n}) => {\n  if (leaf.bold) {\n    children = __jsx(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 20\n      }\n    }, children);\n  }\n\n  if (leaf.code) {\n    children = __jsx(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 20\n      }\n    }, children);\n  }\n\n  if (leaf.italic) {\n    children = __jsx(\"em\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 20\n      }\n    }, children);\n  }\n\n  if (leaf.underline) {\n    children = __jsx(\"u\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 20\n      }\n    }, children);\n  }\n\n  return __jsx(\"span\", _extends({}, attributes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 12\n    }\n  }), children);\n};","map":{"version":3,"sources":["/Users/yonggu/WebstormProjects/gyedit/src/renderer.tsx"],"names":["React","Element","attributes","children","element","type","indent","paddingLeft","Leaf","leaf","bold","code","italic","underline"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAoD,OAApD;AAGA,OAAO,MAAMC,OAAO,GAAG,CAAC;AAACC,EAAAA,UAAD;AAAaC,EAAAA,QAAb;AAAuBC,EAAAA;AAAvB,CAAD,KAA0C;AAC7D,UAAQA,OAAO,CAACC,IAAhB;AACI,SAAK,aAAL;AACI,aAAO,iCAAgBH,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAA6BC,QAA7B,CAAP;;AACJ,SAAK,eAAL;AACID,MAAAA,UAAU,CAAC,aAAD,CAAV,GAA6BE,OAAD,CAAsBE,MAAlD;AACA,aAAO;AAAI,QAAA,KAAK,EAAE;AAACC,UAAAA,WAAW,EAAG,cAAaH,OAAO,CAACE,MAAO;AAA3C;AAAX,SAA+DJ,UAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAA4EC,QAA5E,CAAP;;AACJ,SAAK,aAAL;AACI,aAAO,yBAAQD,UAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAqBC,QAArB,CAAP;;AACJ,SAAK,aAAL;AACI,aAAO,yBAAQD,UAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAqBC,QAArB,CAAP;;AACJ,SAAK,WAAL;AACI,aAAO,yBAAQD,UAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAqBC,QAArB,CAAP;;AACJ,SAAK,eAAL;AACID,MAAAA,UAAU,CAAC,aAAD,CAAV,GAA6BE,OAAD,CAAsBE,MAAlD;AACA,aAAO;AAAI,QAAA,KAAK,EAAE;AAACC,UAAAA,WAAW,EAAG,cAAaH,OAAO,CAACE,MAAO;AAA3C;AAAX,SAA+DJ,UAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAA4EC,QAA5E,CAAP;;AACJ;AACI,aAAO,wBAAOD,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAoBC,QAApB,CAAP;AAhBR;AAkBH,CAnBM;AAqBP,OAAO,MAAMK,IAAI,GAAG,CAAC;AAACN,EAAAA,UAAD;AAAaC,EAAAA,QAAb;AAAuBM,EAAAA;AAAvB,CAAD,KAAuC;AACvD,MAAIA,IAAI,CAACC,IAAT,EAAe;AACXP,IAAAA,QAAQ,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAASA,QAAT,CAAX;AACH;;AAED,MAAIM,IAAI,CAACE,IAAT,EAAe;AACXR,IAAAA,QAAQ,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOA,QAAP,CAAX;AACH;;AAED,MAAIM,IAAI,CAACG,MAAT,EAAiB;AACbT,IAAAA,QAAQ,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKA,QAAL,CAAX;AACH;;AAED,MAAIM,IAAI,CAACI,SAAT,EAAoB;AAChBV,IAAAA,QAAQ,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIA,QAAJ,CAAX;AACH;;AAED,SAAO,2BAAUD,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAuBC,QAAvB,CAAP;AACH,CAlBM","sourcesContent":["import React, {useCallback, useMemo, useState} from 'react'\nimport {BlockElement} from './types'\n\nexport const Element = ({attributes, children, element}: any) => {\n    switch (element.type) {\n        case 'block-quote':\n            return <blockquote {...attributes}>{children}</blockquote>\n        case 'bulleted-list':\n            attributes['data-indent'] = (element as ListNode).indent\n            return <ul style={{paddingLeft: `calc(1em * ${element.indent})`}} {...attributes}>{children}</ul>\n        case 'heading-one':\n            return <h1 {...attributes}>{children}</h1>\n        case 'heading-two':\n            return <h2 {...attributes}>{children}</h2>\n        case 'list-item':\n            return <li {...attributes}>{children}</li>\n        case 'numbered-list':\n            attributes['data-indent'] = (element as ListNode).indent\n            return <ol style={{paddingLeft: `calc(1em * ${element.indent})`}} {...attributes}>{children}</ol>\n        default:\n            return <p {...attributes}>{children}</p>\n    }\n}\n\nexport const Leaf = ({attributes, children, leaf}: any) => {\n    if (leaf.bold) {\n        children = <strong>{children}</strong>\n    }\n\n    if (leaf.code) {\n        children = <code>{children}</code>\n    }\n\n    if (leaf.italic) {\n        children = <em>{children}</em>\n    }\n\n    if (leaf.underline) {\n        children = <u>{children}</u>\n    }\n\n    return <span {...attributes}>{children}</span>\n}\n\n"]},"metadata":{},"sourceType":"module"}