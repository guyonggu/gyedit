{"ast":null,"code":"var _jsxFileName = \"/Users/yonggu/WebstormProjects/slate/site/examples/code-highlighting.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport Prism from 'prismjs';\nimport 'prismjs/components/prism-python';\nimport 'prismjs/components/prism-php';\nimport 'prismjs/components/prism-sql';\nimport 'prismjs/components/prism-java';\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { Slate, Editable, withReact } from 'slate-react';\nimport { Text, createEditor } from 'slate';\nimport { withHistory } from 'slate-history';\nimport { css } from 'emotion';\n\nconst CodeHighlightingExample = () => {\n  const {\n    0: value,\n    1: setValue\n  } = useState(initialValue);\n  const {\n    0: language,\n    1: setLanguage\n  } = useState('html');\n  const renderLeaf = useCallback(props => __jsx(Leaf, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 43\n    }\n  })), []);\n  const editor = useMemo(() => withHistory(withReact(createEditor())), []); // decorate function depends on the language selected\n\n  const decorate = useCallback(([node, path]) => {\n    const ranges = [];\n\n    if (!Text.isText(node)) {\n      return ranges;\n    }\n\n    const tokens = Prism.tokenize(node.text, Prism.languages[language]);\n    let start = 0;\n\n    for (const token of tokens) {\n      const length = getLength(token);\n      const end = start + length;\n\n      if (typeof token !== 'string') {\n        ranges.push({\n          [token.type]: true,\n          anchor: {\n            path,\n            offset: start\n          },\n          focus: {\n            path,\n            offset: end\n          }\n        });\n      }\n\n      start = end;\n    }\n\n    return ranges;\n  }, [language]);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: value => setValue(value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    contentEditable: false,\n    style: {\n      position: 'relative',\n      top: '5px',\n      right: '5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, __jsx(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, \"Select a language\", __jsx(\"select\", {\n    value: language,\n    style: {\n      float: 'right'\n    },\n    onChange: e => setLanguage(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }, __jsx(\"option\", {\n    value: \"js\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, \"JavaScript\"), __jsx(\"option\", {\n    value: \"css\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, \"CSS\"), __jsx(\"option\", {\n    value: \"html\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, \"HTML\"), __jsx(\"option\", {\n    value: \"python\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, \"Python\"), __jsx(\"option\", {\n    value: \"sql\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, \"SQL\"), __jsx(\"option\", {\n    value: \"java\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, \"Java\"), __jsx(\"option\", {\n    value: \"php\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, \"PHP\")))), __jsx(Editable, {\n    decorate: decorate,\n    renderLeaf: renderLeaf,\n    placeholder: \"Write some code...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst getLength = token => {\n  if (typeof token === 'string') {\n    return token.length;\n  } else if (typeof token.content === 'string') {\n    return token.content.length;\n  } else {\n    return token.content.reduce((l, t) => l + getLength(t), 0);\n  }\n}; // different token types, styles found on Prismjs website\n\n\nconst Leaf = ({\n  attributes,\n  children,\n  leaf\n}) => {\n  return __jsx(\"span\", _extends({}, attributes, {\n    className: css`\n            font-family: monospace;\n            background: hsla(0, 0%, 100%, .5);\n\n        ${leaf.comment && css`\n            color: slategray;\n          `} \n\n        ${(leaf.operator || leaf.url) && css`\n            color: #9a6e3a;\n          `}\n        ${leaf.keyword && css`\n            color: #07a;\n          `}\n        ${(leaf.variable || leaf.regex) && css`\n            color: #e90;\n          `}\n        ${(leaf.number || leaf.boolean || leaf.tag || leaf.constant || leaf.symbol || leaf.attr - name || leaf.selector) && css`\n            color: #905;\n          `}\n        ${leaf.punctuation && css`\n            color: #999;\n          `}\n        ${(leaf.string || leaf.char) && css`\n            color: #690;\n          `}\n        ${(leaf.function || leaf.class - name) && css`\n            color: #dd4a68;\n          `}\n        `,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }), children);\n};\n\nconst initialValue = [{\n  children: [{\n    text: '<h1>Hi!</h1>'\n  }]\n}]; // modifications and additions to prism library\n\nPrism.languages.python = Prism.languages.extend('python', {});\nPrism.languages.insertBefore('python', 'prolog', {\n  comment: {\n    pattern: /##[^\\n]*/,\n    alias: 'comment'\n  }\n});\nPrism.languages.javascript = Prism.languages.extend('javascript', {});\nPrism.languages.insertBefore('javascript', 'prolog', {\n  comment: {\n    pattern: /\\/\\/[^\\n]*/,\n    alias: 'comment'\n  }\n});\nPrism.languages.html = Prism.languages.extend('html', {});\nPrism.languages.insertBefore('html', 'prolog', {\n  comment: {\n    pattern: /<!--[^\\n]*-->/,\n    alias: 'comment'\n  }\n});\nPrism.languages.markdown = Prism.languages.extend('markup', {});\nPrism.languages.insertBefore('markdown', 'prolog', {\n  blockquote: {\n    pattern: /^>(?:[\\t ]*>)*/m,\n    alias: 'punctuation'\n  },\n  code: [{\n    pattern: /^(?: {4}|\\t).+/m,\n    alias: 'keyword'\n  }, {\n    pattern: /``.+?``|`[^`\\n]+`/,\n    alias: 'keyword'\n  }],\n  title: [{\n    pattern: /\\w+.*(?:\\r?\\n|\\r)(?:==+|--+)/,\n    alias: 'important',\n    inside: {\n      punctuation: /==+$|--+$/\n    }\n  }, {\n    pattern: /(^\\s*)#+.+/m,\n    lookbehind: !0,\n    alias: 'important',\n    inside: {\n      punctuation: /^#+|#+$/\n    }\n  }],\n  hr: {\n    pattern: /(^\\s*)([*-])([\\t ]*\\2){2,}(?=\\s*$)/m,\n    lookbehind: !0,\n    alias: 'punctuation'\n  },\n  list: {\n    pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n    lookbehind: !0,\n    alias: 'punctuation'\n  },\n  'url-reference': {\n    pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n    inside: {\n      variable: {\n        pattern: /^(!?\\[)[^\\]]+/,\n        lookbehind: !0\n      },\n      string: /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n      punctuation: /^[\\[\\]!:]|[<>]/\n    },\n    alias: 'url'\n  },\n  bold: {\n    pattern: /(^|[^\\\\])(\\*\\*|__)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind: !0,\n    inside: {\n      punctuation: /^\\*\\*|^__|\\*\\*$|__$/\n    }\n  },\n  italic: {\n    pattern: /(^|[^\\\\])([*_])(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind: !0,\n    inside: {\n      punctuation: /^[*_]|[*_]$/\n    }\n  },\n  url: {\n    pattern: /!?\\[[^\\]]+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[[^\\]\\n]*\\])/,\n    inside: {\n      variable: {\n        pattern: /(!?\\[)[^\\]]+(?=\\]$)/,\n        lookbehind: !0\n      },\n      string: {\n        pattern: /\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/\n      }\n    }\n  }\n});\nPrism.languages.markdown.bold.inside.url = Prism.util.clone(Prism.languages.markdown.url);\nPrism.languages.markdown.italic.inside.url = Prism.util.clone(Prism.languages.markdown.url);\nPrism.languages.markdown.bold.inside.italic = Prism.util.clone(Prism.languages.markdown.italic);\nPrism.languages.markdown.italic.inside.bold = Prism.util.clone(Prism.languages.markdown.bold); // prettier-ignore\n\nexport default CodeHighlightingExample;","map":{"version":3,"sources":["/Users/yonggu/WebstormProjects/slate/site/examples/code-highlighting.tsx"],"names":["Prism","React","useState","useCallback","useMemo","Slate","Editable","withReact","Text","createEditor","withHistory","css","CodeHighlightingExample","value","setValue","initialValue","language","setLanguage","renderLeaf","props","editor","decorate","node","path","ranges","isText","tokens","tokenize","text","languages","start","token","length","getLength","end","push","type","anchor","offset","focus","position","top","right","float","e","target","content","reduce","l","t","Leaf","attributes","children","leaf","comment","operator","url","keyword","variable","regex","number","boolean","tag","constant","symbol","attr","name","selector","punctuation","string","char","function","class","python","extend","insertBefore","pattern","alias","javascript","html","markdown","blockquote","code","title","inside","lookbehind","hr","list","bold","italic","util","clone"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,SAAlB;AACA,OAAO,iCAAP;AACA,OAAO,8BAAP;AACA,OAAO,8BAAP;AACA,OAAO,+BAAP;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,KAAT,EAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,aAA3C;AACA,SAASC,IAAT,EAAeC,YAAf,QAAyC,OAAzC;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,GAAT,QAAoB,SAApB;;AAEA,MAAMC,uBAAuB,GAAG,MAAM;AACpC,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBZ,QAAQ,CAASa,YAAT,CAAlC;AACA,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0Bf,QAAQ,CAAC,MAAD,CAAxC;AACA,QAAMgB,UAAU,GAAGf,WAAW,CAACgB,KAAK,IAAI,MAAC,IAAD,eAAUA,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAV,EAA+B,EAA/B,CAA9B;AACA,QAAMC,MAAM,GAAGhB,OAAO,CAAC,MAAMM,WAAW,CAACH,SAAS,CAACE,YAAY,EAAb,CAAV,CAAlB,EAA+C,EAA/C,CAAtB,CAJoC,CAMpC;;AACA,QAAMY,QAAQ,GAAGlB,WAAW,CAC1B,CAAC,CAACmB,IAAD,EAAOC,IAAP,CAAD,KAAkB;AAChB,UAAMC,MAAM,GAAG,EAAf;;AACA,QAAI,CAAChB,IAAI,CAACiB,MAAL,CAAYH,IAAZ,CAAL,EAAwB;AACtB,aAAOE,MAAP;AACD;;AACD,UAAME,MAAM,GAAG1B,KAAK,CAAC2B,QAAN,CAAeL,IAAI,CAACM,IAApB,EAA0B5B,KAAK,CAAC6B,SAAN,CAAgBb,QAAhB,CAA1B,CAAf;AACA,QAAIc,KAAK,GAAG,CAAZ;;AAEA,SAAK,MAAMC,KAAX,IAAoBL,MAApB,EAA4B;AAC1B,YAAMM,MAAM,GAAGC,SAAS,CAACF,KAAD,CAAxB;AACA,YAAMG,GAAG,GAAGJ,KAAK,GAAGE,MAApB;;AAEA,UAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AAC7BP,QAAAA,MAAM,CAACW,IAAP,CAAY;AACV,WAACJ,KAAK,CAACK,IAAP,GAAc,IADJ;AAEVC,UAAAA,MAAM,EAAE;AAAEd,YAAAA,IAAF;AAAQe,YAAAA,MAAM,EAAER;AAAhB,WAFE;AAGVS,UAAAA,KAAK,EAAE;AAAEhB,YAAAA,IAAF;AAAQe,YAAAA,MAAM,EAAEJ;AAAhB;AAHG,SAAZ;AAKD;;AAEDJ,MAAAA,KAAK,GAAGI,GAAR;AACD;;AAED,WAAOV,MAAP;AACD,GAzByB,EA0B1B,CAACR,QAAD,CA1B0B,CAA5B;AA6BA,SACE,MAAC,KAAD;AAAO,IAAA,MAAM,EAAEI,MAAf;AAAuB,IAAA,KAAK,EAAEP,KAA9B;AAAqC,IAAA,QAAQ,EAAEA,KAAK,IAAIC,QAAQ,CAACD,KAAD,CAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,eAAe,EAAE,KADnB;AAEE,IAAA,KAAK,EAAE;AAAE2B,MAAAA,QAAQ,EAAE,UAAZ;AAAwBC,MAAAA,GAAG,EAAE,KAA7B;AAAoCC,MAAAA,KAAK,EAAE;AAA3C,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAEE;AACE,IAAA,KAAK,EAAE1B,QADT;AAEE,IAAA,KAAK,EAAE;AAAE2B,MAAAA,KAAK,EAAE;AAAT,KAFT;AAGE,IAAA,QAAQ,EAAEC,CAAC,IAAI3B,WAAW,CAAC2B,CAAC,CAACC,MAAF,CAAShC,KAAV,CAH5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE;AAAQ,IAAA,KAAK,EAAC,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALF,EAME;AAAQ,IAAA,KAAK,EAAC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WANF,EAOE;AAAQ,IAAA,KAAK,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF,EAQE;AAAQ,IAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARF,EASE;AAAQ,IAAA,KAAK,EAAC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WATF,EAUE;AAAQ,IAAA,KAAK,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVF,EAWE;AAAQ,IAAA,KAAK,EAAC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAXF,CAFF,CAJF,CADF,EAsBE,MAAC,QAAD;AACE,IAAA,QAAQ,EAAEQ,QADZ;AAEE,IAAA,UAAU,EAAEH,UAFd;AAGE,IAAA,WAAW,EAAC,oBAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAtBF,CADF;AA8BD,CAlED;;AAoEA,MAAMe,SAAS,GAAGF,KAAK,IAAI;AACzB,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAOA,KAAK,CAACC,MAAb;AACD,GAFD,MAEO,IAAI,OAAOD,KAAK,CAACe,OAAb,KAAyB,QAA7B,EAAuC;AAC5C,WAAOf,KAAK,CAACe,OAAN,CAAcd,MAArB;AACD,GAFM,MAEA;AACL,WAAOD,KAAK,CAACe,OAAN,CAAcC,MAAd,CAAqB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGf,SAAS,CAACgB,CAAD,CAA5C,EAAiD,CAAjD,CAAP;AACD;AACF,CARD,C,CAUA;;;AACA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,QAAd;AAAwBC,EAAAA;AAAxB,CAAD,KAAoC;AAC/C,SACE,2BACMF,UADN;AAEE,IAAA,SAAS,EAAExC,GAAI;;;;UAIX0C,IAAI,CAACC,OAAL,IACA3C,GAAI;;WAEF;;UAEF,CAAC0C,IAAI,CAACE,QAAL,IAAiBF,IAAI,CAACG,GAAvB,KACA7C,GAAI;;WAEF;UACF0C,IAAI,CAACI,OAAL,IACA9C,GAAI;;WAEF;UACF,CAAC0C,IAAI,CAACK,QAAL,IAAiBL,IAAI,CAACM,KAAvB,KACAhD,GAAI;;WAEF;UACF,CAAC0C,IAAI,CAACO,MAAL,IACDP,IAAI,CAACQ,OADJ,IAEDR,IAAI,CAACS,GAFJ,IAGDT,IAAI,CAACU,QAHJ,IAIDV,IAAI,CAACW,MAJJ,IAKDX,IAAI,CAACY,IAAL,GAAYC,IALX,IAMDb,IAAI,CAACc,QANL,KAOAxD,GAAI;;WAEF;UACF0C,IAAI,CAACe,WAAL,IACAzD,GAAI;;WAEF;UACF,CAAC0C,IAAI,CAACgB,MAAL,IAAehB,IAAI,CAACiB,IAArB,KACA3D,GAAI;;WAEF;UACF,CAAC0C,IAAI,CAACkB,QAAL,IAAiBlB,IAAI,CAACmB,KAAL,GAAaN,IAA/B,KACAvD,GAAI;;WAEF;SA5CR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA+CGyC,QA/CH,CADF;AAmDD,CApDD;;AAsDA,MAAMrC,YAAY,GAAG,CACnB;AACEqC,EAAAA,QAAQ,EAAE,CACR;AACExB,IAAAA,IAAI,EAAE;AADR,GADQ;AADZ,CADmB,CAArB,C,CAUA;;AAEA5B,KAAK,CAAC6B,SAAN,CAAgB4C,MAAhB,GAAyBzE,KAAK,CAAC6B,SAAN,CAAgB6C,MAAhB,CAAuB,QAAvB,EAAiC,EAAjC,CAAzB;AACA1E,KAAK,CAAC6B,SAAN,CAAgB8C,YAAhB,CAA6B,QAA7B,EAAuC,QAAvC,EAAiD;AAC/CrB,EAAAA,OAAO,EAAE;AAAEsB,IAAAA,OAAO,EAAE,UAAX;AAAuBC,IAAAA,KAAK,EAAE;AAA9B;AADsC,CAAjD;AAGA7E,KAAK,CAAC6B,SAAN,CAAgBiD,UAAhB,GAA6B9E,KAAK,CAAC6B,SAAN,CAAgB6C,MAAhB,CAAuB,YAAvB,EAAqC,EAArC,CAA7B;AACA1E,KAAK,CAAC6B,SAAN,CAAgB8C,YAAhB,CAA6B,YAA7B,EAA2C,QAA3C,EAAqD;AACnDrB,EAAAA,OAAO,EAAE;AAAEsB,IAAAA,OAAO,EAAE,YAAX;AAAyBC,IAAAA,KAAK,EAAE;AAAhC;AAD0C,CAArD;AAGA7E,KAAK,CAAC6B,SAAN,CAAgBkD,IAAhB,GAAuB/E,KAAK,CAAC6B,SAAN,CAAgB6C,MAAhB,CAAuB,MAAvB,EAA+B,EAA/B,CAAvB;AACA1E,KAAK,CAAC6B,SAAN,CAAgB8C,YAAhB,CAA6B,MAA7B,EAAqC,QAArC,EAA+C;AAC7CrB,EAAAA,OAAO,EAAE;AAAEsB,IAAAA,OAAO,EAAE,eAAX;AAA4BC,IAAAA,KAAK,EAAE;AAAnC;AADoC,CAA/C;AAGA7E,KAAK,CAAC6B,SAAN,CAAgBmD,QAAhB,GAA2BhF,KAAK,CAAC6B,SAAN,CAAgB6C,MAAhB,CAAuB,QAAvB,EAAiC,EAAjC,CAA3B;AACA1E,KAAK,CAAC6B,SAAN,CAAgB8C,YAAhB,CAA6B,UAA7B,EAAyC,QAAzC,EAAmD;AACjDM,EAAAA,UAAU,EAAE;AAAEL,IAAAA,OAAO,EAAE,iBAAX;AAA8BC,IAAAA,KAAK,EAAE;AAArC,GADqC;AAEjDK,EAAAA,IAAI,EAAE,CACJ;AAAEN,IAAAA,OAAO,EAAE,iBAAX;AAA8BC,IAAAA,KAAK,EAAE;AAArC,GADI,EAEJ;AAAED,IAAAA,OAAO,EAAE,mBAAX;AAAgCC,IAAAA,KAAK,EAAE;AAAvC,GAFI,CAF2C;AAMjDM,EAAAA,KAAK,EAAE,CACL;AACEP,IAAAA,OAAO,EAAE,8BADX;AAEEC,IAAAA,KAAK,EAAE,WAFT;AAGEO,IAAAA,MAAM,EAAE;AAAEhB,MAAAA,WAAW,EAAE;AAAf;AAHV,GADK,EAML;AACEQ,IAAAA,OAAO,EAAE,aADX;AAEES,IAAAA,UAAU,EAAE,CAAC,CAFf;AAGER,IAAAA,KAAK,EAAE,WAHT;AAIEO,IAAAA,MAAM,EAAE;AAAEhB,MAAAA,WAAW,EAAE;AAAf;AAJV,GANK,CAN0C;AAmBjDkB,EAAAA,EAAE,EAAE;AACFV,IAAAA,OAAO,EAAE,qCADP;AAEFS,IAAAA,UAAU,EAAE,CAAC,CAFX;AAGFR,IAAAA,KAAK,EAAE;AAHL,GAnB6C;AAwBjDU,EAAAA,IAAI,EAAE;AACJX,IAAAA,OAAO,EAAE,kCADL;AAEJS,IAAAA,UAAU,EAAE,CAAC,CAFT;AAGJR,IAAAA,KAAK,EAAE;AAHH,GAxB2C;AA6BjD,mBAAiB;AACfD,IAAAA,OAAO,EAAE,oHADM;AAEfQ,IAAAA,MAAM,EAAE;AACN1B,MAAAA,QAAQ,EAAE;AAAEkB,QAAAA,OAAO,EAAE,eAAX;AAA4BS,QAAAA,UAAU,EAAE,CAAC;AAAzC,OADJ;AAENhB,MAAAA,MAAM,EAAE,8DAFF;AAGND,MAAAA,WAAW,EAAE;AAHP,KAFO;AAOfS,IAAAA,KAAK,EAAE;AAPQ,GA7BgC;AAsCjDW,EAAAA,IAAI,EAAE;AACJZ,IAAAA,OAAO,EAAE,sDADL;AAEJS,IAAAA,UAAU,EAAE,CAAC,CAFT;AAGJD,IAAAA,MAAM,EAAE;AAAEhB,MAAAA,WAAW,EAAE;AAAf;AAHJ,GAtC2C;AA2CjDqB,EAAAA,MAAM,EAAE;AACNb,IAAAA,OAAO,EAAE,mDADH;AAENS,IAAAA,UAAU,EAAE,CAAC,CAFP;AAGND,IAAAA,MAAM,EAAE;AAAEhB,MAAAA,WAAW,EAAE;AAAf;AAHF,GA3CyC;AAgDjDZ,EAAAA,GAAG,EAAE;AACHoB,IAAAA,OAAO,EAAE,wEADN;AAEHQ,IAAAA,MAAM,EAAE;AACN1B,MAAAA,QAAQ,EAAE;AAAEkB,QAAAA,OAAO,EAAE,qBAAX;AAAkCS,QAAAA,UAAU,EAAE,CAAC;AAA/C,OADJ;AAENhB,MAAAA,MAAM,EAAE;AAAEO,QAAAA,OAAO,EAAE;AAAX;AAFF;AAFL;AAhD4C,CAAnD;AAwDA5E,KAAK,CAAC6B,SAAN,CAAgBmD,QAAhB,CAAyBQ,IAAzB,CAA8BJ,MAA9B,CAAqC5B,GAArC,GAA2CxD,KAAK,CAAC0F,IAAN,CAAWC,KAAX,CACzC3F,KAAK,CAAC6B,SAAN,CAAgBmD,QAAhB,CAAyBxB,GADgB,CAA3C;AAGAxD,KAAK,CAAC6B,SAAN,CAAgBmD,QAAhB,CAAyBS,MAAzB,CAAgCL,MAAhC,CAAuC5B,GAAvC,GAA6CxD,KAAK,CAAC0F,IAAN,CAAWC,KAAX,CAC3C3F,KAAK,CAAC6B,SAAN,CAAgBmD,QAAhB,CAAyBxB,GADkB,CAA7C;AAGAxD,KAAK,CAAC6B,SAAN,CAAgBmD,QAAhB,CAAyBQ,IAAzB,CAA8BJ,MAA9B,CAAqCK,MAArC,GAA8CzF,KAAK,CAAC0F,IAAN,CAAWC,KAAX,CAC5C3F,KAAK,CAAC6B,SAAN,CAAgBmD,QAAhB,CAAyBS,MADmB,CAA9C;AAGAzF,KAAK,CAAC6B,SAAN,CAAgBmD,QAAhB,CAAyBS,MAAzB,CAAgCL,MAAhC,CAAuCI,IAAvC,GAA8CxF,KAAK,CAAC0F,IAAN,CAAWC,KAAX,CAAiB3F,KAAK,CAAC6B,SAAN,CAAgBmD,QAAhB,CAAyBQ,IAA1C,CAA9C,C,CAA+F;;AAE/F,eAAe5E,uBAAf","sourcesContent":["import Prism from 'prismjs'\nimport 'prismjs/components/prism-python'\nimport 'prismjs/components/prism-php'\nimport 'prismjs/components/prism-sql'\nimport 'prismjs/components/prism-java'\nimport React, { useState, useCallback, useMemo } from 'react'\nimport { Slate, Editable, withReact } from 'slate-react'\nimport { Text, createEditor, Node } from 'slate'\nimport { withHistory } from 'slate-history'\nimport { css } from 'emotion'\n\nconst CodeHighlightingExample = () => {\n  const [value, setValue] = useState<Node[]>(initialValue)\n  const [language, setLanguage] = useState('html')\n  const renderLeaf = useCallback(props => <Leaf {...props} />, [])\n  const editor = useMemo(() => withHistory(withReact(createEditor())), [])\n\n  // decorate function depends on the language selected\n  const decorate = useCallback(\n    ([node, path]) => {\n      const ranges = []\n      if (!Text.isText(node)) {\n        return ranges\n      }\n      const tokens = Prism.tokenize(node.text, Prism.languages[language])\n      let start = 0\n\n      for (const token of tokens) {\n        const length = getLength(token)\n        const end = start + length\n\n        if (typeof token !== 'string') {\n          ranges.push({\n            [token.type]: true,\n            anchor: { path, offset: start },\n            focus: { path, offset: end },\n          })\n        }\n\n        start = end\n      }\n\n      return ranges\n    },\n    [language]\n  )\n\n  return (\n    <Slate editor={editor} value={value} onChange={value => setValue(value)}>\n      <div\n        contentEditable={false}\n        style={{ position: 'relative', top: '5px', right: '5px' }}\n      >\n        <h3>\n          Select a language\n          <select\n            value={language}\n            style={{ float: 'right' }}\n            onChange={e => setLanguage(e.target.value)}\n          >\n            <option value=\"js\">JavaScript</option>\n            <option value=\"css\">CSS</option>\n            <option value=\"html\">HTML</option>\n            <option value=\"python\">Python</option>\n            <option value=\"sql\">SQL</option>\n            <option value=\"java\">Java</option>\n            <option value=\"php\">PHP</option>\n          </select>\n        </h3>\n      </div>\n      <Editable\n        decorate={decorate}\n        renderLeaf={renderLeaf}\n        placeholder=\"Write some code...\"\n      />\n    </Slate>\n  )\n}\n\nconst getLength = token => {\n  if (typeof token === 'string') {\n    return token.length\n  } else if (typeof token.content === 'string') {\n    return token.content.length\n  } else {\n    return token.content.reduce((l, t) => l + getLength(t), 0)\n  }\n}\n\n// different token types, styles found on Prismjs website\nconst Leaf = ({ attributes, children, leaf }) => {\n  return (\n    <span\n      {...attributes}\n      className={css`\n            font-family: monospace;\n            background: hsla(0, 0%, 100%, .5);\n\n        ${leaf.comment &&\n          css`\n            color: slategray;\n          `} \n\n        ${(leaf.operator || leaf.url) &&\n          css`\n            color: #9a6e3a;\n          `}\n        ${leaf.keyword &&\n          css`\n            color: #07a;\n          `}\n        ${(leaf.variable || leaf.regex) &&\n          css`\n            color: #e90;\n          `}\n        ${(leaf.number ||\n          leaf.boolean ||\n          leaf.tag ||\n          leaf.constant ||\n          leaf.symbol ||\n          leaf.attr - name ||\n          leaf.selector) &&\n          css`\n            color: #905;\n          `}\n        ${leaf.punctuation &&\n          css`\n            color: #999;\n          `}\n        ${(leaf.string || leaf.char) &&\n          css`\n            color: #690;\n          `}\n        ${(leaf.function || leaf.class - name) &&\n          css`\n            color: #dd4a68;\n          `}\n        `}\n    >\n      {children}\n    </span>\n  )\n}\n\nconst initialValue = [\n  {\n    children: [\n      {\n        text: '<h1>Hi!</h1>',\n      },\n    ],\n  },\n]\n\n// modifications and additions to prism library\n\nPrism.languages.python = Prism.languages.extend('python', {})\nPrism.languages.insertBefore('python', 'prolog', {\n  comment: { pattern: /##[^\\n]*/, alias: 'comment' },\n})\nPrism.languages.javascript = Prism.languages.extend('javascript', {})\nPrism.languages.insertBefore('javascript', 'prolog', {\n  comment: { pattern: /\\/\\/[^\\n]*/, alias: 'comment' },\n})\nPrism.languages.html = Prism.languages.extend('html', {})\nPrism.languages.insertBefore('html', 'prolog', {\n  comment: { pattern: /<!--[^\\n]*-->/, alias: 'comment' },\n})\nPrism.languages.markdown = Prism.languages.extend('markup', {})\nPrism.languages.insertBefore('markdown', 'prolog', {\n  blockquote: { pattern: /^>(?:[\\t ]*>)*/m, alias: 'punctuation' },\n  code: [\n    { pattern: /^(?: {4}|\\t).+/m, alias: 'keyword' },\n    { pattern: /``.+?``|`[^`\\n]+`/, alias: 'keyword' },\n  ],\n  title: [\n    {\n      pattern: /\\w+.*(?:\\r?\\n|\\r)(?:==+|--+)/,\n      alias: 'important',\n      inside: { punctuation: /==+$|--+$/ },\n    },\n    {\n      pattern: /(^\\s*)#+.+/m,\n      lookbehind: !0,\n      alias: 'important',\n      inside: { punctuation: /^#+|#+$/ },\n    },\n  ],\n  hr: {\n    pattern: /(^\\s*)([*-])([\\t ]*\\2){2,}(?=\\s*$)/m,\n    lookbehind: !0,\n    alias: 'punctuation',\n  },\n  list: {\n    pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n    lookbehind: !0,\n    alias: 'punctuation',\n  },\n  'url-reference': {\n    pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n    inside: {\n      variable: { pattern: /^(!?\\[)[^\\]]+/, lookbehind: !0 },\n      string: /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n      punctuation: /^[\\[\\]!:]|[<>]/,\n    },\n    alias: 'url',\n  },\n  bold: {\n    pattern: /(^|[^\\\\])(\\*\\*|__)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind: !0,\n    inside: { punctuation: /^\\*\\*|^__|\\*\\*$|__$/ },\n  },\n  italic: {\n    pattern: /(^|[^\\\\])([*_])(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind: !0,\n    inside: { punctuation: /^[*_]|[*_]$/ },\n  },\n  url: {\n    pattern: /!?\\[[^\\]]+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[[^\\]\\n]*\\])/,\n    inside: {\n      variable: { pattern: /(!?\\[)[^\\]]+(?=\\]$)/, lookbehind: !0 },\n      string: { pattern: /\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/ },\n    },\n  },\n})\nPrism.languages.markdown.bold.inside.url = Prism.util.clone(\n  Prism.languages.markdown.url\n)\nPrism.languages.markdown.italic.inside.url = Prism.util.clone(\n  Prism.languages.markdown.url\n)\nPrism.languages.markdown.bold.inside.italic = Prism.util.clone(\n  Prism.languages.markdown.italic\n)\nPrism.languages.markdown.italic.inside.bold = Prism.util.clone(Prism.languages.markdown.bold); // prettier-ignore\n\nexport default CodeHighlightingExample\n"]},"metadata":{},"sourceType":"module"}