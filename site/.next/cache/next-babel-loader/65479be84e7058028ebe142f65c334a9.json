{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useMemo } from 'react';\nimport imageExtensions from 'image-extensions';\nimport isUrl from 'is-url';\nimport { Transforms, createEditor } from 'slate';\nimport { Slate, Editable, useEditor, useSelected, useFocused, withReact } from 'slate-react';\nimport { withHistory } from 'slate-history';\nimport { css } from 'emotion';\nimport { Button, Icon, Toolbar } from '../components';\n\nconst ImagesExample = () => {\n  const {\n    0: value,\n    1: setValue\n  } = useState(initialValue);\n  const editor = useMemo(() => withImages(withHistory(withReact(createEditor()))), []);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: value => setValue(value)\n  }, __jsx(Toolbar, null, __jsx(InsertImageButton, null)), __jsx(Editable, {\n    renderElement: props => __jsx(Element, props),\n    placeholder: \"Enter some text...\"\n  }));\n};\n\nconst withImages = editor => {\n  const {\n    insertData,\n    isVoid\n  } = editor;\n\n  editor.isVoid = element => {\n    return element.type === 'image' ? true : isVoid(element);\n  };\n\n  editor.insertData = data => {\n    const text = data.getData('text/plain');\n    const {\n      files\n    } = data;\n\n    if (files && files.length > 0) {\n      for (const file of files) {\n        const reader = new FileReader();\n        const [mime] = file.type.split('/');\n\n        if (mime === 'image') {\n          reader.addEventListener('load', () => {\n            const url = reader.result;\n            insertImage(editor, url);\n          });\n          reader.readAsDataURL(file);\n        }\n      }\n    } else if (isImageUrl(text)) {\n      insertImage(editor, text);\n    } else {\n      insertData(data);\n    }\n  };\n\n  return editor;\n};\n\nconst insertImage = (editor, url) => {\n  const text = {\n    text: ''\n  };\n  const image = {\n    type: 'image',\n    url,\n    children: [text]\n  };\n  Transforms.insertNodes(editor, image);\n};\n\nconst Element = props => {\n  const {\n    attributes,\n    children,\n    element\n  } = props;\n\n  switch (element.type) {\n    case 'image':\n      return __jsx(ImageElement, props);\n\n    default:\n      return __jsx(\"p\", attributes, children);\n  }\n};\n\nconst ImageElement = ({\n  attributes,\n  children,\n  element\n}) => {\n  const selected = useSelected();\n  const focused = useFocused();\n  return __jsx(\"div\", attributes, __jsx(\"div\", {\n    contentEditable: false\n  }, __jsx(\"img\", {\n    src: element.url,\n    className: css`\n            display: block;\n            max-width: 100%;\n            max-height: 20em;\n            box-shadow: ${selected && focused ? '0 0 0 3px #B4D5FF' : 'none'};\n          `\n  })), children);\n};\n\nconst InsertImageButton = () => {\n  const editor = useEditor();\n  return __jsx(Button, {\n    onMouseDown: event => {\n      event.preventDefault();\n      const url = window.prompt('Enter the URL of the image:');\n      if (!url) return;\n      insertImage(editor, url);\n    }\n  }, __jsx(Icon, null, \"image\"));\n};\n\nconst isImageUrl = url => {\n  if (!url) return false;\n  if (!isUrl(url)) return false;\n  const ext = new URL(url).pathname.split('.').pop();\n  return imageExtensions.includes(ext);\n};\n\nconst initialValue = [{\n  type: 'paragraph',\n  children: [{\n    text: 'In addition to nodes that contain editable text, you can also create other types of nodes, like images or videos.'\n  }]\n}, {\n  type: 'image',\n  url: 'https://source.unsplash.com/kFrdX5IeQzI',\n  children: [{\n    text: ''\n  }]\n}, {\n  type: 'paragraph',\n  children: [{\n    text: 'This example shows images in action. It features two ways to add images. You can either add an image via the toolbar icon above, or if you want in on a little secret, copy an image URL to your keyboard and paste it anywhere in the editor!'\n  }]\n}];\nexport default ImagesExample;","map":null,"metadata":{},"sourceType":"module"}