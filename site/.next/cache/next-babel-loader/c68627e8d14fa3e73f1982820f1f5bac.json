{"ast":null,"code":"var _jsxFileName = \"/Users/yonggu/WebstormProjects/slate/site/examples/links.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState, useMemo } from 'react';\nimport isUrl from 'is-url';\nimport { Slate, Editable, withReact, useSlate } from 'slate-react';\nimport { Transforms, Editor, Range, createEditor } from 'slate';\nimport { withHistory } from 'slate-history';\nimport { Button, Icon, Toolbar } from '../components';\n\nconst LinkExample = () => {\n  const {\n    0: value,\n    1: setValue\n  } = useState(initialValue);\n  const editor = useMemo(() => withLinks(withHistory(withReact(createEditor()))), []);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: value => setValue(value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, __jsx(Toolbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }\n  }, __jsx(LinkButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  })), __jsx(Editable, {\n    renderElement: props => __jsx(Element, _extends({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 33\n      }\n    })),\n    placeholder: \"Enter some text...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst withLinks = editor => {\n  const {\n    insertData,\n    insertText,\n    isInline\n  } = editor;\n\n  editor.isInline = element => {\n    return element.type === 'link' ? true : isInline(element);\n  };\n\n  editor.insertText = text => {\n    if (text && isUrl(text)) {\n      wrapLink(editor, text);\n    } else {\n      insertText(text);\n    }\n  };\n\n  editor.insertData = data => {\n    const text = data.getData('text/plain');\n\n    if (text && isUrl(text)) {\n      wrapLink(editor, text);\n    } else {\n      insertData(data);\n    }\n  };\n\n  return editor;\n};\n\nconst insertLink = (editor, url) => {\n  if (editor.selection) {\n    wrapLink(editor, url);\n  }\n};\n\nconst isLinkActive = editor => {\n  const [link] = Editor.nodes(editor, {\n    match: n => n.type === 'link'\n  });\n  return !!link;\n};\n\nconst unwrapLink = editor => {\n  Transforms.unwrapNodes(editor, {\n    match: n => n.type === 'link'\n  });\n};\n\nconst wrapLink = (editor, url) => {\n  if (isLinkActive(editor)) {\n    unwrapLink(editor);\n  }\n\n  const {\n    selection\n  } = editor;\n  const isCollapsed = selection && Range.isCollapsed(selection);\n  const link = {\n    type: 'link',\n    url,\n    children: isCollapsed ? [{\n      text: url\n    }] : []\n  };\n\n  if (isCollapsed) {\n    Transforms.insertNodes(editor, link);\n  } else {\n    Transforms.wrapNodes(editor, link, {\n      split: true\n    });\n    Transforms.collapse(editor, {\n      edge: 'end'\n    });\n  }\n};\n\nconst Element = ({\n  attributes,\n  children,\n  element\n}) => {\n  switch (element.type) {\n    case 'link':\n      return __jsx(\"a\", _extends({}, attributes, {\n        href: element.url,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 9\n        }\n      }), children);\n\n    default:\n      return __jsx(\"p\", _extends({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 14\n        }\n      }), children);\n  }\n};\n\nconst LinkButton = () => {\n  const editor = useSlate();\n  return __jsx(Button, {\n    active: isLinkActive(editor),\n    onMouseDown: event => {\n      event.preventDefault();\n      const url = window.prompt('Enter the URL of the link:');\n      if (!url) return;\n      insertLink(editor, url);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }\n  }, __jsx(Icon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, \"link\"));\n};\n\nconst initialValue = [{\n  children: [{\n    text: 'In addition to block nodes, you can create inline nodes, like '\n  }, {\n    type: 'link',\n    url: 'https://en.wikipedia.org/wiki/Hypertext',\n    children: [{\n      text: 'hyperlinks'\n    }]\n  }, {\n    text: '!'\n  }]\n}, {\n  children: [{\n    text: 'This example shows hyperlinks in action. It features two ways to add links. You can either add a link via the toolbar icon above, or if you want in on a little secret, copy a URL to your keyboard and paste it while a range of text is selected.'\n  }]\n}];\nexport default LinkExample;","map":{"version":3,"sources":["/Users/yonggu/WebstormProjects/slate/site/examples/links.tsx"],"names":["React","useState","useMemo","isUrl","Slate","Editable","withReact","useSlate","Transforms","Editor","Range","createEditor","withHistory","Button","Icon","Toolbar","LinkExample","value","setValue","initialValue","editor","withLinks","props","insertData","insertText","isInline","element","type","text","wrapLink","data","getData","insertLink","url","selection","isLinkActive","link","nodes","match","n","unwrapLink","unwrapNodes","isCollapsed","children","insertNodes","wrapNodes","split","collapse","edge","Element","attributes","LinkButton","event","preventDefault","window","prompt"],"mappings":"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","sourcesContent":["import React, { useState, useMemo } from 'react'\nimport isUrl from 'is-url'\nimport { Slate, Editable, withReact, useSlate } from 'slate-react'\nimport { Node, Transforms, Editor, Range, createEditor } from 'slate'\nimport { withHistory } from 'slate-history'\n\nimport { Button, Icon, Toolbar } from '../components'\n\nconst LinkExample = () => {\n  const [value, setValue] = useState<Node[]>(initialValue)\n  const editor = useMemo(\n    () => withLinks(withHistory(withReact(createEditor()))),\n    []\n  )\n\n  return (\n    <Slate editor={editor} value={value} onChange={value => setValue(value)}>\n      <Toolbar>\n        <LinkButton />\n      </Toolbar>\n      <Editable\n        renderElement={props => <Element {...props} />}\n        placeholder=\"Enter some text...\"\n      />\n    </Slate>\n  )\n}\n\nconst withLinks = editor => {\n  const { insertData, insertText, isInline } = editor\n\n  editor.isInline = element => {\n    return element.type === 'link' ? true : isInline(element)\n  }\n\n  editor.insertText = text => {\n    if (text && isUrl(text)) {\n      wrapLink(editor, text)\n    } else {\n      insertText(text)\n    }\n  }\n\n  editor.insertData = data => {\n    const text = data.getData('text/plain')\n\n    if (text && isUrl(text)) {\n      wrapLink(editor, text)\n    } else {\n      insertData(data)\n    }\n  }\n\n  return editor\n}\n\nconst insertLink = (editor, url) => {\n  if (editor.selection) {\n    wrapLink(editor, url)\n  }\n}\n\nconst isLinkActive = editor => {\n  const [link] = Editor.nodes(editor, { match: n => n.type === 'link' })\n  return !!link\n}\n\nconst unwrapLink = editor => {\n  Transforms.unwrapNodes(editor, { match: n => n.type === 'link' })\n}\n\nconst wrapLink = (editor, url) => {\n  if (isLinkActive(editor)) {\n    unwrapLink(editor)\n  }\n\n  const { selection } = editor\n  const isCollapsed = selection && Range.isCollapsed(selection)\n  const link = {\n    type: 'link',\n    url,\n    children: isCollapsed ? [{ text: url }] : [],\n  }\n\n  if (isCollapsed) {\n    Transforms.insertNodes(editor, link)\n  } else {\n    Transforms.wrapNodes(editor, link, { split: true })\n    Transforms.collapse(editor, { edge: 'end' })\n  }\n}\n\nconst Element = ({ attributes, children, element }) => {\n  switch (element.type) {\n    case 'link':\n      return (\n        <a {...attributes} href={element.url}>\n          {children}\n        </a>\n      )\n    default:\n      return <p {...attributes}>{children}</p>\n  }\n}\n\nconst LinkButton = () => {\n  const editor = useSlate()\n  return (\n    <Button\n      active={isLinkActive(editor)}\n      onMouseDown={event => {\n        event.preventDefault()\n        const url = window.prompt('Enter the URL of the link:')\n        if (!url) return\n        insertLink(editor, url)\n      }}\n    >\n      <Icon>link</Icon>\n    </Button>\n  )\n}\n\nconst initialValue = [\n  {\n    children: [\n      {\n        text: 'In addition to block nodes, you can create inline nodes, like ',\n      },\n      {\n        type: 'link',\n        url: 'https://en.wikipedia.org/wiki/Hypertext',\n        children: [{ text: 'hyperlinks' }],\n      },\n      {\n        text: '!',\n      },\n    ],\n  },\n  {\n    children: [\n      {\n        text:\n          'This example shows hyperlinks in action. It features two ways to add links. You can either add a link via the toolbar icon above, or if you want in on a little secret, copy a URL to your keyboard and paste it while a range of text is selected.',\n      },\n    ],\n  },\n]\n\nexport default LinkExample\n"]},"metadata":{},"sourceType":"module"}