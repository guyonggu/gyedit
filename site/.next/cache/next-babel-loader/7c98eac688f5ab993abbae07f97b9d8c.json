{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport Prism from 'prismjs';\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { Slate, Editable, withReact } from 'slate-react';\nimport { Text, createEditor } from 'slate';\nimport { withHistory } from 'slate-history';\nimport { css } from 'emotion' // eslint-disable-next-line\n;\nPrism.languages.markdown = Prism.languages.extend(\"markup\", {}), Prism.languages.insertBefore(\"markdown\", \"prolog\", {\n  blockquote: {\n    pattern: /^>(?:[\\t ]*>)*/m,\n    alias: \"punctuation\"\n  },\n  code: [{\n    pattern: /^(?: {4}|\\t).+/m,\n    alias: \"keyword\"\n  }, {\n    pattern: /``.+?``|`[^`\\n]+`/,\n    alias: \"keyword\"\n  }],\n  title: [{\n    pattern: /\\w+.*(?:\\r?\\n|\\r)(?:==+|--+)/,\n    alias: \"important\",\n    inside: {\n      punctuation: /==+$|--+$/\n    }\n  }, {\n    pattern: /(^\\s*)#+.+/m,\n    lookbehind: !0,\n    alias: \"important\",\n    inside: {\n      punctuation: /^#+|#+$/\n    }\n  }],\n  hr: {\n    pattern: /(^\\s*)([*-])([\\t ]*\\2){2,}(?=\\s*$)/m,\n    lookbehind: !0,\n    alias: \"punctuation\"\n  },\n  list: {\n    pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n    lookbehind: !0,\n    alias: \"punctuation\"\n  },\n  \"url-reference\": {\n    pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n    inside: {\n      variable: {\n        pattern: /^(!?\\[)[^\\]]+/,\n        lookbehind: !0\n      },\n      string: /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n      punctuation: /^[\\[\\]!:]|[<>]/\n    },\n    alias: \"url\"\n  },\n  bold: {\n    pattern: /(^|[^\\\\])(\\*\\*|__)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind: !0,\n    inside: {\n      punctuation: /^\\*\\*|^__|\\*\\*$|__$/\n    }\n  },\n  italic: {\n    pattern: /(^|[^\\\\])([*_])(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind: !0,\n    inside: {\n      punctuation: /^[*_]|[*_]$/\n    }\n  },\n  url: {\n    pattern: /!?\\[[^\\]]+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[[^\\]\\n]*\\])/,\n    inside: {\n      variable: {\n        pattern: /(!?\\[)[^\\]]+(?=\\]$)/,\n        lookbehind: !0\n      },\n      string: {\n        pattern: /\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/\n      }\n    }\n  }\n}), Prism.languages.markdown.bold.inside.url = Prism.util.clone(Prism.languages.markdown.url), Prism.languages.markdown.italic.inside.url = Prism.util.clone(Prism.languages.markdown.url), Prism.languages.markdown.bold.inside.italic = Prism.util.clone(Prism.languages.markdown.italic), Prism.languages.markdown.italic.inside.bold = Prism.util.clone(Prism.languages.markdown.bold); // prettier-ignore\n\nconst MarkdownPreviewExample = () => {\n  const {\n    0: value,\n    1: setValue\n  } = useState(initialValue);\n  const renderLeaf = useCallback(props => __jsx(Leaf, props), []);\n  const editor = useMemo(() => withHistory(withReact(createEditor())), []);\n  const decorate = useCallback(([node, path]) => {\n    const ranges = [];\n\n    if (!Text.isText(node)) {\n      return ranges;\n    }\n\n    const getLength = token => {\n      if (typeof token === 'string') {\n        return token.length;\n      } else if (typeof token.content === 'string') {\n        return token.content.length;\n      } else {\n        return token.content.reduce((l, t) => l + getLength(t), 0);\n      }\n    };\n\n    const tokens = Prism.tokenize(node.text, Prism.languages.markdown);\n    let start = 0;\n\n    for (const token of tokens) {\n      const length = getLength(token);\n      const end = start + length;\n\n      if (typeof token !== 'string') {\n        ranges.push({\n          [token.type]: true,\n          anchor: {\n            path,\n            offset: start\n          },\n          focus: {\n            path,\n            offset: end\n          }\n        });\n      }\n\n      start = end;\n    }\n\n    return ranges;\n  }, []);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: value => setValue(value)\n  }, __jsx(Editable, {\n    decorate: decorate,\n    renderLeaf: renderLeaf,\n    placeholder: \"Write some markdown...\"\n  }));\n};\n\nconst Leaf = ({\n  attributes,\n  children,\n  leaf\n}) => {\n  return __jsx(\"span\", _extends({}, attributes, {\n    className: css`\n        font-weight: ${leaf.bold && 'bold'};\n        font-style: ${leaf.italic && 'italic'};\n        text-decoration: ${leaf.underlined && 'underline'};\n        ${leaf.title && css`\n            display: inline-block;\n            font-weight: bold;\n            font-size: 20px;\n            margin: 20px 0 10px 0;\n          `}\n        ${leaf.list && css`\n            padding-left: 10px;\n            font-size: 20px;\n            line-height: 10px;\n          `}\n        ${leaf.hr && css`\n            display: block;\n            text-align: center;\n            border-bottom: 2px solid #ddd;\n          `}\n        ${leaf.blockquote && css`\n            display: inline-block;\n            border-left: 2px solid #ddd;\n            padding-left: 10px;\n            color: #aaa;\n            font-style: italic;\n          `}\n        ${leaf.code && css`\n            font-family: monospace;\n            background-color: #eee;\n            padding: 3px;\n          `}\n      `\n  }), children);\n};\n\nconst initialValue = [{\n  children: [{\n    text: 'Slate is flexible enough to add **decorations** that can format text based on its content. For example, this editor has **Markdown** preview decorations on it, to make it _dead_ simple to make an editor with built-in Markdown previewing.'\n  }]\n}, {\n  children: [{\n    text: '## Try it out!'\n  }]\n}, {\n  children: [{\n    text: 'Try it out for yourself!'\n  }]\n}];\nexport default MarkdownPreviewExample;","map":null,"metadata":{},"sourceType":"module"}