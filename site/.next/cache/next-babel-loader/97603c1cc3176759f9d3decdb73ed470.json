{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n          flex: 1;\\n          opacity: \", \";\\n          text-decoration: \", \";\\n\\n          &:focus {\\n            outline: none;\\n          }\\n        \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n          margin-right: 0.75em;\\n        \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n        display: flex;\\n        flex-direction: row;\\n        align-items: center;\\n\\n        & + & {\\n          margin-top: 0;\\n        }\\n      \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useMemo, useCallback } from 'react';\nimport { Slate, Editable, withReact, useEditor, useReadOnly, ReactEditor } from 'slate-react';\nimport { Editor, Transforms, Range, Point, createEditor } from 'slate';\nimport { css } from 'emotion';\nimport { withHistory } from 'slate-history';\n\nvar CheckListsExample = function CheckListsExample() {\n  var _useState = useState(initialValue),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var renderElement = useCallback(function (props) {\n    return __jsx(Element, props);\n  }, []);\n  var editor = useMemo(function () {\n    return withChecklists(withHistory(withReact(createEditor())));\n  }, []);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: function onChange(value) {\n      return setValue(value);\n    }\n  }, __jsx(Editable, {\n    renderElement: renderElement,\n    placeholder: \"Get to work\\u2026\",\n    spellCheck: true,\n    autoFocus: true\n  }));\n};\n\nvar withChecklists = function withChecklists(editor) {\n  var deleteBackward = editor.deleteBackward;\n\n  editor.deleteBackward = function () {\n    var selection = editor.selection;\n\n    if (selection && Range.isCollapsed(selection)) {\n      var _Editor$nodes = Editor.nodes(editor, {\n        match: function match(n) {\n          return n.type === 'check-list-item';\n        }\n      }),\n          _Editor$nodes2 = _slicedToArray(_Editor$nodes, 1),\n          match = _Editor$nodes2[0];\n\n      if (match) {\n        var _match = _slicedToArray(match, 2),\n            path = _match[1];\n\n        var start = Editor.start(editor, path);\n\n        if (Point.equals(selection.anchor, start)) {\n          Transforms.setNodes(editor, {\n            type: 'paragraph'\n          }, {\n            match: function match(n) {\n              return n.type === 'check-list-item';\n            }\n          });\n          return;\n        }\n      }\n    }\n\n    deleteBackward.apply(void 0, arguments);\n  };\n\n  return editor;\n};\n\nvar Element = function Element(props) {\n  var attributes = props.attributes,\n      children = props.children,\n      element = props.element;\n\n  switch (element.type) {\n    case 'check-list-item':\n      return __jsx(CheckListItemElement, props);\n\n    default:\n      return __jsx(\"p\", attributes, children);\n  }\n};\n\nvar CheckListItemElement = function CheckListItemElement(_ref) {\n  var attributes = _ref.attributes,\n      children = _ref.children,\n      element = _ref.element;\n  var editor = useEditor();\n  var readOnly = useReadOnly();\n  var checked = element.checked;\n  return __jsx(\"div\", _extends({}, attributes, {\n    className: css(_templateObject())\n  }), __jsx(\"span\", {\n    contentEditable: false,\n    className: css(_templateObject2())\n  }, __jsx(\"input\", {\n    type: \"checkbox\",\n    checked: checked,\n    onChange: function onChange(event) {\n      var path = ReactEditor.findPath(editor, element);\n      Transforms.setNodes(editor, {\n        checked: event.target.checked\n      }, {\n        at: path\n      });\n    }\n  })), __jsx(\"span\", {\n    contentEditable: !readOnly,\n    suppressContentEditableWarning: true,\n    className: css(_templateObject3(), checked ? 0.666 : 1, checked ? 'none' : 'line-through')\n  }, children));\n};\n\nvar initialValue = [{\n  children: [{\n    text: 'With Slate you can build complex block types that have their own embedded content and behaviors, like rendering checkboxes inside check list items!'\n  }]\n}, {\n  type: 'check-list-item',\n  checked: true,\n  children: [{\n    text: 'Slide to the left.'\n  }]\n}, {\n  type: 'check-list-item',\n  checked: true,\n  children: [{\n    text: 'Slide to the right.'\n  }]\n}, {\n  type: 'check-list-item',\n  checked: false,\n  children: [{\n    text: 'Criss-cross.'\n  }]\n}, {\n  type: 'check-list-item',\n  checked: true,\n  children: [{\n    text: 'Criss-cross!'\n  }]\n}, {\n  type: 'check-list-item',\n  checked: false,\n  children: [{\n    text: 'Cha cha real smoothâ€¦'\n  }]\n}, {\n  type: 'check-list-item',\n  checked: false,\n  children: [{\n    text: \"Let's go to work!\"\n  }]\n}, {\n  children: [{\n    text: 'Try it out for yourself!'\n  }]\n}];\nexport default CheckListsExample;","map":null,"metadata":{},"sourceType":"module"}