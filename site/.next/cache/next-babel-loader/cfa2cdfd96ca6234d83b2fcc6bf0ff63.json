{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/yonggu/WebstormProjects/gyedit/site/examples/gyedit.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useCallback, useMemo, useState } from 'react';\nimport isHotkey from 'is-hotkey';\nimport { Editable, withReact, useSlate, Slate } from 'slate-react';\nimport { Editor, Transforms, createEditor } from 'slate';\nimport { withHistory } from 'slate-history';\nimport { Button, Icon, Toolbar } from '../components';\nimport { withMarkdown, renderElement } from '../../src/';\nvar HOTKEYS = {\n  'mod+b': 'bold',\n  'mod+i': 'italic',\n  'mod+u': 'underline',\n  'mod+`': 'code'\n};\nvar LIST_TYPES = ['numbered-list', 'bulleted-list'];\n\nvar GYEdit = function GYEdit() {\n  _s();\n\n  var _useState = useState(initialValue),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var renderLeaf = useCallback(function (props) {\n    return __jsx(Leaf, _extends({}, props, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 45\n      }\n    }));\n  }, []);\n  var editor = useMemo(function () {\n    return withMarkdown(withHistory(withReact(createEditor())));\n  }, []);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: function onChange(value) {\n      return setValue(value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, __jsx(Toolbar, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  }, __jsx(MarkButton, {\n    format: \"bold\",\n    icon: \"format_bold\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 17\n    }\n  }), __jsx(MarkButton, {\n    format: \"italic\",\n    icon: \"format_italic\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 17\n    }\n  }), __jsx(MarkButton, {\n    format: \"underline\",\n    icon: \"format_underlined\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 17\n    }\n  }), __jsx(MarkButton, {\n    format: \"code\",\n    icon: \"code\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }\n  }), __jsx(BlockButton, {\n    format: \"heading-one\",\n    icon: \"looks_one\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }\n  }), __jsx(BlockButton, {\n    format: \"heading-two\",\n    icon: \"looks_two\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }\n  }), __jsx(BlockButton, {\n    format: \"block-quote\",\n    icon: \"format_quote\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 17\n    }\n  }), __jsx(BlockButton, {\n    format: \"numbered-list\",\n    icon: \"format_list_numbered\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }\n  }), __jsx(BlockButton, {\n    format: \"bulleted-list\",\n    icon: \"format_list_bulleted\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }\n  })), __jsx(Editable, {\n    renderElement: renderElement,\n    renderLeaf: renderLeaf,\n    placeholder: \"Enter some rich text\\u2026\",\n    spellCheck: true,\n    autoFocus: true,\n    onKeyDown: function onKeyDown(event) {\n      for (var hotkey in HOTKEYS) {\n        if (isHotkey(hotkey, event)) {\n          event.preventDefault();\n          var mark = HOTKEYS[hotkey];\n          toggleMark(editor, mark);\n        }\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }));\n};\n\n_s(GYEdit, \"gOoBolvs0gmsXAfTwbYiUMXLovE=\");\n\n_c = GYEdit;\n\nvar toggleBlock = function toggleBlock(editor, format) {\n  var isActive = isBlockActive(editor, format);\n  var isList = LIST_TYPES.includes(format);\n  Transforms.unwrapNodes(editor, {\n    match: function match(n) {\n      return LIST_TYPES.includes(n.type);\n    },\n    split: true\n  });\n  Transforms.setNodes(editor, {\n    type: isActive ? 'paragraph' : isList ? 'list-item' : format\n  });\n\n  if (!isActive && isList) {\n    var block = {\n      type: format,\n      children: []\n    };\n    Transforms.wrapNodes(editor, block);\n  }\n};\n\nvar toggleMark = function toggleMark(editor, format) {\n  var isActive = isMarkActive(editor, format);\n\n  if (isActive) {\n    Editor.removeMark(editor, format);\n  } else {\n    Editor.addMark(editor, format, true);\n  }\n};\n\nvar isBlockActive = function isBlockActive(editor, format) {\n  var _Editor$nodes = Editor.nodes(editor, {\n    match: function match(n) {\n      return n.type === format;\n    }\n  }),\n      _Editor$nodes2 = _slicedToArray(_Editor$nodes, 1),\n      match = _Editor$nodes2[0];\n\n  return !!match;\n};\n\nvar isMarkActive = function isMarkActive(editor, format) {\n  var marks = Editor.marks(editor);\n  return marks ? marks[format] === true : false;\n};\n\nvar Element = function Element(_ref) {\n  var attributes = _ref.attributes,\n      children = _ref.children,\n      element = _ref.element;\n\n  switch (element.type) {\n    case 'block-quote':\n      return __jsx(\"blockquote\", _extends({}, attributes, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 20\n        }\n      }), children);\n\n    case 'bulleted-list':\n      return __jsx(\"ul\", _extends({}, attributes, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 20\n        }\n      }), children);\n\n    case 'heading-one':\n      return __jsx(\"h1\", _extends({}, attributes, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 20\n        }\n      }), children);\n\n    case 'heading-two':\n      return __jsx(\"h2\", _extends({}, attributes, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 20\n        }\n      }), children);\n\n    case 'list-item':\n      return __jsx(\"li\", _extends({}, attributes, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 20\n        }\n      }), children);\n\n    case 'numbered-list':\n      return __jsx(\"ol\", _extends({}, attributes, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 20\n        }\n      }), children);\n\n    default:\n      return __jsx(\"p\", _extends({}, attributes, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 20\n        }\n      }), children);\n  }\n};\n\n_c2 = Element;\n\nvar BlockButton = function BlockButton(_ref2) {\n  _s2();\n\n  var format = _ref2.format,\n      icon = _ref2.icon;\n  var editor = useSlate();\n  return __jsx(Button, {\n    active: isBlockActive(editor, format),\n    onMouseDown: function onMouseDown(event) {\n      event.preventDefault();\n      toggleBlock(editor, format);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, __jsx(Icon, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, icon));\n};\n\n_s2(BlockButton, \"YMFVEh3YGumTkrWAgpqmxHJ20Oc=\", false, function () {\n  return [useSlate];\n});\n\n_c3 = BlockButton;\n\nvar MarkButton = function MarkButton(_ref3) {\n  _s3();\n\n  var format = _ref3.format,\n      icon = _ref3.icon;\n  var editor = useSlate();\n  return __jsx(Button, {\n    active: isMarkActive(editor, format),\n    onMouseDown: function onMouseDown(event) {\n      event.preventDefault();\n      toggleMark(editor, format);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }, __jsx(Icon, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }, icon));\n};\n\n_s3(MarkButton, \"YMFVEh3YGumTkrWAgpqmxHJ20Oc=\", false, function () {\n  return [useSlate];\n});\n\n_c4 = MarkButton;\nvar initialValue = [{\n  type: 'paragraph',\n  children: [{\n    text: 'This is editable '\n  }, {\n    text: 'rich',\n    bold: true\n  }, {\n    text: ' text, '\n  }, {\n    text: 'much',\n    italic: true\n  }, {\n    text: ' better than a '\n  }, {\n    text: '<textarea>',\n    code: true\n  }, {\n    text: '!'\n  }]\n}, {\n  type: 'paragraph',\n  children: [{\n    text: \"Since it's rich text, you can do things like turn a selection of text \"\n  }, {\n    text: 'bold',\n    bold: true\n  }, {\n    text: ', or add a semantically rendered block quote in the middle of the page, like this:'\n  }]\n}, {\n  type: 'block-quote',\n  children: [{\n    text: 'A wise quote.'\n  }]\n}, {\n  type: 'paragraph',\n  children: [{\n    text: 'Try it out for yourself!'\n  }]\n}];\nexport default GYEdit;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"GYEdit\");\n$RefreshReg$(_c2, \"Element\");\n$RefreshReg$(_c3, \"BlockButton\");\n$RefreshReg$(_c4, \"MarkButton\");","map":{"version":3,"sources":["/Users/yonggu/WebstormProjects/gyedit/site/examples/gyedit.tsx"],"names":["React","useCallback","useMemo","useState","isHotkey","Editable","withReact","useSlate","Slate","Editor","Transforms","createEditor","withHistory","Button","Icon","Toolbar","withMarkdown","renderElement","HOTKEYS","LIST_TYPES","GYEdit","initialValue","value","setValue","renderLeaf","props","editor","event","hotkey","preventDefault","mark","toggleMark","toggleBlock","format","isActive","isBlockActive","isList","includes","unwrapNodes","match","n","type","split","setNodes","block","children","wrapNodes","isMarkActive","removeMark","addMark","nodes","marks","Element","attributes","element","BlockButton","icon","MarkButton","text","bold","italic","code"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo, useState } from 'react'\nimport isHotkey from 'is-hotkey'\nimport { Editable, withReact, useSlate, Slate } from 'slate-react'\nimport { Editor, Transforms, createEditor, Node } from 'slate'\nimport { withHistory } from 'slate-history'\n\nimport { Button, Icon, Toolbar } from '../components'\nimport { withMarkdown, renderElement } from '../../src/'\n\nconst HOTKEYS = {\n    'mod+b': 'bold',\n    'mod+i': 'italic',\n    'mod+u': 'underline',\n    'mod+`': 'code',\n}\n\nconst LIST_TYPES = ['numbered-list', 'bulleted-list']\n\nconst GYEdit = () => {\n    const [value, setValue] = useState<Node[]>(initialValue)\n    const renderLeaf = useCallback(props => <Leaf {...props} />, [])\n    const editor = useMemo(() => withMarkdown(withHistory(withReact(createEditor()))), [])\n\n    return (\n        <Slate editor={editor} value={value} onChange={value => setValue(value)}>\n            <Toolbar>\n                <MarkButton format=\"bold\" icon=\"format_bold\" />\n                <MarkButton format=\"italic\" icon=\"format_italic\" />\n                <MarkButton format=\"underline\" icon=\"format_underlined\" />\n                <MarkButton format=\"code\" icon=\"code\" />\n                <BlockButton format=\"heading-one\" icon=\"looks_one\" />\n                <BlockButton format=\"heading-two\" icon=\"looks_two\" />\n                <BlockButton format=\"block-quote\" icon=\"format_quote\" />\n                <BlockButton format=\"numbered-list\" icon=\"format_list_numbered\" />\n                <BlockButton format=\"bulleted-list\" icon=\"format_list_bulleted\" />\n            </Toolbar>\n            <Editable\n                renderElement={renderElement}\n                renderLeaf={renderLeaf}\n                placeholder=\"Enter some rich text…\"\n                spellCheck\n                autoFocus\n                onKeyDown={event => {\n                    for (const hotkey in HOTKEYS) {\n                        if (isHotkey(hotkey, event as any)) {\n                            event.preventDefault()\n                            const mark = HOTKEYS[hotkey]\n                            toggleMark(editor, mark)\n                        }\n                    }\n                }}\n            />\n        </Slate>\n    )\n}\n\nconst toggleBlock = (editor, format) => {\n    const isActive = isBlockActive(editor, format)\n    const isList = LIST_TYPES.includes(format)\n\n    Transforms.unwrapNodes(editor, {\n        match: n => LIST_TYPES.includes(n.type as string),\n        split: true,\n    })\n\n    Transforms.setNodes(editor, {\n        type: isActive ? 'paragraph' : isList ? 'list-item' : format,\n    })\n\n    if (!isActive && isList) {\n        const block = { type: format, children: [] }\n        Transforms.wrapNodes(editor, block)\n    }\n}\n\nconst toggleMark = (editor, format) => {\n    const isActive = isMarkActive(editor, format)\n\n    if (isActive) {\n        Editor.removeMark(editor, format)\n    } else {\n        Editor.addMark(editor, format, true)\n    }\n}\n\nconst isBlockActive = (editor, format) => {\n    const [match] = Editor.nodes(editor, {\n        match: n => n.type === format,\n    })\n\n    return !!match\n}\n\nconst isMarkActive = (editor, format) => {\n    const marks = Editor.marks(editor)\n    return marks ? marks[format] === true : false\n}\n\nconst Element = ({ attributes, children, element }) => {\n    switch (element.type) {\n        case 'block-quote':\n            return <blockquote {...attributes}>{children}</blockquote>\n        case 'bulleted-list':\n            return <ul {...attributes}>{children}</ul>\n        case 'heading-one':\n            return <h1 {...attributes}>{children}</h1>\n        case 'heading-two':\n            return <h2 {...attributes}>{children}</h2>\n        case 'list-item':\n            return <li {...attributes}>{children}</li>\n        case 'numbered-list':\n            return <ol {...attributes}>{children}</ol>\n        default:\n            return <p {...attributes}>{children}</p>\n    }\n}\n\n\n\nconst BlockButton = ({ format, icon }) => {\n    const editor = useSlate()\n    return (\n        <Button\n            active={isBlockActive(editor, format)}\n            onMouseDown={event => {\n                event.preventDefault()\n                toggleBlock(editor, format)\n            }}\n        >\n            <Icon>{icon}</Icon>\n        </Button>\n    )\n}\n\nconst MarkButton = ({ format, icon }) => {\n    const editor = useSlate()\n    return (\n        <Button\n            active={isMarkActive(editor, format)}\n            onMouseDown={event => {\n                event.preventDefault()\n                toggleMark(editor, format)\n            }}\n        >\n            <Icon>{icon}</Icon>\n        </Button>\n    )\n}\n\nconst initialValue = [\n    {\n        type: 'paragraph',\n        children: [\n            { text: 'This is editable ' },\n            { text: 'rich', bold: true },\n            { text: ' text, ' },\n            { text: 'much', italic: true },\n            { text: ' better than a ' },\n            { text: '<textarea>', code: true },\n            { text: '!' },\n        ],\n    },\n    {\n        type: 'paragraph',\n        children: [\n            {\n                text:\n                    \"Since it's rich text, you can do things like turn a selection of text \",\n            },\n            { text: 'bold', bold: true },\n            {\n                text:\n                    ', or add a semantically rendered block quote in the middle of the page, like this:',\n            },\n        ],\n    },\n    {\n        type: 'block-quote',\n        children: [{ text: 'A wise quote.' }],\n    },\n    {\n        type: 'paragraph',\n        children: [{ text: 'Try it out for yourself!' }],\n    },\n]\n\nexport default GYEdit\n"]},"metadata":{},"sourceType":"module"}