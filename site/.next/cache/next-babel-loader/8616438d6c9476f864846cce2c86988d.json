{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { Path, Node, Editor, Transforms } from 'slate';\nexport var getListStart = function getListStart(editor, path) {\n  var listStart = [];\n\n  var _Editor$node = Editor.node(editor, path),\n      _Editor$node2 = _slicedToArray(_Editor$node, 1),\n      node = _Editor$node2[0];\n\n  if (!isListNode(node)) {\n    return listStart;\n  }\n\n  var curPath = path;\n  var options = {\n    index: 0\n  };\n\n  while (isListNode(node) && options.index >= 0) {\n    computeListStart(listStart, node, options);\n    var pre = Editor.previous(editor, {\n      at: curPath\n    });\n\n    if (!pre) {\n      break;\n    }\n\n    var _pre = _slicedToArray(pre, 2);\n\n    node = _pre[0];\n    curPath = _pre[1];\n  }\n\n  return listStart;\n};\nexport var isListNode = function isListNode(node) {\n  if (!node || !node.type || !node.type.endsWith('-list')) {\n    return false;\n  }\n\n  return true;\n};\n\nvar computeListStart = function computeListStart(listStart, node) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    index: 0\n  };\n  var indent = node.indent || 0;\n  var start = node.start || 1;\n\n  if (listStart.length && indent > options.index) {\n    return;\n  }\n\n  if (!listStart.length) {\n    for (var i = 0; i <= indent; i++) {\n      listStart.push(1);\n    }\n  }\n\n  if (node.type === 'numbered-list') {\n    listStart[indent] = start + node.children.length;\n  }\n\n  options.index = indent - 1;\n};\n\nexport var fixList = function fixList(editor, path) {\n  var entry;\n\n  if (!path) {\n    entry = Editor.above(editor, {\n      match: function match(n) {\n        return Editor.isBlock(editor, n);\n      }\n    });\n  } else {\n    entry = Editor.node(editor, path);\n  }\n\n  if (!entry) {\n    return;\n  }\n\n  if (entry[0].type === 'list-item') {\n    var _ref = Editor.parent(editor, entry[1]),\n        _ref2 = _slicedToArray(_ref, 2),\n        node = _ref2[0],\n        _path = _ref2[1];\n\n    var _ref3 = Editor.previous(editor, {\n      at: _path\n    }) || [undefined, undefined],\n        _ref4 = _slicedToArray(_ref3, 2),\n        preNode = _ref4[0],\n        prePath = _ref4[1];\n\n    var ref = Editor.pathRef(editor, _path);\n    console.log(\"fix:\", node.type, \"at:\", _path); // merge left\n\n    if (isListNode(preNode) && preNode.type === node.type && preNode.indent === node.indent) {\n      Transforms.mergeNodes(editor, {\n        at: _path\n      });\n    } //merge right\n\n\n    var _ref5 = Editor.next(editor, {\n      at: ref.current\n    }) || [undefined, undefined],\n        _ref6 = _slicedToArray(_ref5, 2),\n        nextNode = _ref6[0],\n        nextPath = _ref6[1];\n\n    if (isListNode(nextNode) && nextNode.type === node.type && nextNode.indent === node.indent) {\n      Transforms.mergeNodes(editor, {\n        at: nextPath\n      });\n    }\n\n    var listStart = [];\n    var updatePath;\n\n    if (prePath && isListNode(preNode)) {\n      listStart = getListStart(editor, prePath);\n      updatePath = Path.next(prePath);\n    } else {\n      updatePath = ref.unref();\n    }\n\n    console.log(\"updateListStart:\", listStart, \"at:\", updatePath);\n    updateListStart(editor, updatePath, listStart);\n  } else {\n    var next = Editor.next(editor, {\n      at: entry[1]\n    });\n\n    if (next && isListNode(next[0])) {\n      console.log(\"updateListStart:\", [], \"at:\", next[1]);\n      updateListStart(editor, next[1], []);\n    }\n  }\n};\n\nvar updateListStart = function updateListStart(editor, path, listStart) {\n  if (!Node.has(editor, path)) {\n    return;\n  }\n\n  var _Editor$node3 = Editor.node(editor, path),\n      _Editor$node4 = _slicedToArray(_Editor$node3, 1),\n      node = _Editor$node4[0];\n\n  while (isListNode(node)) {\n    var indent = node.indent || 0;\n    var start = listStart[indent] || 1;\n\n    if (node.type === 'numbered-list') {\n      Transforms.setNodes(editor, {\n        start: listStart[indent]\n      }, {\n        at: path\n      });\n    }\n\n    listStart.splice(indent + 1);\n\n    if (node.type === 'numbered-list') {\n      listStart[indent] = start + node.children.length;\n    } else {\n      listStart[indent] = 1;\n    } // node.start = listStart[node.indent]\n\n\n    var entry = Editor.next(editor, {\n      at: path\n    });\n\n    if (!entry) {\n      break;\n    }\n\n    var _entry = _slicedToArray(entry, 2);\n\n    node = _entry[0];\n    path = _entry[1];\n  }\n};","map":null,"metadata":{},"sourceType":"module"}