{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/yonggu/WebstormProjects/gyedit/site/examples/embeds.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useMemo } from 'react';\nimport { Transforms, createEditor } from 'slate';\nimport { Slate, Editable, withReact, useEditor, ReactEditor } from 'slate-react';\n\nvar EmbedsExample = function EmbedsExample() {\n  _s();\n\n  var _useState = useState(initialValue),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var editor = useMemo(function () {\n    return withEmbeds(withReact(createEditor()));\n  }, []);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: function onChange(value) {\n      return setValue(value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, __jsx(Editable, {\n    renderElement: function renderElement(props) {\n      return __jsx(Element, _extends({}, props, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 33\n        }\n      }));\n    },\n    placeholder: \"Enter some text...\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(EmbedsExample, \"4ewp4wBHt4y6QUDh2ipfoCLaKxY=\");\n\n_c = EmbedsExample;\n\nvar withEmbeds = function withEmbeds(editor) {\n  var isVoid = editor.isVoid;\n\n  editor.isVoid = function (element) {\n    return element.type === 'video' ? true : isVoid(element);\n  };\n\n  return editor;\n};\n\nvar Element = function Element(props) {\n  var attributes = props.attributes,\n      children = props.children,\n      element = props.element;\n\n  switch (element.type) {\n    case 'video':\n      return __jsx(VideoElement, _extends({}, props, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 14\n        }\n      }));\n\n    default:\n      return __jsx(\"p\", _extends({}, attributes, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 14\n        }\n      }), children);\n  }\n};\n\n_c2 = Element;\n\nvar VideoElement = function VideoElement(_ref) {\n  _s2();\n\n  var attributes = _ref.attributes,\n      children = _ref.children,\n      element = _ref.element;\n  var editor = useEditor();\n  var url = element.url;\n  return __jsx(\"div\", _extends({}, attributes, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }), __jsx(\"div\", {\n    contentEditable: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    style: {\n      padding: '75% 0 0 0',\n      position: 'relative'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, __jsx(\"iframe\", {\n    src: \"\".concat(url, \"?title=0&byline=0&portrait=0\"),\n    frameBorder: \"0\",\n    style: {\n      position: 'absolute',\n      top: '0',\n      left: '0',\n      width: '100%',\n      height: '100%'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  })), __jsx(UrlInput, {\n    url: url,\n    onChange: function onChange(val) {\n      var path = ReactEditor.findPath(editor, element);\n      Transforms.setNodes(editor, {\n        url: val\n      }, {\n        at: path\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  })), children);\n};\n\n_s2(VideoElement, \"t0rsU/t1p+LiVrRpHUSgNnV9Lz4=\", false, function () {\n  return [useEditor];\n});\n\n_c3 = VideoElement;\n\nvar UrlInput = function UrlInput(_ref2) {\n  _s3();\n\n  var url = _ref2.url,\n      _onChange = _ref2.onChange;\n\n  var _React$useState = React.useState(url),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      value = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  return __jsx(\"input\", {\n    value: value,\n    onClick: function onClick(e) {\n      return e.stopPropagation();\n    },\n    style: {\n      marginTop: '5px',\n      boxSizing: 'border-box'\n    },\n    onChange: function onChange(e) {\n      var newUrl = e.target.value;\n      setValue(newUrl);\n\n      _onChange(newUrl);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  });\n};\n\n_s3(UrlInput, \"+WW1UdMVeodMsjMPXbl3tqj6AN8=\");\n\n_c4 = UrlInput;\nvar initialValue = [{\n  children: [{\n    text: 'In addition to simple image nodes, you can actually create complex embedded nodes. For example, this one contains an input element that lets you change the video being rendered!'\n  }]\n}, {\n  type: 'video',\n  url: 'https://player.vimeo.com/video/26689853',\n  children: [{\n    text: ''\n  }]\n}, {\n  children: [{\n    text: 'Try it out! This editor is built to handle Vimeo embeds, but you could handle any type.'\n  }]\n}];\nexport default EmbedsExample;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"EmbedsExample\");\n$RefreshReg$(_c2, \"Element\");\n$RefreshReg$(_c3, \"VideoElement\");\n$RefreshReg$(_c4, \"UrlInput\");","map":{"version":3,"sources":["/Users/yonggu/WebstormProjects/gyedit/site/examples/embeds.tsx"],"names":["React","useState","useMemo","Transforms","createEditor","Slate","Editable","withReact","useEditor","ReactEditor","EmbedsExample","initialValue","value","setValue","editor","withEmbeds","props","isVoid","element","type","Element","attributes","children","VideoElement","url","padding","position","top","left","width","height","val","path","findPath","setNodes","at","UrlInput","onChange","e","stopPropagation","marginTop","boxSizing","newUrl","target","text"],"mappings":"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","sourcesContent":["import React, { useState, useMemo } from 'react'\nimport { Transforms, createEditor, Node } from 'slate'\nimport {\n  Slate,\n  Editable,\n  withReact,\n  useEditor,\n  ReactEditor,\n  useFocused,\n  useSelected,\n} from 'slate-react'\n\nconst EmbedsExample = () => {\n  const [value, setValue] = useState<Node[]>(initialValue)\n  const editor = useMemo(() => withEmbeds(withReact(createEditor())), [])\n  return (\n    <Slate editor={editor} value={value} onChange={value => setValue(value)}>\n      <Editable\n        renderElement={props => <Element {...props} />}\n        placeholder=\"Enter some text...\"\n      />\n    </Slate>\n  )\n}\n\nconst withEmbeds = editor => {\n  const { isVoid } = editor\n  editor.isVoid = element => (element.type === 'video' ? true : isVoid(element))\n  return editor\n}\n\nconst Element = props => {\n  const { attributes, children, element } = props\n  switch (element.type) {\n    case 'video':\n      return <VideoElement {...props} />\n    default:\n      return <p {...attributes}>{children}</p>\n  }\n}\n\nconst VideoElement = ({ attributes, children, element }) => {\n  const editor = useEditor()\n  const { url } = element\n  return (\n    <div {...attributes}>\n      <div contentEditable={false}>\n        <div\n          style={{\n            padding: '75% 0 0 0',\n            position: 'relative',\n          }}\n        >\n          <iframe\n            src={`${url}?title=0&byline=0&portrait=0`}\n            frameBorder=\"0\"\n            style={{\n              position: 'absolute',\n              top: '0',\n              left: '0',\n              width: '100%',\n              height: '100%',\n            }}\n          />\n        </div>\n        <UrlInput\n          url={url}\n          onChange={val => {\n            const path = ReactEditor.findPath(editor, element)\n            Transforms.setNodes(editor, { url: val }, { at: path })\n          }}\n        />\n      </div>\n      {children}\n    </div>\n  )\n}\n\nconst UrlInput = ({ url, onChange }) => {\n  const [value, setValue] = React.useState(url)\n  return (\n    <input\n      value={value}\n      onClick={e => e.stopPropagation()}\n      style={{\n        marginTop: '5px',\n        boxSizing: 'border-box',\n      }}\n      onChange={e => {\n        const newUrl = e.target.value\n        setValue(newUrl)\n        onChange(newUrl)\n      }}\n    />\n  )\n}\n\nconst initialValue = [\n  {\n    children: [\n      {\n        text:\n          'In addition to simple image nodes, you can actually create complex embedded nodes. For example, this one contains an input element that lets you change the video being rendered!',\n      },\n    ],\n  },\n  {\n    type: 'video',\n    url: 'https://player.vimeo.com/video/26689853',\n    children: [{ text: '' }],\n  },\n  {\n    children: [\n      {\n        text:\n          'Try it out! This editor is built to handle Vimeo embeds, but you could handle any type.',\n      },\n    ],\n  },\n]\n\nexport default EmbedsExample\n"]},"metadata":{},"sourceType":"module"}