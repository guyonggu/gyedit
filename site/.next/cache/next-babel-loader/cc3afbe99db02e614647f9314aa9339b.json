{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/yonggu/WebstormProjects/gyedit/site/examples/links.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useMemo } from 'react';\nimport isUrl from 'is-url';\nimport { Slate, Editable, withReact, useSlate } from 'slate-react';\nimport { Transforms, Editor, Range, createEditor } from 'slate';\nimport { withHistory } from 'slate-history';\nimport { Button, Icon, Toolbar } from '../components';\n\nvar LinkExample = function LinkExample() {\n  _s();\n\n  var _useState = useState(initialValue),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var editor = useMemo(function () {\n    return withLinks(withHistory(withReact(createEditor())));\n  }, []);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: function onChange(value) {\n      return setValue(value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, __jsx(Toolbar, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }\n  }, __jsx(LinkButton, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  })), __jsx(Editable, {\n    renderElement: function renderElement(props) {\n      return __jsx(Element, _extends({}, props, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 33\n        }\n      }));\n    },\n    placeholder: \"Enter some text...\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(LinkExample, \"4ewp4wBHt4y6QUDh2ipfoCLaKxY=\");\n\n_c = LinkExample;\n\nvar withLinks = function withLinks(editor) {\n  var insertData = editor.insertData,\n      insertText = editor.insertText,\n      isInline = editor.isInline;\n\n  editor.isInline = function (element) {\n    return element.type === 'link' ? true : isInline(element);\n  };\n\n  editor.insertText = function (text) {\n    if (text && isUrl(text)) {\n      wrapLink(editor, text);\n    } else {\n      insertText(text);\n    }\n  };\n\n  editor.insertData = function (data) {\n    var text = data.getData('text/plain');\n\n    if (text && isUrl(text)) {\n      wrapLink(editor, text);\n    } else {\n      insertData(data);\n    }\n  };\n\n  return editor;\n};\n\nvar insertLink = function insertLink(editor, url) {\n  if (editor.selection) {\n    wrapLink(editor, url);\n  }\n};\n\nvar isLinkActive = function isLinkActive(editor) {\n  var _Editor$nodes = Editor.nodes(editor, {\n    match: function match(n) {\n      return n.type === 'link';\n    }\n  }),\n      _Editor$nodes2 = _slicedToArray(_Editor$nodes, 1),\n      link = _Editor$nodes2[0];\n\n  return !!link;\n};\n\nvar unwrapLink = function unwrapLink(editor) {\n  Transforms.unwrapNodes(editor, {\n    match: function match(n) {\n      return n.type === 'link';\n    }\n  });\n};\n\nvar wrapLink = function wrapLink(editor, url) {\n  if (isLinkActive(editor)) {\n    unwrapLink(editor);\n  }\n\n  var selection = editor.selection;\n  var isCollapsed = selection && Range.isCollapsed(selection);\n  var link = {\n    type: 'link',\n    url: url,\n    children: isCollapsed ? [{\n      text: url\n    }] : []\n  };\n\n  if (isCollapsed) {\n    Transforms.insertNodes(editor, link);\n  } else {\n    Transforms.wrapNodes(editor, link, {\n      split: true\n    });\n    Transforms.collapse(editor, {\n      edge: 'end'\n    });\n  }\n};\n\nvar Element = function Element(_ref) {\n  var attributes = _ref.attributes,\n      children = _ref.children,\n      element = _ref.element;\n\n  switch (element.type) {\n    case 'link':\n      return __jsx(\"a\", _extends({}, attributes, {\n        href: element.url,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 9\n        }\n      }), children);\n\n    default:\n      return __jsx(\"p\", _extends({}, attributes, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 14\n        }\n      }), children);\n  }\n};\n\n_c2 = Element;\n\nvar LinkButton = function LinkButton() {\n  _s2();\n\n  var editor = useSlate();\n  return __jsx(Button, {\n    active: isLinkActive(editor),\n    onMouseDown: function onMouseDown(event) {\n      event.preventDefault();\n      var url = window.prompt('Enter the URL of the link:');\n      if (!url) return;\n      insertLink(editor, url);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }\n  }, __jsx(Icon, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }\n  }, \"link\"));\n};\n\n_s2(LinkButton, \"YMFVEh3YGumTkrWAgpqmxHJ20Oc=\", false, function () {\n  return [useSlate];\n});\n\n_c3 = LinkButton;\nvar initialValue = [{\n  children: [{\n    text: 'In addition to block nodes, you can create inline nodes, like '\n  }, {\n    type: 'link',\n    url: 'https://en.wikipedia.org/wiki/Hypertext',\n    children: [{\n      text: 'hyperlinks'\n    }]\n  }, {\n    text: '!'\n  }]\n}, {\n  children: [{\n    text: 'This example shows hyperlinks in action. It features two ways to add links. You can either add a link via the toolbar icon above, or if you want in on a little secret, copy a URL to your keyboard and paste it while a range of text is selected.'\n  }]\n}];\nexport default LinkExample;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"LinkExample\");\n$RefreshReg$(_c2, \"Element\");\n$RefreshReg$(_c3, \"LinkButton\");","map":{"version":3,"sources":["/Users/yonggu/WebstormProjects/gyedit/site/examples/links.tsx"],"names":["React","useState","useMemo","isUrl","Slate","Editable","withReact","useSlate","Transforms","Editor","Range","createEditor","withHistory","Button","Icon","Toolbar","LinkExample","initialValue","value","setValue","editor","withLinks","props","insertData","insertText","isInline","element","type","text","wrapLink","data","getData","insertLink","url","selection","isLinkActive","nodes","match","n","link","unwrapLink","unwrapNodes","isCollapsed","children","insertNodes","wrapNodes","split","collapse","edge","Element","attributes","LinkButton","event","preventDefault","window","prompt"],"mappings":"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","sourcesContent":["import React, { useState, useMemo } from 'react'\nimport isUrl from 'is-url'\nimport { Slate, Editable, withReact, useSlate } from 'slate-react'\nimport { Node, Transforms, Editor, Range, createEditor } from 'slate'\nimport { withHistory } from 'slate-history'\n\nimport { Button, Icon, Toolbar } from '../components'\n\nconst LinkExample = () => {\n  const [value, setValue] = useState<Node[]>(initialValue)\n  const editor = useMemo(\n    () => withLinks(withHistory(withReact(createEditor()))),\n    []\n  )\n\n  return (\n    <Slate editor={editor} value={value} onChange={value => setValue(value)}>\n      <Toolbar>\n        <LinkButton />\n      </Toolbar>\n      <Editable\n        renderElement={props => <Element {...props} />}\n        placeholder=\"Enter some text...\"\n      />\n    </Slate>\n  )\n}\n\nconst withLinks = editor => {\n  const { insertData, insertText, isInline } = editor\n\n  editor.isInline = element => {\n    return element.type === 'link' ? true : isInline(element)\n  }\n\n  editor.insertText = text => {\n    if (text && isUrl(text)) {\n      wrapLink(editor, text)\n    } else {\n      insertText(text)\n    }\n  }\n\n  editor.insertData = data => {\n    const text = data.getData('text/plain')\n\n    if (text && isUrl(text)) {\n      wrapLink(editor, text)\n    } else {\n      insertData(data)\n    }\n  }\n\n  return editor\n}\n\nconst insertLink = (editor, url) => {\n  if (editor.selection) {\n    wrapLink(editor, url)\n  }\n}\n\nconst isLinkActive = editor => {\n  const [link] = Editor.nodes(editor, { match: n => n.type === 'link' })\n  return !!link\n}\n\nconst unwrapLink = editor => {\n  Transforms.unwrapNodes(editor, { match: n => n.type === 'link' })\n}\n\nconst wrapLink = (editor, url) => {\n  if (isLinkActive(editor)) {\n    unwrapLink(editor)\n  }\n\n  const { selection } = editor\n  const isCollapsed = selection && Range.isCollapsed(selection)\n  const link = {\n    type: 'link',\n    url,\n    children: isCollapsed ? [{ text: url }] : [],\n  }\n\n  if (isCollapsed) {\n    Transforms.insertNodes(editor, link)\n  } else {\n    Transforms.wrapNodes(editor, link, { split: true })\n    Transforms.collapse(editor, { edge: 'end' })\n  }\n}\n\nconst Element = ({ attributes, children, element }) => {\n  switch (element.type) {\n    case 'link':\n      return (\n        <a {...attributes} href={element.url}>\n          {children}\n        </a>\n      )\n    default:\n      return <p {...attributes}>{children}</p>\n  }\n}\n\nconst LinkButton = () => {\n  const editor = useSlate()\n  return (\n    <Button\n      active={isLinkActive(editor)}\n      onMouseDown={event => {\n        event.preventDefault()\n        const url = window.prompt('Enter the URL of the link:')\n        if (!url) return\n        insertLink(editor, url)\n      }}\n    >\n      <Icon>link</Icon>\n    </Button>\n  )\n}\n\nconst initialValue = [\n  {\n    children: [\n      {\n        text: 'In addition to block nodes, you can create inline nodes, like ',\n      },\n      {\n        type: 'link',\n        url: 'https://en.wikipedia.org/wiki/Hypertext',\n        children: [{ text: 'hyperlinks' }],\n      },\n      {\n        text: '!',\n      },\n    ],\n  },\n  {\n    children: [\n      {\n        text:\n          'This example shows hyperlinks in action. It features two ways to add links. You can either add a link via the toolbar icon above, or if you want in on a little secret, copy a URL to your keyboard and paste it while a range of text is selected.',\n      },\n    ],\n  },\n]\n\nexport default LinkExample\n"]},"metadata":{},"sourceType":"module"}