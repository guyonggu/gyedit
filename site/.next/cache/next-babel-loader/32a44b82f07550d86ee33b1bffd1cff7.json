{"ast":null,"code":"var _jsxFileName = \"/Users/yonggu/WebstormProjects/gyedit/site/examples/check-lists.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState, useMemo, useCallback } from 'react';\nimport { Slate, Editable, withReact, useEditor, useReadOnly, ReactEditor } from 'slate-react';\nimport { Editor, Transforms, Range, Point, createEditor } from 'slate';\nimport { css } from 'emotion';\nimport { withHistory } from 'slate-history';\n\nconst CheckListsExample = () => {\n  const {\n    0: value,\n    1: setValue\n  } = useState(initialValue);\n  const renderElement = useCallback(props => __jsx(Element, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 46\n    }\n  })), []);\n  const editor = useMemo(() => withChecklists(withHistory(withReact(createEditor()))), []);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: value => setValue(value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, __jsx(Editable, {\n    renderElement: renderElement,\n    placeholder: \"Get to work\\u2026\",\n    spellCheck: true,\n    autoFocus: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst withChecklists = editor => {\n  const {\n    deleteBackward\n  } = editor;\n\n  editor.deleteBackward = (...args) => {\n    const {\n      selection\n    } = editor;\n\n    if (selection && Range.isCollapsed(selection)) {\n      const [match] = Editor.nodes(editor, {\n        match: n => n.type === 'check-list-item'\n      });\n\n      if (match) {\n        const [, path] = match;\n        const start = Editor.start(editor, path);\n\n        if (Point.equals(selection.anchor, start)) {\n          Transforms.setNodes(editor, {\n            type: 'paragraph'\n          }, {\n            match: n => n.type === 'check-list-item'\n          });\n          return;\n        }\n      }\n    }\n\n    deleteBackward(...args);\n  };\n\n  return editor;\n};\n\nconst Element = props => {\n  const {\n    attributes,\n    children,\n    element\n  } = props;\n\n  switch (element.type) {\n    case 'check-list-item':\n      return __jsx(CheckListItemElement, _extends({}, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 14\n        }\n      }));\n\n    default:\n      return __jsx(\"p\", _extends({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 14\n        }\n      }), children);\n  }\n};\n\nconst CheckListItemElement = ({\n  attributes,\n  children,\n  element\n}) => {\n  const editor = useEditor();\n  const readOnly = useReadOnly();\n  const {\n    checked\n  } = element;\n  return __jsx(\"div\", _extends({}, attributes, {\n    className: css`\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n\n        & + & {\n          margin-top: 0;\n        }\n      `,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }), __jsx(\"span\", {\n    contentEditable: false,\n    className: css`\n          margin-right: 0.75em;\n        `,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, __jsx(\"input\", {\n    type: \"checkbox\",\n    checked: checked,\n    onChange: event => {\n      const path = ReactEditor.findPath(editor, element);\n      Transforms.setNodes(editor, {\n        checked: event.target.checked\n      }, {\n        at: path\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  })), __jsx(\"span\", {\n    contentEditable: !readOnly,\n    suppressContentEditableWarning: true,\n    className: css`\n          flex: 1;\n          opacity: ${checked ? 0.666 : 1};\n          text-decoration: ${checked ? 'none' : 'line-through'};\n\n          &:focus {\n            outline: none;\n          }\n        `,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, children));\n};\n\nconst initialValue = [{\n  children: [{\n    text: 'With Slate you can build complex block types that have their own embedded content and behaviors, like rendering checkboxes inside check list items!'\n  }]\n}, {\n  type: 'check-list-item',\n  checked: true,\n  children: [{\n    text: 'Slide to the left.'\n  }]\n}, {\n  type: 'check-list-item',\n  checked: true,\n  children: [{\n    text: 'Slide to the right.'\n  }]\n}, {\n  type: 'check-list-item',\n  checked: false,\n  children: [{\n    text: 'Criss-cross.'\n  }]\n}, {\n  type: 'check-list-item',\n  checked: true,\n  children: [{\n    text: 'Criss-cross!'\n  }]\n}, {\n  type: 'check-list-item',\n  checked: false,\n  children: [{\n    text: 'Cha cha real smoothâ€¦'\n  }]\n}, {\n  type: 'check-list-item',\n  checked: false,\n  children: [{\n    text: \"Let's go to work!\"\n  }]\n}, {\n  children: [{\n    text: 'Try it out for yourself!'\n  }]\n}];\nexport default CheckListsExample;","map":{"version":3,"sources":["/Users/yonggu/WebstormProjects/gyedit/site/examples/check-lists.tsx"],"names":["React","useState","useMemo","useCallback","Slate","Editable","withReact","useEditor","useReadOnly","ReactEditor","Editor","Transforms","Range","Point","createEditor","css","withHistory","CheckListsExample","value","setValue","initialValue","renderElement","props","editor","withChecklists","deleteBackward","args","selection","isCollapsed","match","nodes","n","type","path","start","equals","anchor","setNodes","Element","attributes","children","element","CheckListItemElement","readOnly","checked","event","findPath","target","at","text"],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useCallback } from 'react'\nimport {\n  Slate,\n  Editable,\n  withReact,\n  useEditor,\n  useReadOnly,\n  ReactEditor,\n} from 'slate-react'\nimport { Node, Editor, Transforms, Range, Point, createEditor } from 'slate'\nimport { css } from 'emotion'\nimport { withHistory } from 'slate-history'\n\nconst CheckListsExample = () => {\n  const [value, setValue] = useState<Node[]>(initialValue)\n  const renderElement = useCallback(props => <Element {...props} />, [])\n  const editor = useMemo(\n    () => withChecklists(withHistory(withReact(createEditor()))),\n    []\n  )\n\n  return (\n    <Slate editor={editor} value={value} onChange={value => setValue(value)}>\n      <Editable\n        renderElement={renderElement}\n        placeholder=\"Get to workâ€¦\"\n        spellCheck\n        autoFocus\n      />\n    </Slate>\n  )\n}\n\nconst withChecklists = editor => {\n  const { deleteBackward } = editor\n\n  editor.deleteBackward = (...args) => {\n    const { selection } = editor\n\n    if (selection && Range.isCollapsed(selection)) {\n      const [match] = Editor.nodes(editor, {\n        match: n => n.type === 'check-list-item',\n      })\n\n      if (match) {\n        const [, path] = match\n        const start = Editor.start(editor, path)\n\n        if (Point.equals(selection.anchor, start)) {\n          Transforms.setNodes(\n            editor,\n            { type: 'paragraph' },\n            { match: n => n.type === 'check-list-item' }\n          )\n          return\n        }\n      }\n    }\n\n    deleteBackward(...args)\n  }\n\n  return editor\n}\n\nconst Element = props => {\n  const { attributes, children, element } = props\n\n  switch (element.type) {\n    case 'check-list-item':\n      return <CheckListItemElement {...props} />\n    default:\n      return <p {...attributes}>{children}</p>\n  }\n}\n\nconst CheckListItemElement = ({ attributes, children, element }) => {\n  const editor = useEditor()\n  const readOnly = useReadOnly()\n  const { checked } = element\n  return (\n    <div\n      {...attributes}\n      className={css`\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n\n        & + & {\n          margin-top: 0;\n        }\n      `}\n    >\n      <span\n        contentEditable={false}\n        className={css`\n          margin-right: 0.75em;\n        `}\n      >\n        <input\n          type=\"checkbox\"\n          checked={checked}\n          onChange={event => {\n            const path = ReactEditor.findPath(editor, element)\n            Transforms.setNodes(\n              editor,\n              { checked: event.target.checked },\n              { at: path }\n            )\n          }}\n        />\n      </span>\n      <span\n        contentEditable={!readOnly}\n        suppressContentEditableWarning\n        className={css`\n          flex: 1;\n          opacity: ${checked ? 0.666 : 1};\n          text-decoration: ${checked ? 'none' : 'line-through'};\n\n          &:focus {\n            outline: none;\n          }\n        `}\n      >\n        {children}\n      </span>\n    </div>\n  )\n}\n\nconst initialValue = [\n  {\n    children: [\n      {\n        text:\n          'With Slate you can build complex block types that have their own embedded content and behaviors, like rendering checkboxes inside check list items!',\n      },\n    ],\n  },\n  {\n    type: 'check-list-item',\n    checked: true,\n    children: [{ text: 'Slide to the left.' }],\n  },\n  {\n    type: 'check-list-item',\n    checked: true,\n    children: [{ text: 'Slide to the right.' }],\n  },\n  {\n    type: 'check-list-item',\n    checked: false,\n    children: [{ text: 'Criss-cross.' }],\n  },\n  {\n    type: 'check-list-item',\n    checked: true,\n    children: [{ text: 'Criss-cross!' }],\n  },\n  {\n    type: 'check-list-item',\n    checked: false,\n    children: [{ text: 'Cha cha real smoothâ€¦' }],\n  },\n  {\n    type: 'check-list-item',\n    checked: false,\n    children: [{ text: \"Let's go to work!\" }],\n  },\n  {\n    children: [{ text: 'Try it out for yourself!' }],\n  },\n]\n\nexport default CheckListsExample\n"]},"metadata":{},"sourceType":"module"}