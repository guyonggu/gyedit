{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { Editor, Point, Range, Transforms } from \"slate\";\nimport { BlockType } from './types';\nvar SHORTCUTS = {\n  '*': 'ul-item',\n  '-': 'ul-item',\n  '+': 'ul-item',\n  '>': 'block-quote',\n  '#': 'heading-one',\n  '##': 'heading-two',\n  '###': 'heading-three',\n  '####': 'heading-four',\n  '#####': 'heading-five',\n  '######': 'heading-six'\n};\nexport var withMarkdown = function withMarkdown(editor) {\n  var deleteBackward = editor.deleteBackward,\n      insertText = editor.insertText,\n      insertBreak = editor.insertBreak;\n\n  editor.insertBreak = function () {\n    var handled = false;\n    var selection = editor.selection;\n\n    if (!selection || Range.isExpanded(selection)) {\n      insertBreak();\n      return;\n    }\n\n    var block = Editor.above(editor, {\n      match: function match(n) {\n        return Editor.isBlock(editor, n);\n      }\n    });\n\n    if (!block || Editor.isEditor(block[0])) {\n      insertBreak();\n      return;\n    }\n\n    var parent = Editor.parent(editor, block[1]);\n\n    if (!parent) {\n      insertBreak();\n      return;\n    }\n\n    var beforeText = beforeTextInBlock(editor);\n\n    if (beforeText) {\n      insertBreak();\n      return;\n    }\n\n    var blockPath = block[1];\n    Transforms.setNodes(editor, {\n      type: 'paragraph'\n    }, {\n      at: blockPath\n    }); // if it is the last child\n\n    if (blockPath[blockPath.length - 1] === parent[0].children.length - 1) {\n      Transforms.liftNodes(editor, {\n        at: blockPath\n      });\n      return;\n    }\n  };\n\n  editor.insertText = function (text) {\n    var selection = editor.selection;\n\n    if (text !== ' ' || !selection || !Range.isCollapsed(selection)) {\n      insertText(text);\n      return;\n    }\n\n    var anchor = selection.anchor;\n    var block = Editor.above(editor, {\n      match: function match(n) {\n        return Editor.isBlock(editor, n);\n      }\n    });\n    var path = block ? block[1] : [];\n    var start = Editor.start(editor, path);\n    var range = {\n      anchor: anchor,\n      focus: start\n    };\n    var beforeText = Editor.string(editor, range);\n    var tabs = 0;\n\n    var _iterator = _createForOfIteratorHelper(beforeText),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var c = _step.value;\n\n        if (c === '\\t') {\n          tabs++;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    beforeText = beforeText.substr(tabs);\n    var blockType = block[0].type;\n    var inList = typeof blockType === 'string' ? blockType === 'list-item' : false;\n\n    if (text === ' ') {\n      var type = SHORTCUTS[beforeText];\n\n      if (!type && /^[1-9]\\d*\\./.test(beforeText)) {\n        type = 'ol-item';\n      }\n\n      var list;\n\n      switch (type) {\n        case 'ul-item':\n          if (inList) break;\n          Transforms.select(editor, range);\n          Transforms[\"delete\"](editor);\n          Transforms.setNodes(editor, {\n            type: 'list-item'\n          }, {\n            match: function match(n) {\n              return Editor.isBlock(editor, n);\n            }\n          });\n          list = {\n            type: BlockType[\"bulleted-list\"],\n            indent: tabs + 1,\n            children: []\n          };\n          Transforms.wrapNodes(editor, list, {\n            match: function match(n) {\n              return n.type === 'list-item';\n            }\n          });\n          break;\n\n        case 'ol-item':\n          if (inList) break;\n          var found = beforeText.match(/^([\\t]*)\\d+\\./);\n          Transforms.select(editor, range);\n          Transforms[\"delete\"](editor);\n          Transforms.setNodes(editor, {\n            type: 'list-item'\n          }, {\n            match: function match(n) {\n              return Editor.isBlock(editor, n);\n            }\n          });\n          list = {\n            type: 'numbered-list',\n            indent: tabs + 1,\n            children: []\n          };\n          Transforms.wrapNodes(editor, list, {\n            match: function match(n) {\n              return n.type === 'list-item';\n            }\n          });\n          break;\n\n        default:\n          insertText(text);\n      }\n\n      return;\n    } else if (text === '\\t' && inList && beforeText === '') {\n      var _ref = Editor.parent(editor, path),\n          _ref2 = _slicedToArray(_ref, 1),\n          listNode = _ref2[0];\n\n      console.log(listNode.type);\n\n      if (listNode.type === 'bulleted-list' || listNode.type === 'numbered-list') {\n        listNode.indent++;\n      }\n\n      Transforms.select(editor, path);\n      return;\n    }\n\n    insertText(text);\n  };\n\n  editor.deleteBackward = function () {\n    var selection = editor.selection;\n\n    if (selection && Range.isCollapsed(selection)) {\n      var match = Editor.above(editor, {\n        match: function match(n) {\n          return Editor.isBlock(editor, n);\n        }\n      });\n\n      if (match) {\n        var _match = _slicedToArray(match, 2),\n            block = _match[0],\n            path = _match[1];\n\n        var start = Editor.start(editor, path);\n\n        if (block.type !== 'paragraph' && Point.equals(selection.anchor, start)) {\n          if (block.type === 'list-item') {\n            var parent = Editor.parent(editor, path);\n            var listNode = parent[0];\n\n            if (listNode && listNode.indent > 1) {\n              Transforms.setNodes(editor, {\n                indent: listNode.indent - 1\n              }, {\n                at: parent[1]\n              });\n            } else {\n              Transforms.setNodes(editor, {\n                type: 'paragraph'\n              });\n              Transforms.unwrapNodes(editor, {\n                match: function match(n) {\n                  return n.type === 'bulleted-list';\n                },\n                split: true\n              });\n            }\n          } else {\n            Transforms.setNodes(editor, {\n              type: 'paragraph'\n            });\n          }\n\n          return;\n        }\n      }\n\n      deleteBackward.apply(void 0, arguments);\n    }\n  };\n\n  return editor;\n};\n\nvar beforeTextInBlock = function beforeTextInBlock(editor) {\n  var selection = editor.selection;\n\n  if (!selection) {\n    return '';\n  }\n\n  var block = Editor.above(editor, {\n    match: function match(n) {\n      return Editor.isBlock(editor, n);\n    }\n  });\n  var path = block ? block[1] : [];\n  var start = Editor.start(editor, path);\n  var range = {\n    anchor: Range.start(editor.selection),\n    focus: start\n  };\n  var beforeText = Editor.string(editor, range);\n  return beforeText;\n};","map":{"version":3,"sources":["/Users/yonggu/WebstormProjects/gyedit/src/withMarkdown.ts"],"names":["Editor","Point","Range","Transforms","BlockType","SHORTCUTS","withMarkdown","editor","deleteBackward","insertText","insertBreak","handled","selection","isExpanded","block","above","match","n","isBlock","isEditor","parent","beforeText","beforeTextInBlock","blockPath","setNodes","type","at","length","children","liftNodes","text","isCollapsed","anchor","path","start","range","focus","string","tabs","c","substr","blockType","inList","test","list","select","indent","wrapNodes","found","listNode","console","log","equals","unwrapNodes","split"],"mappings":"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","sourcesContent":["import {Editor, Path, Point, Range, Transforms} from \"slate\";\nimport { BlockType } from './types'\n\nconst SHORTCUTS = {\n    '*': 'ul-item',\n    '-': 'ul-item',\n    '+': 'ul-item',\n    '>': 'block-quote',\n    '#': 'heading-one',\n    '##': 'heading-two',\n    '###': 'heading-three',\n    '####': 'heading-four',\n    '#####': 'heading-five',\n    '######': 'heading-six',\n}\n\nexport const withMarkdown = (editor: Editor) => {\n    const {deleteBackward, insertText, insertBreak} = editor\n\n    editor.insertBreak = () => {\n        let handled = false\n        const {selection} = editor\n\n        if (!selection || Range.isExpanded(selection)) {\n            insertBreak()\n            return\n        }\n        const block = Editor.above(editor, {\n            match: n => Editor.isBlock(editor, n),\n        })\n        if (!block || Editor.isEditor(block[0])) {\n            insertBreak()\n            return\n        }\n        const parent = Editor.parent(editor, block[1])\n        if (!parent){\n            insertBreak()\n            return\n        }\n        const beforeText = beforeTextInBlock(editor)\n        if (beforeText) {\n            insertBreak()\n            return\n        }\n        const blockPath:Path = block[1]\n\n        Transforms.setNodes(editor, {type: 'paragraph'}, {at:blockPath})\n        // if it is the last child\n        if (blockPath[blockPath.length - 1] === parent[0].children.length - 1){\n            Transforms.liftNodes(editor, {at:blockPath})\n            return\n        }\n    }\n\n    editor.insertText = (text: string) => {\n        const {selection} = editor\n        if ((text !== ' ') || !selection || !Range.isCollapsed(selection)) {\n            insertText(text)\n            return\n        }\n\n        const {anchor} = selection\n        const block = Editor.above(editor, {\n            match: n => Editor.isBlock(editor, n),\n        })\n        const path = block ? block[1] : []\n        const start = Editor.start(editor, path)\n        const range = {anchor, focus: start}\n        let beforeText = Editor.string(editor, range)\n        let tabs = 0\n        for (let c of beforeText) {\n            if (c === '\\t') {\n                tabs++\n            }\n        }\n        beforeText = beforeText.substr(tabs)\n        const blockType = block![0].type\n        let inList = typeof blockType === 'string' ? blockType === 'list-item' : false\n\n        if (text === ' ') {\n\n            let type = SHORTCUTS[beforeText]\n\n            if (!type && /^[1-9]\\d*\\./.test(beforeText)) {\n                type = 'ol-item'\n            }\n            let list\n            switch (type) {\n                case 'ul-item':\n                    if (inList) break\n                    Transforms.select(editor, range)\n                    Transforms.delete(editor)\n                    Transforms.setNodes(\n                        editor,\n                        {type: 'list-item'},\n                        {match: n => Editor.isBlock(editor, n)}\n                    )\n                    list = {type: BlockType[\"bulleted-list\"], indent: tabs + 1, children: []}\n                    Transforms.wrapNodes(editor, list, {\n                        match: n => n.type === 'list-item',\n                    })\n                    break\n                case 'ol-item':\n                    if (inList) break\n                    const found = beforeText.match(/^([\\t]*)\\d+\\./)\n                    Transforms.select(editor, range)\n                    Transforms.delete(editor)\n                    Transforms.setNodes(\n                        editor,\n                        {type: 'list-item'},\n                        {match: n => Editor.isBlock(editor, n)}\n                    )\n                    list = {type: 'numbered-list', indent: tabs + 1, children: []}\n                    Transforms.wrapNodes(editor, list, {\n                        match: n => n.type === 'list-item',\n                    })\n                    break\n                default:\n                    insertText(text)\n            }\n            return\n        } else if (text === '\\t' && inList && beforeText === '') {\n            const [listNode] = Editor.parent(editor, path) as ListNodeEntry\n            console.log(listNode.type)\n            if (listNode.type === 'bulleted-list' || listNode.type === 'numbered-list') {\n                listNode.indent++\n            }\n            Transforms.select(editor, path)\n            return\n        }\n\n        insertText(text)\n    }\n\n    editor.deleteBackward = (...args) => {\n        const {selection} = editor\n\n        if (selection && Range.isCollapsed(selection)) {\n            const match = Editor.above(editor, {\n                match: n => Editor.isBlock(editor, n),\n            })\n\n            if (match) {\n                const [block, path] = match\n                const start = Editor.start(editor, path)\n\n                if (\n                    block.type !== 'paragraph' &&\n                    Point.equals(selection.anchor, start)\n                ) {\n                    if (block.type === 'list-item') {\n                        const parent = Editor.parent(editor, path)\n                        const listNode = parent[0] as ListNode\n                        if (listNode && (listNode.indent > 1)) {\n                            Transforms.setNodes(editor, {indent: listNode.indent - 1}, {at: parent[1]})\n                        } else {\n                            Transforms.setNodes(editor, {type: 'paragraph'})\n                            Transforms.unwrapNodes(editor, {\n                                match: n => n.type === 'bulleted-list',\n                                split: true,\n                            })\n                        }\n                    } else {\n                        Transforms.setNodes(editor, {type: 'paragraph'})\n                    }\n\n                    return\n                }\n            }\n\n            deleteBackward(...args)\n        }\n    }\n\n    return editor\n}\n\nconst beforeTextInBlock = (editor: Editor): string => {\n    const {selection} = editor\n    if (!selection) {\n        return ''\n    }\n    const block = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n    })\n    const path = block ? block[1] : []\n    const start = Editor.start(editor, path)\n    const range = {anchor: Range.start(editor.selection!), focus: start}\n    let beforeText = Editor.string(editor, range)\n    return beforeText\n}"]},"metadata":{},"sourceType":"module"}