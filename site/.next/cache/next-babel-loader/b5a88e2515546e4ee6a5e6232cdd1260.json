{"ast":null,"code":"import { Editor, Range, Path, Transforms } from 'slate';\nimport { fixList } from \"./util\";\nexport var onKeyDown = function onKeyDown() {\n  return function (e, editor) {\n    var selection = editor.selection;\n    if (!selection) return;\n\n    if (e.key === 'Tab') {\n      e.preventDefault();\n      onTab(editor); // Editor.insertText(editor,'\\t')\n    }\n  };\n};\nexport var onTab = function onTab(editor) {\n  Editor.withoutNormalizing(editor, function () {\n    var selection = editor.selection;\n    var entry = Editor.above(editor, {\n      match: function match(n) {\n        return Editor.isBlock(editor, n);\n      }\n    });\n\n    if (!entry) {\n      return;\n    }\n\n    if (entry[0].type == 'list-item') {\n      if (Range.isCollapsed(selection)) {\n        var path = entry[1];\n        var start = Editor.start(editor, path);\n        var range = {\n          anchor: selection.anchor,\n          focus: start\n        };\n        var beforeText = Editor.string(editor, range);\n\n        if (beforeText.length) {\n          Editor.insertText(editor, '    ');\n          return;\n        }\n      } // // move down with tab\n      // const tab = !e.shiftKey;\n      // if (tab) {\n\n\n      moveListItemDown(editor, entry[1]);\n      fixList(editor); // }\n    } else {\n      var p = selection.anchor;\n\n      if (Range.isExpanded(selection)) {\n        p = Editor.start(editor, p.path);\n      }\n\n      var ref = Editor.rangeRef(editor, selection);\n      Transforms.select(editor, p);\n      Editor.insertText(editor, '    ');\n      Transforms.select(editor, ref.unref());\n    }\n  });\n};\n\nfunction moveListItemDown(editor, path) {\n  var entry = Editor.parent(editor, path);\n  var node = entry[0];\n\n  if (!node.type.endsWith('-list')) {\n    throw new Error(\"moveListItemDown, not a list at: \".concat(entry[1]));\n  }\n\n  var ref = Editor.pathRef(editor, path);\n  var pre = Editor.previous(editor, {\n    at: path\n  });\n  var next = Editor.next(editor, {\n    at: path\n  });\n\n  if (pre) {\n    Transforms.splitNodes(editor, {\n      at: path\n    });\n  }\n\n  if (next) {\n    Transforms.splitNodes(editor, {\n      at: Path.next(ref.current)\n    });\n  }\n\n  path = ref.unref();\n  var indent = node.indent ? node.indent + 1 : 1;\n  Transforms.setNodes(editor, {\n    indent: indent\n  }, {\n    at: Path.parent(path)\n  });\n}","map":null,"metadata":{},"sourceType":"module"}