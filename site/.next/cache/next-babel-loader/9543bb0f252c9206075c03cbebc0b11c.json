{"ast":null,"code":"var _jsxFileName = \"/Users/yonggu/WebstormProjects/gyedit/site/examples/gyedit.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useCallback, useMemo, useState } from 'react';\nimport isHotkey from 'is-hotkey';\nimport { Editable, withReact, useSlate, Slate } from 'slate-react';\nimport { Editor, Transforms, createEditor } from 'slate';\nimport { withHistory } from 'slate-history';\nimport { Button, Icon, Toolbar } from '../components';\nimport { withMarkdown, Element, Leaf } from '../../src/';\nconst HOTKEYS = {\n  'mod+b': 'bold',\n  'mod+i': 'italic',\n  'mod+u': 'underline',\n  'mod+`': 'code'\n};\nconst LIST_TYPES = ['numbered-list', 'bulleted-list'];\n\nconst GYEdit = () => {\n  const {\n    0: value,\n    1: setValue\n  } = useState(initialValue);\n  const editor = useMemo(() => withMarkdown(withHistory(withReact(createEditor()))), []);\n  const renderElement = useCallback(props => __jsx(Element, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 48\n    }\n  })), []);\n  const renderLeaf = useCallback(props => __jsx(Leaf, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 45\n    }\n  })), []);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: value => setValue(value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, __jsx(Toolbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  }, __jsx(MarkButton, {\n    format: \"bold\",\n    icon: \"format_bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 17\n    }\n  }), __jsx(MarkButton, {\n    format: \"italic\",\n    icon: \"format_italic\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 17\n    }\n  }), __jsx(MarkButton, {\n    format: \"underline\",\n    icon: \"format_underlined\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 17\n    }\n  }), __jsx(MarkButton, {\n    format: \"code\",\n    icon: \"code\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }\n  }), __jsx(BlockButton, {\n    format: \"heading-one\",\n    icon: \"looks_one\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }\n  }), __jsx(BlockButton, {\n    format: \"heading-two\",\n    icon: \"looks_two\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 17\n    }\n  }), __jsx(BlockButton, {\n    format: \"block-quote\",\n    icon: \"format_quote\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 17\n    }\n  }), __jsx(BlockButton, {\n    format: \"numbered-list\",\n    icon: \"format_list_numbered\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }\n  }), __jsx(BlockButton, {\n    format: \"bulleted-list\",\n    icon: \"format_list_bulleted\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }\n  })), __jsx(Editable, {\n    renderElement: renderElement,\n    renderLeaf: renderLeaf,\n    placeholder: \"Enter some rich text\\u2026\",\n    spellCheck: true,\n    autoFocus: true,\n    onKeyDown: event => {\n      for (const hotkey in HOTKEYS) {\n        if (isHotkey(hotkey, event)) {\n          event.preventDefault();\n          const mark = HOTKEYS[hotkey];\n          toggleMark(editor, mark);\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }));\n};\n\nconst toggleBlock = (editor, format) => {\n  const isActive = isBlockActive(editor, format);\n  const isList = LIST_TYPES.includes(format);\n  Transforms.unwrapNodes(editor, {\n    match: n => LIST_TYPES.includes(n.type),\n    split: true\n  });\n  Transforms.setNodes(editor, {\n    type: isActive ? 'paragraph' : isList ? 'list-item' : format\n  });\n\n  if (!isActive && isList) {\n    const block = {\n      type: format,\n      children: []\n    };\n    Transforms.wrapNodes(editor, block);\n  }\n};\n\nconst toggleMark = (editor, format) => {\n  const isActive = isMarkActive(editor, format);\n\n  if (isActive) {\n    Editor.removeMark(editor, format);\n  } else {\n    Editor.addMark(editor, format, true);\n  }\n};\n\nconst isBlockActive = (editor, format) => {\n  const [match] = Editor.nodes(editor, {\n    match: n => n.type === format\n  });\n  return !!match;\n};\n\nconst isMarkActive = (editor, format) => {\n  const marks = Editor.marks(editor);\n  return marks ? marks[format] === true : false;\n};\n\nconst BlockButton = ({\n  format,\n  icon\n}) => {\n  const editor = useSlate();\n  return __jsx(Button, {\n    active: isBlockActive(editor, format),\n    onMouseDown: event => {\n      event.preventDefault();\n      toggleBlock(editor, format);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, __jsx(Icon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }\n  }, icon));\n};\n\nconst MarkButton = ({\n  format,\n  icon\n}) => {\n  const editor = useSlate();\n  return __jsx(Button, {\n    active: isMarkActive(editor, format),\n    onMouseDown: event => {\n      event.preventDefault();\n      toggleMark(editor, format);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, __jsx(Icon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }, icon));\n};\n\nconst initialValue = [{\n  type: 'paragraph',\n  children: [{\n    text: 'This is editable '\n  }, {\n    text: 'rich',\n    bold: true\n  }, {\n    text: ' text, '\n  }, {\n    text: 'much',\n    italic: true\n  }, {\n    text: ' better than a '\n  }, {\n    text: '<textarea>',\n    code: true\n  }, {\n    text: '!'\n  }]\n}, {\n  type: 'paragraph',\n  children: [{\n    text: \"Since it's rich text, you can do things like turn a selection of text \"\n  }, {\n    text: 'bold',\n    bold: true\n  }, {\n    text: ', or add a semantically rendered block quote in the middle of the page, like this:'\n  }]\n}, {\n  type: 'block-quote',\n  children: [{\n    text: 'A wise quote.'\n  }]\n}, {\n  type: 'paragraph',\n  children: [{\n    text: 'Try it out for yourself!'\n  }]\n}];\nexport default GYEdit;","map":{"version":3,"sources":["/Users/yonggu/WebstormProjects/gyedit/site/examples/gyedit.tsx"],"names":["React","useCallback","useMemo","useState","isHotkey","Editable","withReact","useSlate","Slate","Editor","Transforms","createEditor","withHistory","Button","Icon","Toolbar","withMarkdown","Element","Leaf","HOTKEYS","LIST_TYPES","GYEdit","value","setValue","initialValue","editor","renderElement","props","renderLeaf","event","hotkey","preventDefault","mark","toggleMark","toggleBlock","format","isActive","isBlockActive","isList","includes","unwrapNodes","match","n","type","split","setNodes","block","children","wrapNodes","isMarkActive","removeMark","addMark","nodes","marks","BlockButton","icon","MarkButton","text","bold","italic","code"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo, useState } from 'react'\nimport isHotkey from 'is-hotkey'\nimport { Editable, withReact, useSlate, Slate } from 'slate-react'\nimport { Editor, Transforms, createEditor, Node } from 'slate'\nimport { withHistory } from 'slate-history'\n\nimport { Button, Icon, Toolbar } from '../components'\nimport { withMarkdown, onKeyDownList, Element, Leaf } from '../../src/'\n\nconst HOTKEYS = {\n    'mod+b': 'bold',\n    'mod+i': 'italic',\n    'mod+u': 'underline',\n    'mod+`': 'code',\n}\n\nconst LIST_TYPES = ['numbered-list', 'bulleted-list']\n\nconst GYEdit = () => {\n    const [value, setValue] = useState<Node[]>(initialValue)\n    const editor = useMemo(() => withMarkdown(withHistory(withReact(createEditor()))), [])\n    const renderElement = useCallback(props => <Element {...props} />, [])\n    const renderLeaf = useCallback(props => <Leaf {...props} />, [])\n    return (\n        <Slate editor={editor} value={value} onChange={value => setValue(value)}>\n            <Toolbar>\n                <MarkButton format=\"bold\" icon=\"format_bold\" />\n                <MarkButton format=\"italic\" icon=\"format_italic\" />\n                <MarkButton format=\"underline\" icon=\"format_underlined\" />\n                <MarkButton format=\"code\" icon=\"code\" />\n                <BlockButton format=\"heading-one\" icon=\"looks_one\" />\n                <BlockButton format=\"heading-two\" icon=\"looks_two\" />\n                <BlockButton format=\"block-quote\" icon=\"format_quote\" />\n                <BlockButton format=\"numbered-list\" icon=\"format_list_numbered\" />\n                <BlockButton format=\"bulleted-list\" icon=\"format_list_bulleted\" />\n            </Toolbar>\n            <Editable\n                renderElement={renderElement}\n                renderLeaf={renderLeaf}\n                placeholder=\"Enter some rich text…\"\n                spellCheck\n                autoFocus\n                onKeyDown={event => {\n                    for (const hotkey in HOTKEYS) {\n                        if (isHotkey(hotkey, event as any)) {\n                            event.preventDefault()\n                            const mark = HOTKEYS[hotkey]\n                            toggleMark(editor, mark)\n                        }\n                    }\n                }}\n            />\n        </Slate>\n    )\n}\n\nconst toggleBlock = (editor, format) => {\n    const isActive = isBlockActive(editor, format)\n    const isList = LIST_TYPES.includes(format)\n\n    Transforms.unwrapNodes(editor, {\n        match: n => LIST_TYPES.includes(n.type as string),\n        split: true,\n    })\n\n    Transforms.setNodes(editor, {\n        type: isActive ? 'paragraph' : isList ? 'list-item' : format,\n    })\n\n    if (!isActive && isList) {\n        const block = { type: format, children: [] }\n        Transforms.wrapNodes(editor, block)\n    }\n}\n\nconst toggleMark = (editor, format) => {\n    const isActive = isMarkActive(editor, format)\n\n    if (isActive) {\n        Editor.removeMark(editor, format)\n    } else {\n        Editor.addMark(editor, format, true)\n    }\n}\n\nconst isBlockActive = (editor, format) => {\n    const [match] = Editor.nodes(editor, {\n        match: n => n.type === format,\n    })\n\n    return !!match\n}\n\nconst isMarkActive = (editor, format) => {\n    const marks = Editor.marks(editor)\n    return marks ? marks[format] === true : false\n}\n\n\n\nconst BlockButton = ({ format, icon }) => {\n    const editor = useSlate()\n    return (\n        <Button\n            active={isBlockActive(editor, format)}\n            onMouseDown={event => {\n                event.preventDefault()\n                toggleBlock(editor, format)\n            }}\n        >\n            <Icon>{icon}</Icon>\n        </Button>\n    )\n}\n\nconst MarkButton = ({ format, icon }) => {\n    const editor = useSlate()\n    return (\n        <Button\n            active={isMarkActive(editor, format)}\n            onMouseDown={event => {\n                event.preventDefault()\n                toggleMark(editor, format)\n            }}\n        >\n            <Icon>{icon}</Icon>\n        </Button>\n    )\n}\n\nconst initialValue = [\n    {\n        type: 'paragraph',\n        children: [\n            { text: 'This is editable ' },\n            { text: 'rich', bold: true },\n            { text: ' text, ' },\n            { text: 'much', italic: true },\n            { text: ' better than a ' },\n            { text: '<textarea>', code: true },\n            { text: '!' },\n        ],\n    },\n    {\n        type: 'paragraph',\n        children: [\n            {\n                text:\n                    \"Since it's rich text, you can do things like turn a selection of text \",\n            },\n            { text: 'bold', bold: true },\n            {\n                text:\n                    ', or add a semantically rendered block quote in the middle of the page, like this:',\n            },\n        ],\n    },\n    {\n        type: 'block-quote',\n        children: [{ text: 'A wise quote.' }],\n    },\n    {\n        type: 'paragraph',\n        children: [{ text: 'Try it out for yourself!' }],\n    },\n]\n\nexport default GYEdit\n"]},"metadata":{},"sourceType":"module"}