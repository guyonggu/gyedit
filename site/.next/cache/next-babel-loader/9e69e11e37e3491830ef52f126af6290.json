{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React from 'react';\nexport var Element = function Element(_ref) {\n  var attributes = _ref.attributes,\n      children = _ref.children,\n      element = _ref.element;\n\n  switch (element.type) {\n    case 'block-quote':\n      return __jsx(\"blockquote\", attributes, children);\n\n    case 'bulleted-list':\n      attributes['data-indent'] = element.indent;\n      return __jsx(\"ul\", _extends({\n        style: {\n          paddingLeft: \"calc(1em * \".concat(element.indent, \")\")\n        }\n      }, attributes), children);\n\n    case 'heading-one':\n      return __jsx(\"h1\", attributes, children);\n\n    case 'heading-two':\n      return __jsx(\"h2\", attributes, children);\n\n    case 'list-item':\n      return __jsx(\"li\", attributes, children);\n\n    case 'numbered-list':\n      attributes['data-indent'] = element.indent;\n      attributes.start = element.start;\n      return __jsx(\"ol\", _extends({\n        style: {\n          paddingLeft: \"calc(1em * \".concat(element.indent, \")\")\n        }\n      }, attributes), children);\n\n    default:\n      return __jsx(\"p\", _extends({\n        style: {\n          paddingLeft: \"calc(1em * \".concat(element.indent, \")\")\n        }\n      }, attributes), children);\n  }\n};\nexport var Leaf = function Leaf(_ref2) {\n  var attributes = _ref2.attributes,\n      children = _ref2.children,\n      leaf = _ref2.leaf;\n\n  if (leaf.bold) {\n    children = __jsx(\"strong\", null, children);\n  }\n\n  if (leaf.code) {\n    children = __jsx(\"code\", null, children);\n  }\n\n  if (leaf.italic) {\n    children = __jsx(\"em\", null, children);\n  }\n\n  if (leaf.underline) {\n    children = __jsx(\"u\", null, children);\n  }\n\n  return __jsx(\"span\", attributes, children);\n};","map":null,"metadata":{},"sourceType":"module"}