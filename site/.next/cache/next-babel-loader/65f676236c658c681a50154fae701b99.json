{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction _templateObject9() {\n  var data = _taggedTemplateLiteral([\"\\n            color: #dd4a68;\\n          \"]);\n\n  _templateObject9 = function _templateObject9() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject8() {\n  var data = _taggedTemplateLiteral([\"\\n            color: #690;\\n          \"]);\n\n  _templateObject8 = function _templateObject8() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject7() {\n  var data = _taggedTemplateLiteral([\"\\n            color: #999;\\n          \"]);\n\n  _templateObject7 = function _templateObject7() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\\n            color: #905;\\n          \"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n            color: #e90;\\n          \"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n            color: #07a;\\n          \"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n            color: #9a6e3a;\\n          \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n            color: slategray;\\n          \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n            font-family: monospace;\\n            background: hsla(0, 0%, 100%, .5);\\n\\n        \", \" \\n\\n        \", \"\\n        \", \"\\n        \", \"\\n        \", \"\\n        \", \"\\n        \", \"\\n        \", \"\\n        \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport Prism from 'prismjs';\nimport 'prismjs/components/prism-python';\nimport 'prismjs/components/prism-php';\nimport 'prismjs/components/prism-sql';\nimport 'prismjs/components/prism-java';\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { Slate, Editable, withReact } from 'slate-react';\nimport { Text, createEditor } from 'slate';\nimport { withHistory } from 'slate-history';\nimport { css } from 'emotion';\n\nvar CodeHighlightingExample = function CodeHighlightingExample() {\n  var _useState = useState(initialValue),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var _useState2 = useState('html'),\n      language = _useState2[0],\n      setLanguage = _useState2[1];\n\n  var renderLeaf = useCallback(function (props) {\n    return __jsx(Leaf, props);\n  }, []);\n  var editor = useMemo(function () {\n    return withHistory(withReact(createEditor()));\n  }, []); // decorate function depends on the language selected\n\n  var decorate = useCallback(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        node = _ref2[0],\n        path = _ref2[1];\n\n    var ranges = [];\n\n    if (!Text.isText(node)) {\n      return ranges;\n    }\n\n    var tokens = Prism.tokenize(node.text, Prism.languages[language]);\n    var start = 0;\n\n    var _iterator = _createForOfIteratorHelper(tokens),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var token = _step.value;\n        var length = getLength(token);\n        var end = start + length;\n\n        if (typeof token !== 'string') {\n          var _ranges$push;\n\n          ranges.push((_ranges$push = {}, _defineProperty(_ranges$push, token.type, true), _defineProperty(_ranges$push, \"anchor\", {\n            path: path,\n            offset: start\n          }), _defineProperty(_ranges$push, \"focus\", {\n            path: path,\n            offset: end\n          }), _ranges$push));\n        }\n\n        start = end;\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return ranges;\n  }, [language]);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: function onChange(value) {\n      return setValue(value);\n    }\n  }, __jsx(\"div\", {\n    contentEditable: false,\n    style: {\n      position: 'relative',\n      top: '5px',\n      right: '5px'\n    }\n  }, __jsx(\"h3\", null, \"Select a language\", __jsx(\"select\", {\n    value: language,\n    style: {\n      \"float\": 'right'\n    },\n    onChange: function onChange(e) {\n      return setLanguage(e.target.value);\n    }\n  }, __jsx(\"option\", {\n    value: \"js\"\n  }, \"JavaScript\"), __jsx(\"option\", {\n    value: \"css\"\n  }, \"CSS\"), __jsx(\"option\", {\n    value: \"html\"\n  }, \"HTML\"), __jsx(\"option\", {\n    value: \"python\"\n  }, \"Python\"), __jsx(\"option\", {\n    value: \"sql\"\n  }, \"SQL\"), __jsx(\"option\", {\n    value: \"java\"\n  }, \"Java\"), __jsx(\"option\", {\n    value: \"php\"\n  }, \"PHP\")))), __jsx(Editable, {\n    decorate: decorate,\n    renderLeaf: renderLeaf,\n    placeholder: \"Write some code...\"\n  }));\n};\n\nvar getLength = function getLength(token) {\n  if (typeof token === 'string') {\n    return token.length;\n  } else if (typeof token.content === 'string') {\n    return token.content.length;\n  } else {\n    return token.content.reduce(function (l, t) {\n      return l + getLength(t);\n    }, 0);\n  }\n}; // different token types, styles found on Prismjs website\n\n\nvar Leaf = function Leaf(_ref3) {\n  var attributes = _ref3.attributes,\n      children = _ref3.children,\n      leaf = _ref3.leaf;\n  return __jsx(\"span\", _extends({}, attributes, {\n    className: css(_templateObject(), leaf.comment && css(_templateObject2()), (leaf.operator || leaf.url) && css(_templateObject3()), leaf.keyword && css(_templateObject4()), (leaf.variable || leaf.regex) && css(_templateObject5()), (leaf.number || leaf[\"boolean\"] || leaf.tag || leaf.constant || leaf.symbol || leaf.attr - name || leaf.selector) && css(_templateObject6()), leaf.punctuation && css(_templateObject7()), (leaf.string || leaf[\"char\"]) && css(_templateObject8()), (leaf[\"function\"] || leaf[\"class\"] - name) && css(_templateObject9()))\n  }), children);\n};\n\nvar initialValue = [{\n  children: [{\n    text: '<h1>Hi!</h1>'\n  }]\n}]; // modifications and additions to prism library\n\nPrism.languages.python = Prism.languages.extend('python', {});\nPrism.languages.insertBefore('python', 'prolog', {\n  comment: {\n    pattern: /##[^\\n]*/,\n    alias: 'comment'\n  }\n});\nPrism.languages.javascript = Prism.languages.extend('javascript', {});\nPrism.languages.insertBefore('javascript', 'prolog', {\n  comment: {\n    pattern: /\\/\\/[^\\n]*/,\n    alias: 'comment'\n  }\n});\nPrism.languages.html = Prism.languages.extend('html', {});\nPrism.languages.insertBefore('html', 'prolog', {\n  comment: {\n    pattern: /<!--[^\\n]*-->/,\n    alias: 'comment'\n  }\n});\nPrism.languages.markdown = Prism.languages.extend('markup', {});\nPrism.languages.insertBefore('markdown', 'prolog', {\n  blockquote: {\n    pattern: /^>(?:[\\t ]*>)*/m,\n    alias: 'punctuation'\n  },\n  code: [{\n    pattern: /^(?: {4}|\\t).+/m,\n    alias: 'keyword'\n  }, {\n    pattern: /``.+?``|`[^`\\n]+`/,\n    alias: 'keyword'\n  }],\n  title: [{\n    pattern: /\\w+.*(?:\\r?\\n|\\r)(?:==+|--+)/,\n    alias: 'important',\n    inside: {\n      punctuation: /==+$|--+$/\n    }\n  }, {\n    pattern: /(^\\s*)#+.+/m,\n    lookbehind: !0,\n    alias: 'important',\n    inside: {\n      punctuation: /^#+|#+$/\n    }\n  }],\n  hr: {\n    pattern: /(^\\s*)([*-])([\\t ]*\\2){2,}(?=\\s*$)/m,\n    lookbehind: !0,\n    alias: 'punctuation'\n  },\n  list: {\n    pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n    lookbehind: !0,\n    alias: 'punctuation'\n  },\n  'url-reference': {\n    pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n    inside: {\n      variable: {\n        pattern: /^(!?\\[)[^\\]]+/,\n        lookbehind: !0\n      },\n      string: /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n      punctuation: /^[\\[\\]!:]|[<>]/\n    },\n    alias: 'url'\n  },\n  bold: {\n    pattern: /(^|[^\\\\])(\\*\\*|__)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind: !0,\n    inside: {\n      punctuation: /^\\*\\*|^__|\\*\\*$|__$/\n    }\n  },\n  italic: {\n    pattern: /(^|[^\\\\])([*_])(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind: !0,\n    inside: {\n      punctuation: /^[*_]|[*_]$/\n    }\n  },\n  url: {\n    pattern: /!?\\[[^\\]]+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[[^\\]\\n]*\\])/,\n    inside: {\n      variable: {\n        pattern: /(!?\\[)[^\\]]+(?=\\]$)/,\n        lookbehind: !0\n      },\n      string: {\n        pattern: /\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/\n      }\n    }\n  }\n});\nPrism.languages.markdown.bold.inside.url = Prism.util.clone(Prism.languages.markdown.url);\nPrism.languages.markdown.italic.inside.url = Prism.util.clone(Prism.languages.markdown.url);\nPrism.languages.markdown.bold.inside.italic = Prism.util.clone(Prism.languages.markdown.italic);\nPrism.languages.markdown.italic.inside.bold = Prism.util.clone(Prism.languages.markdown.bold); // prettier-ignore\n\nexport default CodeHighlightingExample;","map":null,"metadata":{},"sourceType":"module"}