{"ast":null,"code":"import { Editor, Point, Range, Transforms } from \"slate\";\nconst SHORTCUTS = {\n  '*': 'ul-item',\n  '-': 'ul-item',\n  '+': 'ul-item',\n  '>': 'block-quote',\n  '#': 'heading-one',\n  '##': 'heading-two',\n  '###': 'heading-three',\n  '####': 'heading-four',\n  '#####': 'heading-five',\n  '######': 'heading-six'\n};\nexport const withMarkdown = editor => {\n  const {\n    deleteBackward,\n    insertText,\n    insertBreak\n  } = editor;\n\n  editor.insertBreak = () => {\n    let handled = false;\n    const {\n      selection\n    } = editor;\n\n    if (!selection || Range.isExpanded(selection)) {\n      insertBreak();\n      return;\n    }\n\n    const block = Editor.above(editor, {\n      match: n => Editor.isBlock(editor, n)\n    });\n\n    if (!block || Editor.isEditor(block[0])) {\n      insertBreak();\n      return;\n    }\n\n    const parent = Editor.parent(editor, block[1]);\n\n    if (!parent) {\n      insertBreak();\n      return;\n    }\n\n    const text = Editor.string(editor, block[1]);\n\n    if (text) {\n      insertBreak();\n      return;\n    }\n\n    const blockPath = block[1];\n    let indent = 0;\n\n    if (typeof parent[0].indent === \"number\") {\n      indent = parent[0].indent > 1 ? parent[0].indent - 1 : 0;\n    }\n\n    Transforms.setNodes(editor, {\n      type: 'paragraph',\n      indent\n    }, {\n      at: blockPath\n    }); // if it is the last child\n\n    if (blockPath[blockPath.length - 1] === parent[0].children.length - 1) {\n      Transforms.liftNodes(editor, {\n        at: blockPath\n      });\n      return;\n    }\n  };\n\n  editor.insertText = text => {\n    const {\n      selection\n    } = editor;\n\n    if (text !== ' ' || !selection || !Range.isCollapsed(selection)) {\n      insertText(text);\n      return;\n    }\n\n    const {\n      anchor\n    } = selection;\n    const block = Editor.above(editor, {\n      match: n => Editor.isBlock(editor, n)\n    });\n    const path = block ? block[1] : [];\n    const start = Editor.start(editor, path);\n    const range = {\n      anchor,\n      focus: start\n    };\n    let beforeText = Editor.string(editor, range);\n    let tabs = 0;\n\n    for (let c of beforeText) {\n      if (c === '\\t') {\n        tabs++;\n      }\n    }\n\n    beforeText = beforeText.substr(tabs);\n    const blockType = block[0].type;\n    let inList = typeof blockType === 'string' ? blockType === 'list-item' : false;\n\n    if (text === ' ') {\n      let type = SHORTCUTS[beforeText];\n\n      if (!type && /^[1-9]\\d*\\./.test(beforeText)) {\n        type = 'ol-item';\n      }\n\n      let list;\n\n      switch (type) {\n        case 'ul-item':\n          if (inList) break;\n          Transforms.select(editor, range);\n          Transforms.delete(editor);\n          Transforms.setNodes(editor, {\n            type: 'list-item'\n          }, {\n            match: n => Editor.isBlock(editor, n)\n          });\n          list = {\n            type: 'bulleted-list',\n            indent: tabs + 1,\n            children: []\n          };\n          Transforms.wrapNodes(editor, list, {\n            match: n => n.type === 'list-item'\n          });\n          break;\n\n        case 'ol-item':\n          if (inList) break;\n          const found = beforeText.match(/^([\\t]*)\\d+\\./);\n          Transforms.select(editor, range);\n          Transforms.delete(editor);\n          Transforms.setNodes(editor, {\n            type: 'list-item'\n          }, {\n            match: n => Editor.isBlock(editor, n)\n          });\n          list = {\n            type: 'numbered-list',\n            indent: tabs + 1,\n            children: []\n          };\n          Transforms.wrapNodes(editor, list, {\n            match: n => n.type === 'list-item'\n          });\n          break;\n\n        default:\n          insertText(text);\n      }\n\n      return;\n    }\n\n    insertText(text);\n  };\n\n  editor.deleteBackward = unit => {\n    console.log(\"editor.deleteBackward:\", unit);\n    const {\n      selection\n    } = editor;\n\n    if (selection && Range.isCollapsed(selection)) {\n      const match = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n)\n      });\n\n      if (match && !Editor.isEditor(match[0])) {\n        const [block, path] = match;\n        const start = Editor.start(editor, path);\n\n        if (Point.equals(selection.anchor, start)) {\n          if (block.type === 'list-item') {\n            const parent = Editor.parent(editor, path);\n            const listNode = parent[0];\n\n            if (listNode && listNode.indent > 1) {\n              Editor.withoutNormalizing(editor, () => {\n                Transforms.wrapNodes(editor, {\n                  type: listNode.type,\n                  indent: listNode.indent - 1,\n                  children: []\n                }, {\n                  at: path\n                });\n                Transforms.liftNodes(editor, {\n                  at: path\n                });\n              });\n            } else {\n              Transforms.setNodes(editor, {\n                type: 'paragraph'\n              });\n              Transforms.unwrapNodes(editor, {\n                match: n => typeof n.type === 'string' && n.type.endsWith('-list'),\n                split: true\n              }); // deleteBackward(unit)\n            }\n          } else if (block.type === 'paragraph') {\n            if (block.indent && block.indent > 0) {\n              Transforms.setNodes(editor, {\n                indent: block.indent - 1\n              }, {\n                at: path\n              });\n              return;\n            } else {\n              deleteBackward(unit);\n            }\n          } else {\n            Transforms.setNodes(editor, {\n              type: 'paragraph'\n            });\n          }\n\n          return;\n        }\n\n        deleteBackward(unit);\n      }\n    }\n\n    return editor;\n  };\n};\n\nconst beforeTextInBlock = editor => {\n  const {\n    selection\n  } = editor;\n\n  if (!selection) {\n    return '';\n  }\n\n  const block = Editor.above(editor, {\n    match: n => Editor.isBlock(editor, n)\n  });\n  const path = block ? block[1] : [];\n  const start = Editor.start(editor, path);\n  const range = {\n    anchor: Range.start(editor.selection),\n    focus: start\n  };\n  let beforeText = Editor.string(editor, range);\n  return beforeText;\n};","map":{"version":3,"sources":["/Users/yonggu/WebstormProjects/gyedit/src/withMarkdown.ts"],"names":["Editor","Point","Range","Transforms","SHORTCUTS","withMarkdown","editor","deleteBackward","insertText","insertBreak","handled","selection","isExpanded","block","above","match","n","isBlock","isEditor","parent","text","string","blockPath","indent","setNodes","type","at","length","children","liftNodes","isCollapsed","anchor","path","start","range","focus","beforeText","tabs","c","substr","blockType","inList","test","list","select","delete","wrapNodes","found","unit","console","log","equals","listNode","withoutNormalizing","unwrapNodes","endsWith","split","beforeTextInBlock"],"mappings":"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","sourcesContent":["import {Editor, Path, Point, Range, Transforms} from \"slate\";\nimport {BlockElement, BlockEntry} from './types'\n\nconst SHORTCUTS = {\n    '*': 'ul-item',\n    '-': 'ul-item',\n    '+': 'ul-item',\n    '>': 'block-quote',\n    '#': 'heading-one',\n    '##': 'heading-two',\n    '###': 'heading-three',\n    '####': 'heading-four',\n    '#####': 'heading-five',\n    '######': 'heading-six',\n}\n\nexport const withMarkdown = (editor: Editor) => {\n    const {deleteBackward, insertText, insertBreak} = editor\n\n    editor.insertBreak = () => {\n        let handled = false\n        const {selection} = editor\n\n        if (!selection || Range.isExpanded(selection)) {\n            insertBreak()\n            return\n        }\n        const block = Editor.above(editor, {\n            match: n => Editor.isBlock(editor, n),\n        })\n        if (!block || Editor.isEditor(block[0])) {\n            insertBreak()\n            return\n        }\n        const parent = Editor.parent(editor, block[1])\n        if (!parent) {\n            insertBreak()\n            return\n        }\n        const text = Editor.string(editor, block[1])\n        if (text) {\n            insertBreak()\n            return\n        }\n        const blockPath: Path = block[1]\n        let indent = 0\n        if (typeof parent[0].indent === \"number\") {\n            indent = parent[0].indent > 1 ? parent[0].indent - 1 : 0\n        }\n        Transforms.setNodes(editor, {type: 'paragraph', indent}, {at: blockPath})\n        // if it is the last child\n        if (blockPath[blockPath.length - 1] === parent[0].children.length - 1) {\n            Transforms.liftNodes(editor, {at: blockPath})\n            return\n        }\n    }\n\n    editor.insertText = (text: string) => {\n        const {selection} = editor\n        if ((text !== ' ') || !selection || !Range.isCollapsed(selection)) {\n            insertText(text)\n            return\n        }\n\n        const {anchor} = selection\n        const block = Editor.above(editor, {\n            match: n => Editor.isBlock(editor, n),\n        })\n        const path = block ? block[1] : []\n        const start = Editor.start(editor, path)\n        const range = {anchor, focus: start}\n        let beforeText = Editor.string(editor, range)\n        let tabs = 0\n        for (let c of beforeText) {\n            if (c === '\\t') {\n                tabs++\n            }\n        }\n        beforeText = beforeText.substr(tabs)\n        const blockType = block![0].type\n        let inList = typeof blockType === 'string' ? blockType === 'list-item' : false\n\n        if (text === ' ') {\n\n            let type = SHORTCUTS[beforeText]\n\n            if (!type && /^[1-9]\\d*\\./.test(beforeText)) {\n                type = 'ol-item'\n            }\n            let list\n            switch (type) {\n                case 'ul-item':\n                    if (inList) break\n                    Transforms.select(editor, range)\n                    Transforms.delete(editor)\n                    Transforms.setNodes(\n                        editor,\n                        {type: 'list-item'},\n                        {match: n => Editor.isBlock(editor, n)}\n                    )\n                    list = {type: 'bulleted-list', indent: tabs + 1, children: []}\n                    Transforms.wrapNodes(editor, list, {\n                        match: n => n.type === 'list-item',\n                    })\n                    break\n                case 'ol-item':\n                    if (inList) break\n                    const found = beforeText.match(/^([\\t]*)\\d+\\./)\n                    Transforms.select(editor, range)\n                    Transforms.delete(editor)\n                    Transforms.setNodes(\n                        editor,\n                        {type: 'list-item'},\n                        {match: n => Editor.isBlock(editor, n)}\n                    )\n                    list = {type: 'numbered-list', indent: tabs + 1, children: []}\n                    Transforms.wrapNodes(editor, list, {\n                        match: n => n.type === 'list-item',\n                    })\n                    break\n                default:\n                    insertText(text)\n            }\n            return\n        }\n\n        insertText(text)\n    }\n\n    editor.deleteBackward = (unit: 'character' | 'word' | 'line' | 'block') => {\n        console.log(\"editor.deleteBackward:\", unit)\n        const {selection} = editor\n\n        if (selection && Range.isCollapsed(selection)) {\n            const match = Editor.above(editor, {\n                match: n => Editor.isBlock(editor, n),\n            })\n\n            if (match && !Editor.isEditor(match[0])) {\n                const [block, path] = match as BlockEntry\n                const start = Editor.start(editor, path)\n\n                if (Point.equals(selection.anchor, start)) {\n                    if (block.type === 'list-item') {\n                        const parent = Editor.parent(editor, path)\n                        const listNode = parent[0] as BlockElement\n                        if (listNode && (listNode.indent as number > 1)) {\n                            Editor.withoutNormalizing(editor, () => {\n                                Transforms.wrapNodes(editor, {\n                                    type: listNode.type,\n                                    indent: listNode.indent! - 1,\n                                    children: []\n                                }, {at: path})\n                                Transforms.liftNodes(editor, {at: path})\n                            })\n                        } else {\n                            Transforms.setNodes(editor, {type: 'paragraph'})\n                            Transforms.unwrapNodes(editor, {\n                                match: n => (typeof n.type === 'string' && n.type.endsWith('-list')),\n                                split: true,\n                            })\n                            // deleteBackward(unit)\n                        }\n                    } else if (block.type === 'paragraph') {\n                        if (block.indent && block.indent > 0) {\n                            Transforms.setNodes(editor, {indent: block.indent - 1}, {at: path})\n                            return\n                        } else {\n                            deleteBackward(unit)\n                        }\n                    } else {\n                        Transforms.setNodes(editor, {type: 'paragraph'})\n                    }\n                    return\n                }\n\n                deleteBackward(unit)\n            }\n        }\n\n        return editor\n    }\n}\n\nconst beforeTextInBlock = (editor: Editor): string => {\n    const {selection} = editor\n    if (!selection) {\n        return ''\n    }\n    const block = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n    })\n    const path = block ? block[1] : []\n    const start = Editor.start(editor, path)\n    const range = {anchor: Range.start(editor.selection!), focus: start}\n    let beforeText = Editor.string(editor, range)\n    return beforeText\n}"]},"metadata":{},"sourceType":"module"}