{"ast":null,"code":"import { Editor, Range, Transforms } from 'slate';\nexport const onKeyDown = () => (e, editor) => {\n  let {\n    selection\n  } = editor;\n\n  if (e.key === 'Tab' && selection) {\n    const {\n      anchor\n    } = selection;\n    const block = Editor.above(editor, {\n      match: n => Editor.isBlock(editor, n)\n    });\n\n    if (block && block[0].type == 'list-item') {\n      if (Range.isCollapsed(selection)) {\n        const path = block[1];\n        const start = Editor.start(editor, path);\n        const range = {\n          anchor,\n          focus: start\n        };\n        let beforeText = Editor.string(editor, range);\n\n        if (beforeText.length) {\n          return;\n        }\n      } // move down with tab\n\n\n      const tab = !e.shiftKey;\n\n      if (tab) {\n        moveListItemDown(editor, block[1]);\n      }\n    }\n  }\n};\n\nfunction moveListItemDown(editor, path) {\n  const entry = Editor.parent(editor, path);\n  let node = entry[0];\n\n  if (node.type.endsWith('list')) {\n    node.indent++;\n    Transforms.splitNodes(editor, {\n      at: path\n    });\n  }\n}","map":{"version":3,"sources":["/Users/yonggu/WebstormProjects/gyedit/src/onKeyDown.ts"],"names":["Editor","Range","Transforms","onKeyDown","e","editor","selection","key","anchor","block","above","match","n","isBlock","type","isCollapsed","path","start","range","focus","beforeText","string","length","tab","shiftKey","moveListItemDown","entry","parent","node","endsWith","indent","splitNodes","at"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,KAAjB,EAAyCC,UAAzC,QAA2D,OAA3D;AAGA,OAAO,MAAMC,SAAS,GAAG,MAAM,CAC3BC,CAD2B,EAE3BC,MAF2B,KAG1B;AACD,MAAI;AAACC,IAAAA;AAAD,MAAcD,MAAlB;;AACA,MAAID,CAAC,CAACG,GAAF,KAAU,KAAV,IAAmBD,SAAvB,EAAkC;AAC9B,UAAM;AAAEE,MAAAA;AAAF,QAAaF,SAAnB;AACA,UAAMG,KAAK,GAAGT,MAAM,CAACU,KAAP,CAAaL,MAAb,EAAqB;AAC/BM,MAAAA,KAAK,EAAEC,CAAC,IAAIZ,MAAM,CAACa,OAAP,CAAeR,MAAf,EAAuBO,CAAvB;AADmB,KAArB,CAAd;;AAGA,QAAIH,KAAK,IAAIA,KAAK,CAAC,CAAD,CAAL,CAASK,IAAT,IAAiB,WAA9B,EAA2C;AACvC,UAAIb,KAAK,CAACc,WAAN,CAAkBT,SAAlB,CAAJ,EAAkC;AAC9B,cAAMU,IAAI,GAAGP,KAAK,CAAC,CAAD,CAAlB;AACA,cAAMQ,KAAK,GAAGjB,MAAM,CAACiB,KAAP,CAAaZ,MAAb,EAAqBW,IAArB,CAAd;AACA,cAAME,KAAK,GAAG;AAACV,UAAAA,MAAD;AAASW,UAAAA,KAAK,EAAEF;AAAhB,SAAd;AACA,YAAIG,UAAU,GAAGpB,MAAM,CAACqB,MAAP,CAAchB,MAAd,EAAsBa,KAAtB,CAAjB;;AACA,YAAIE,UAAU,CAACE,MAAf,EAAsB;AAClB;AACH;AACJ,OATsC,CAWvC;;;AACA,YAAMC,GAAG,GAAG,CAACnB,CAAC,CAACoB,QAAf;;AACA,UAAID,GAAJ,EAAS;AACLE,QAAAA,gBAAgB,CAACpB,MAAD,EAASI,KAAK,CAAC,CAAD,CAAd,CAAhB;AACH;AACJ;AACJ;AACJ,CA5BM;;AA8BP,SAASgB,gBAAT,CAA0BpB,MAA1B,EAAyCW,IAAzC,EAAoD;AAChD,QAAMU,KAAK,GAAG1B,MAAM,CAAC2B,MAAP,CAActB,MAAd,EAAsBW,IAAtB,CAAd;AACA,MAAIY,IAAc,GAAGF,KAAK,CAAC,CAAD,CAA1B;;AACA,MAAIE,IAAI,CAACd,IAAL,CAAUe,QAAV,CAAoB,MAApB,CAAJ,EAAiC;AAC7BD,IAAAA,IAAI,CAACE,MAAL;AACA5B,IAAAA,UAAU,CAAC6B,UAAX,CAAsB1B,MAAtB,EAA8B;AAAC2B,MAAAA,EAAE,EAAEhB;AAAL,KAA9B;AACH;AACJ","sourcesContent":["import { Editor, Range, Path, NodeEntry, Transforms } from 'slate'\nimport {ListNode, ListItemNode} from './types'\n\nexport const onKeyDown = () => (\n    e: KeyboardEvent,\n    editor: Editor\n) => {\n    let {selection} = editor\n    if (e.key === 'Tab' && selection) {\n        const { anchor } = selection\n        const block = Editor.above(editor, {\n            match: n => Editor.isBlock(editor, n),\n        })\n        if (block && block[0].type == 'list-item') {\n            if (Range.isCollapsed(selection)) {\n                const path = block[1]\n                const start = Editor.start(editor, path)\n                const range = {anchor, focus: start}\n                let beforeText = Editor.string(editor, range)\n                if (beforeText.length){\n                    return\n                }\n            }\n\n            // move down with tab\n            const tab = !e.shiftKey;\n            if (tab) {\n                moveListItemDown(editor, block[1]);\n            }\n        }\n    }\n};\n\nfunction moveListItemDown(editor:Editor, path: Path){\n    const entry = Editor.parent(editor, path)\n    let node: ListNode = entry[0] as ListNode\n    if (node.type.endsWith( 'list')) {\n        node.indent ++\n        Transforms.splitNodes(editor, {at: path})\n    }\n}"]},"metadata":{},"sourceType":"module"}