{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/yonggu/WebstormProjects/slate/site/examples/paste-html.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n          display: block;\\n          max-width: 100%;\\n          max-height: 20em;\\n          box-shadow: \", \";\\n        \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { jsx } from 'slate-hyperscript';\nimport { Transforms, createEditor } from 'slate';\nimport { withHistory } from 'slate-history';\nimport { css } from 'emotion';\nimport { Slate, Editable, withReact, useSelected, useFocused } from 'slate-react';\nvar ELEMENT_TAGS = {\n  A: function A(el) {\n    return {\n      type: 'link',\n      url: el.getAttribute('href')\n    };\n  },\n  BLOCKQUOTE: function BLOCKQUOTE() {\n    return {\n      type: 'quote'\n    };\n  },\n  H1: function H1() {\n    return {\n      type: 'heading-one'\n    };\n  },\n  H2: function H2() {\n    return {\n      type: 'heading-two'\n    };\n  },\n  H3: function H3() {\n    return {\n      type: 'heading-three'\n    };\n  },\n  H4: function H4() {\n    return {\n      type: 'heading-four'\n    };\n  },\n  H5: function H5() {\n    return {\n      type: 'heading-five'\n    };\n  },\n  H6: function H6() {\n    return {\n      type: 'heading-six'\n    };\n  },\n  IMG: function IMG(el) {\n    return {\n      type: 'image',\n      url: el.getAttribute('src')\n    };\n  },\n  LI: function LI() {\n    return {\n      type: 'list-item'\n    };\n  },\n  OL: function OL() {\n    return {\n      type: 'numbered-list'\n    };\n  },\n  P: function P() {\n    return {\n      type: 'paragraph'\n    };\n  },\n  PRE: function PRE() {\n    return {\n      type: 'code'\n    };\n  },\n  UL: function UL() {\n    return {\n      type: 'bulleted-list'\n    };\n  }\n}; // COMPAT: `B` is omitted here because Google Docs uses `<b>` in weird ways.\n\nvar TEXT_TAGS = {\n  CODE: function CODE() {\n    return {\n      code: true\n    };\n  },\n  DEL: function DEL() {\n    return {\n      strikethrough: true\n    };\n  },\n  EM: function EM() {\n    return {\n      italic: true\n    };\n  },\n  I: function I() {\n    return {\n      italic: true\n    };\n  },\n  S: function S() {\n    return {\n      strikethrough: true\n    };\n  },\n  STRONG: function STRONG() {\n    return {\n      bold: true\n    };\n  },\n  U: function U() {\n    return {\n      underline: true\n    };\n  }\n};\nexport var deserialize = function deserialize(el) {\n  if (el.nodeType === 3) {\n    return el.textContent;\n  } else if (el.nodeType !== 1) {\n    return null;\n  } else if (el.nodeName === 'BR') {\n    return '\\n';\n  }\n\n  var nodeName = el.nodeName;\n  var parent = el;\n\n  if (nodeName === 'PRE' && el.childNodes[0] && el.childNodes[0].nodeName === 'CODE') {\n    parent = el.childNodes[0];\n  }\n\n  var children = Array.from(parent.childNodes).map(deserialize).flat();\n\n  if (el.nodeName === 'BODY') {\n    return jsx('fragment', {}, children);\n  }\n\n  if (ELEMENT_TAGS[nodeName]) {\n    var attrs = ELEMENT_TAGS[nodeName](el);\n    return jsx('element', attrs, children);\n  }\n\n  if (TEXT_TAGS[nodeName]) {\n    var _attrs = TEXT_TAGS[nodeName](el);\n\n    return children.map(function (child) {\n      return jsx('text', _attrs, child);\n    });\n  }\n\n  return children;\n};\n\nvar PasteHtmlExample = function PasteHtmlExample() {\n  _s();\n\n  var _useState = useState(initialValue),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var renderElement = useCallback(function (props) {\n    return __jsx(Element, _extends({}, props, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 46\n      }\n    }));\n  }, []);\n  var renderLeaf = useCallback(function (props) {\n    return __jsx(Leaf, _extends({}, props, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 43\n      }\n    }));\n  }, []);\n  var editor = useMemo(function () {\n    return withHtml(withReact(withHistory(createEditor())));\n  }, []);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: function onChange(value) {\n      return setValue(value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }, __jsx(Editable, {\n    renderElement: renderElement,\n    renderLeaf: renderLeaf,\n    placeholder: \"Paste in some HTML...\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(PasteHtmlExample, \"eGTXoAMSU5Zwxn30ofCLeiwqzhc=\");\n\n_c = PasteHtmlExample;\n\nvar withHtml = function withHtml(editor) {\n  var insertData = editor.insertData,\n      isInline = editor.isInline,\n      isVoid = editor.isVoid;\n\n  editor.isInline = function (element) {\n    return element.type === 'link' ? true : isInline(element);\n  };\n\n  editor.isVoid = function (element) {\n    return element.type === 'image' ? true : isVoid(element);\n  };\n\n  editor.insertData = function (data) {\n    var html = data.getData('text/html');\n\n    if (html) {\n      var parsed = new DOMParser().parseFromString(html, 'text/html');\n      var fragment = deserialize(parsed.body);\n      Transforms.insertFragment(editor, fragment);\n      return;\n    }\n\n    insertData(data);\n  };\n\n  return editor;\n};\n\nvar Element = function Element(props) {\n  var attributes = props.attributes,\n      children = props.children,\n      element = props.element;\n\n  switch (element.type) {\n    default:\n      return __jsx(\"p\", _extends({}, attributes, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'quote':\n      return __jsx(\"blockquote\", _extends({}, attributes, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'code':\n      return __jsx(\"pre\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 9\n        }\n      }, __jsx(\"code\", _extends({}, attributes, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }\n      }), children));\n\n    case 'bulleted-list':\n      return __jsx(\"ul\", _extends({}, attributes, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'heading-one':\n      return __jsx(\"h1\", _extends({}, attributes, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'heading-two':\n      return __jsx(\"h2\", _extends({}, attributes, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'heading-three':\n      return __jsx(\"h3\", _extends({}, attributes, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'heading-four':\n      return __jsx(\"h4\", _extends({}, attributes, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'heading-five':\n      return __jsx(\"h5\", _extends({}, attributes, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'heading-six':\n      return __jsx(\"h6\", _extends({}, attributes, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'list-item':\n      return __jsx(\"li\", _extends({}, attributes, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'numbered-list':\n      return __jsx(\"ol\", _extends({}, attributes, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'link':\n      return __jsx(\"a\", _extends({\n        href: element.url\n      }, attributes, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 9\n        }\n      }), children);\n\n    case 'image':\n      return __jsx(ImageElement, _extends({}, props, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 14\n        }\n      }));\n  }\n};\n\n_c2 = Element;\n\nvar ImageElement = function ImageElement(_ref) {\n  _s2();\n\n  var attributes = _ref.attributes,\n      children = _ref.children,\n      element = _ref.element;\n  var selected = useSelected();\n  var focused = useFocused();\n  return __jsx(\"div\", _extends({}, attributes, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 5\n    }\n  }), children, __jsx(\"img\", {\n    src: element.url,\n    className: css(_templateObject(), selected && focused ? '0 0 0 2px blue;' : 'none'),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s2(ImageElement, \"HuPpo5U0EHtf6bNXFVpc3GQNhHc=\", false, function () {\n  return [useSelected, useFocused];\n});\n\n_c3 = ImageElement;\n\nvar Leaf = function Leaf(_ref2) {\n  var attributes = _ref2.attributes,\n      children = _ref2.children,\n      leaf = _ref2.leaf;\n\n  if (leaf.bold) {\n    children = __jsx(\"strong\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 16\n      }\n    }, children);\n  }\n\n  if (leaf.code) {\n    children = __jsx(\"code\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 16\n      }\n    }, children);\n  }\n\n  if (leaf.italic) {\n    children = __jsx(\"em\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 16\n      }\n    }, children);\n  }\n\n  if (leaf.underline) {\n    children = __jsx(\"u\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 16\n      }\n    }, children);\n  }\n\n  if (leaf.strikethrough) {\n    children = __jsx(\"del\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 16\n      }\n    }, children);\n  }\n\n  return __jsx(\"span\", _extends({}, attributes, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 10\n    }\n  }), children);\n};\n\n_c4 = Leaf;\nvar initialValue = [{\n  children: [{\n    text: \"By default, pasting content into a Slate editor will use the clipboard's \"\n  }, {\n    text: \"'text/plain'\",\n    code: true\n  }, {\n    text: \" data. That's okay for some use cases, but sometimes you want users to be able to paste in content and have it maintaing its formatting. To do this, your editor needs to handle \"\n  }, {\n    text: \"'text/html'\",\n    code: true\n  }, {\n    text: ' data. '\n  }]\n}, {\n  children: [{\n    text: 'This is an example of doing exactly that!'\n  }]\n}, {\n  children: [{\n    text: \"Try it out for yourself! Copy and paste some rendered HTML rich text content (not the source code) from another site into this editor and it's formatting should be preserved.\"\n  }]\n}];\nexport default PasteHtmlExample;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"PasteHtmlExample\");\n$RefreshReg$(_c2, \"Element\");\n$RefreshReg$(_c3, \"ImageElement\");\n$RefreshReg$(_c4, \"Leaf\");","map":{"version":3,"sources":["/Users/yonggu/WebstormProjects/slate/site/examples/paste-html.tsx"],"names":["React","useState","useCallback","useMemo","jsx","Transforms","createEditor","withHistory","css","Slate","Editable","withReact","useSelected","useFocused","ELEMENT_TAGS","A","el","type","url","getAttribute","BLOCKQUOTE","H1","H2","H3","H4","H5","H6","IMG","LI","OL","P","PRE","UL","TEXT_TAGS","CODE","code","DEL","strikethrough","EM","italic","I","S","STRONG","bold","U","underline","deserialize","nodeType","textContent","nodeName","parent","childNodes","children","Array","from","map","flat","attrs","child","PasteHtmlExample","initialValue","value","setValue","renderElement","props","renderLeaf","editor","withHtml","insertData","isInline","isVoid","element","data","html","getData","parsed","DOMParser","parseFromString","fragment","body","insertFragment","Element","attributes","ImageElement","selected","focused","Leaf","leaf","text"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useMemo } from 'react'\nimport { jsx } from 'slate-hyperscript'\nimport { Node, Transforms, createEditor } from 'slate'\nimport { withHistory } from 'slate-history'\nimport { css } from 'emotion'\nimport {\n  Slate,\n  Editable,\n  withReact,\n  useSelected,\n  useFocused,\n} from 'slate-react'\n\nconst ELEMENT_TAGS = {\n  A: el => ({ type: 'link', url: el.getAttribute('href') }),\n  BLOCKQUOTE: () => ({ type: 'quote' }),\n  H1: () => ({ type: 'heading-one' }),\n  H2: () => ({ type: 'heading-two' }),\n  H3: () => ({ type: 'heading-three' }),\n  H4: () => ({ type: 'heading-four' }),\n  H5: () => ({ type: 'heading-five' }),\n  H6: () => ({ type: 'heading-six' }),\n  IMG: el => ({ type: 'image', url: el.getAttribute('src') }),\n  LI: () => ({ type: 'list-item' }),\n  OL: () => ({ type: 'numbered-list' }),\n  P: () => ({ type: 'paragraph' }),\n  PRE: () => ({ type: 'code' }),\n  UL: () => ({ type: 'bulleted-list' }),\n}\n\n// COMPAT: `B` is omitted here because Google Docs uses `<b>` in weird ways.\nconst TEXT_TAGS = {\n  CODE: () => ({ code: true }),\n  DEL: () => ({ strikethrough: true }),\n  EM: () => ({ italic: true }),\n  I: () => ({ italic: true }),\n  S: () => ({ strikethrough: true }),\n  STRONG: () => ({ bold: true }),\n  U: () => ({ underline: true }),\n}\n\nexport const deserialize = el => {\n  if (el.nodeType === 3) {\n    return el.textContent\n  } else if (el.nodeType !== 1) {\n    return null\n  } else if (el.nodeName === 'BR') {\n    return '\\n'\n  }\n\n  const { nodeName } = el\n  let parent = el\n\n  if (\n    nodeName === 'PRE' &&\n    el.childNodes[0] &&\n    el.childNodes[0].nodeName === 'CODE'\n  ) {\n    parent = el.childNodes[0]\n  }\n  const children = Array.from(parent.childNodes)\n    .map(deserialize)\n    .flat()\n\n  if (el.nodeName === 'BODY') {\n    return jsx('fragment', {}, children)\n  }\n\n  if (ELEMENT_TAGS[nodeName]) {\n    const attrs = ELEMENT_TAGS[nodeName](el)\n    return jsx('element', attrs, children)\n  }\n\n  if (TEXT_TAGS[nodeName]) {\n    const attrs = TEXT_TAGS[nodeName](el)\n    return children.map(child => jsx('text', attrs, child))\n  }\n\n  return children\n}\n\nconst PasteHtmlExample = () => {\n  const [value, setValue] = useState<Node[]>(initialValue)\n  const renderElement = useCallback(props => <Element {...props} />, [])\n  const renderLeaf = useCallback(props => <Leaf {...props} />, [])\n  const editor = useMemo(\n    () => withHtml(withReact(withHistory(createEditor()))),\n    []\n  )\n  return (\n    <Slate editor={editor} value={value} onChange={value => setValue(value)}>\n      <Editable\n        renderElement={renderElement}\n        renderLeaf={renderLeaf}\n        placeholder=\"Paste in some HTML...\"\n      />\n    </Slate>\n  )\n}\n\nconst withHtml = editor => {\n  const { insertData, isInline, isVoid } = editor\n\n  editor.isInline = element => {\n    return element.type === 'link' ? true : isInline(element)\n  }\n\n  editor.isVoid = element => {\n    return element.type === 'image' ? true : isVoid(element)\n  }\n\n  editor.insertData = data => {\n    const html = data.getData('text/html')\n\n    if (html) {\n      const parsed = new DOMParser().parseFromString(html, 'text/html')\n      const fragment = deserialize(parsed.body)\n      Transforms.insertFragment(editor, fragment)\n      return\n    }\n\n    insertData(data)\n  }\n\n  return editor\n}\n\nconst Element = props => {\n  const { attributes, children, element } = props\n\n  switch (element.type) {\n    default:\n      return <p {...attributes}>{children}</p>\n    case 'quote':\n      return <blockquote {...attributes}>{children}</blockquote>\n    case 'code':\n      return (\n        <pre>\n          <code {...attributes}>{children}</code>\n        </pre>\n      )\n    case 'bulleted-list':\n      return <ul {...attributes}>{children}</ul>\n    case 'heading-one':\n      return <h1 {...attributes}>{children}</h1>\n    case 'heading-two':\n      return <h2 {...attributes}>{children}</h2>\n    case 'heading-three':\n      return <h3 {...attributes}>{children}</h3>\n    case 'heading-four':\n      return <h4 {...attributes}>{children}</h4>\n    case 'heading-five':\n      return <h5 {...attributes}>{children}</h5>\n    case 'heading-six':\n      return <h6 {...attributes}>{children}</h6>\n    case 'list-item':\n      return <li {...attributes}>{children}</li>\n    case 'numbered-list':\n      return <ol {...attributes}>{children}</ol>\n    case 'link':\n      return (\n        <a href={element.url} {...attributes}>\n          {children}\n        </a>\n      )\n    case 'image':\n      return <ImageElement {...props} />\n  }\n}\n\nconst ImageElement = ({ attributes, children, element }) => {\n  const selected = useSelected()\n  const focused = useFocused()\n  return (\n    <div {...attributes}>\n      {children}\n      <img\n        src={element.url}\n        className={css`\n          display: block;\n          max-width: 100%;\n          max-height: 20em;\n          box-shadow: ${selected && focused ? '0 0 0 2px blue;' : 'none'};\n        `}\n      />\n    </div>\n  )\n}\n\nconst Leaf = ({ attributes, children, leaf }) => {\n  if (leaf.bold) {\n    children = <strong>{children}</strong>\n  }\n\n  if (leaf.code) {\n    children = <code>{children}</code>\n  }\n\n  if (leaf.italic) {\n    children = <em>{children}</em>\n  }\n\n  if (leaf.underline) {\n    children = <u>{children}</u>\n  }\n\n  if (leaf.strikethrough) {\n    children = <del>{children}</del>\n  }\n\n  return <span {...attributes}>{children}</span>\n}\n\nconst initialValue = [\n  {\n    children: [\n      {\n        text:\n          \"By default, pasting content into a Slate editor will use the clipboard's \",\n      },\n      { text: \"'text/plain'\", code: true },\n      {\n        text:\n          \" data. That's okay for some use cases, but sometimes you want users to be able to paste in content and have it maintaing its formatting. To do this, your editor needs to handle \",\n      },\n      { text: \"'text/html'\", code: true },\n      { text: ' data. ' },\n    ],\n  },\n  {\n    children: [{ text: 'This is an example of doing exactly that!' }],\n  },\n  {\n    children: [\n      {\n        text:\n          \"Try it out for yourself! Copy and paste some rendered HTML rich text content (not the source code) from another site into this editor and it's formatting should be preserved.\",\n      },\n    ],\n  },\n]\n\nexport default PasteHtmlExample\n"]},"metadata":{},"sourceType":"module"}