{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useMemo, useState } from 'react';\nimport isHotkey from 'is-hotkey';\nimport { Editable, withReact, useSlate, Slate } from 'slate-react';\nimport { Editor, Transforms, createEditor } from 'slate';\nimport { withHistory } from 'slate-history';\nimport { Button, Icon, Toolbar } from '../components';\nimport { withMarkdown, onKeyDown as _onKeyDown, Element, Leaf } from '../../src/'; // import '../pages/index.scss'\n\nvar HOTKEYS = {\n  'mod+b': 'bold',\n  'mod+i': 'italic',\n  'mod+u': 'underline',\n  'mod+`': 'code'\n};\nvar LIST_TYPES = ['numbered-list', 'bulleted-list'];\n\nvar GYEdit = function GYEdit() {\n  var _useState = useState(initialValue),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var editor = useMemo(function () {\n    return withMarkdown(withHistory(withReact(createEditor())));\n  }, []);\n  var renderElement = useCallback(function (props) {\n    return __jsx(Element, props);\n  }, []);\n  var renderLeaf = useCallback(function (props) {\n    return __jsx(Leaf, props);\n  }, []);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: function onChange(value) {\n      return setValue(value);\n    }\n  }, __jsx(Toolbar, null, __jsx(MarkButton, {\n    format: \"bold\",\n    icon: \"format_bold\"\n  }), __jsx(MarkButton, {\n    format: \"italic\",\n    icon: \"format_italic\"\n  }), __jsx(MarkButton, {\n    format: \"underline\",\n    icon: \"format_underlined\"\n  }), __jsx(MarkButton, {\n    format: \"code\",\n    icon: \"code\"\n  }), __jsx(BlockButton, {\n    format: \"heading-one\",\n    icon: \"looks_one\"\n  }), __jsx(BlockButton, {\n    format: \"heading-two\",\n    icon: \"looks_two\"\n  }), __jsx(BlockButton, {\n    format: \"block-quote\",\n    icon: \"format_quote\"\n  }), __jsx(BlockButton, {\n    format: \"numbered-list\",\n    icon: \"format_list_numbered\"\n  }), __jsx(BlockButton, {\n    format: \"bulleted-list\",\n    icon: \"format_list_bulleted\"\n  })), __jsx(Editable, {\n    renderElement: renderElement,\n    renderLeaf: renderLeaf,\n    placeholder: \"Enter some rich text\\u2026\",\n    spellCheck: true,\n    autoFocus: true,\n    onKeyDown: function onKeyDown(event) {\n      var done = false;\n\n      for (var hotkey in HOTKEYS) {\n        if (isHotkey(hotkey, event)) {\n          event.preventDefault();\n          var mark = HOTKEYS[hotkey];\n          toggleMark(editor, mark);\n          done = true;\n        }\n      }\n\n      if (!done) {\n        _onKeyDown()(event, editor);\n      }\n    }\n  }));\n};\n\nvar toggleBlock = function toggleBlock(editor, format) {\n  var isActive = isBlockActive(editor, format);\n  var isList = LIST_TYPES.includes(format);\n  Transforms.unwrapNodes(editor, {\n    match: function match(n) {\n      return LIST_TYPES.includes(n.type);\n    },\n    split: true\n  });\n  Transforms.setNodes(editor, {\n    type: isActive ? 'paragraph' : isList ? 'list-item' : format\n  });\n\n  if (!isActive && isList) {\n    var block = {\n      type: format,\n      children: []\n    };\n    Transforms.wrapNodes(editor, block);\n  }\n};\n\nvar toggleMark = function toggleMark(editor, format) {\n  var isActive = isMarkActive(editor, format);\n\n  if (isActive) {\n    Editor.removeMark(editor, format);\n  } else {\n    Editor.addMark(editor, format, true);\n  }\n};\n\nvar isBlockActive = function isBlockActive(editor, format) {\n  var _Editor$nodes = Editor.nodes(editor, {\n    match: function match(n) {\n      return n.type === format;\n    }\n  }),\n      _Editor$nodes2 = _slicedToArray(_Editor$nodes, 1),\n      match = _Editor$nodes2[0];\n\n  return !!match;\n};\n\nvar isMarkActive = function isMarkActive(editor, format) {\n  var marks = Editor.marks(editor);\n  return marks ? marks[format] === true : false;\n};\n\nvar BlockButton = function BlockButton(_ref) {\n  var format = _ref.format,\n      icon = _ref.icon;\n  var editor = useSlate();\n  return __jsx(Button, {\n    active: isBlockActive(editor, format),\n    onMouseDown: function onMouseDown(event) {\n      event.preventDefault();\n      toggleBlock(editor, format);\n    }\n  }, __jsx(Icon, null, icon));\n};\n\nvar MarkButton = function MarkButton(_ref2) {\n  var format = _ref2.format,\n      icon = _ref2.icon;\n  var editor = useSlate();\n  return __jsx(Button, {\n    active: isMarkActive(editor, format),\n    onMouseDown: function onMouseDown(event) {\n      event.preventDefault();\n      toggleMark(editor, format);\n    }\n  }, __jsx(Icon, null, icon));\n};\n\nvar initialValue = [{\n  type: 'numbered-list',\n  children: [{\n    type: 'list-item',\n    children: [{\n      text: \"haha\"\n    }]\n  }]\n}, {\n  type: 'bulleted-list',\n  children: [{\n    type: 'list-item',\n    children: [{\n      text: \"hello\"\n    }]\n  }]\n}, {\n  type: 'paragraph',\n  children: [{\n    text: 'This is editable '\n  }, {\n    text: 'rich',\n    bold: true\n  }, {\n    text: ' text, '\n  }, {\n    text: 'much',\n    italic: true\n  }, {\n    text: ' better than a '\n  }, {\n    text: '<textarea>',\n    code: true\n  }, {\n    text: '!'\n  }]\n}, {\n  type: 'paragraph',\n  children: [{\n    text: \"Since it's rich text, you can do things like turn a selection of text \"\n  }, {\n    text: 'bold',\n    bold: true\n  }, {\n    text: ', or add a semantically rendered block quote in the middle of the page, like this:'\n  }]\n}, {\n  type: 'block-quote',\n  children: [{\n    type: 'paragraph',\n    children: [{\n      text: 'A wise quote.'\n    }]\n  }]\n}, {\n  type: 'paragraph',\n  children: [{\n    text: 'Try it out for yourself!'\n  }]\n}];\nexport default GYEdit;","map":null,"metadata":{},"sourceType":"module"}