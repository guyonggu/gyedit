{"ast":null,"code":"import { Path, Editor, Transforms } from 'slate';\nexport const getListStart = (editor, path) => {\n  let listStart = [];\n  let [node] = Editor.node(editor, path);\n\n  if (!isListNode(node)) {\n    return listStart;\n  }\n\n  let curPath = path;\n  let options = {\n    index: 0\n  };\n\n  while (isListNode(node) && options.index >= 0) {\n    computeListStart(listStart, node, options);\n    const pre = Editor.previous(editor, {\n      at: curPath\n    });\n\n    if (!pre) {\n      break;\n    }\n\n    [node, curPath] = pre;\n  }\n\n  return listStart;\n};\nexport const isListNode = node => {\n  if (!node || !node.type || !node.type.endsWith('-list')) {\n    return false;\n  }\n\n  return true;\n};\n\nconst computeListStart = (listStart, node, options = {\n  index: 0\n}) => {\n  let indent = node.indent || 0;\n  let start = node.start || 1;\n\n  if (listStart.length && indent > options.index) {\n    return;\n  }\n\n  if (!listStart.length) {\n    for (let i = 0; i <= indent; i++) {\n      listStart.push(1);\n    }\n  }\n\n  if (node.type === 'numbered-list') {\n    listStart[indent] = start + node.children.length;\n  }\n\n  options.index = indent - 1;\n};\n\nexport const fixList = (editor, path) => {\n  let entry;\n\n  if (!path) {\n    entry = Editor.above(editor, {\n      match: n => isListNode(n)\n    });\n  } else {\n    entry = Editor.node(editor, path);\n  }\n\n  if (!entry || !isListNode(entry[0])) {\n    return;\n  }\n\n  const node = entry[0];\n  path = entry[1];\n  const [preNode, prePath] = Editor.previous(editor, {\n    at: path\n  }) || [undefined, undefined]; // merge\n\n  if (isListNode(preNode) && preNode.type === node.type && preNode.indent === node.indent) {\n    Transforms.mergeNodes(editor, {\n      at: path\n    });\n  }\n\n  let listStart = prePath ? getListStart(editor, prePath) : [];\n  console.log(\"listStart:\", listStart);\n  updateListStart(editor, path, listStart);\n};\n\nconst updateListStart = (editor, path, listStart) => {\n  let [node] = Editor.node(editor, path);\n\n  while (isListNode(node)) {\n    const indent = node.indent || 0;\n    const start = listStart[indent] || 1;\n\n    if (node.type === 'numbered-list') {\n      Transforms.setNodes(editor, {\n        start: listStart[indent]\n      }, {\n        at: path\n      });\n    }\n\n    listStart.splice(indent + 1);\n\n    if (node.type === 'numbered-list') {\n      while (indent >= listStart.length) {\n        listStart.push(1);\n      }\n\n      listStart[indent] = start + node.children.length;\n    } // node.start = listStart[node.indent]\n\n\n    path = Path.next(path);\n    [node] = Editor.node(editor, path);\n  }\n};","map":{"version":3,"sources":["/Users/yonggu/WebstormProjects/gyedit/src/util.ts"],"names":["Path","Editor","Transforms","getListStart","editor","path","listStart","node","isListNode","curPath","options","index","computeListStart","pre","previous","at","type","endsWith","indent","start","length","i","push","children","fixList","entry","above","match","n","preNode","prePath","undefined","mergeNodes","console","log","updateListStart","setNodes","splice","next"],"mappings":"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","sourcesContent":["import {Path, Node, Editor, Transforms, NodeEntry, Ancestor} from 'slate'\nimport {ListNode} from \"./types\";\n\nexport const getListStart = (editor: Editor, path: Path): number[] => {\n    let listStart: number[] = []\n    let [node] = Editor.node(editor, path)\n    if (!isListNode(node)){\n        return listStart\n    }\n    let curPath: Path = path\n    let options = {\n        index: 0\n    }\n    while (isListNode(node) && options.index >= 0) {\n        computeListStart(listStart, node, options)\n        const pre: any = Editor.previous(editor, {at: curPath})\n        if (!pre) {\n            break\n        }\n        [node, curPath] = pre\n    }\n    return listStart\n}\n\nexport const isListNode = (node: Node | undefined): node is ListNode => {\n    if (!node || !node.type || !(node.type as string).endsWith('-list')) {\n        return false\n    }\n    return true\n}\n\nconst computeListStart = (listStart: number[], node: ListNode, options: { index: number } = {index: 0}): void => {\n    let indent = node.indent || 0\n    let start = node.start || 1\n    if (listStart.length && indent > options.index) {\n        return\n    }\n    if (!listStart.length) {\n        for (let i = 0; i <= indent; i++) {\n            listStart.push(1)\n        }\n    }\n    if (node.type === 'numbered-list') {\n        listStart[indent] = start + node.children.length\n    }\n    options.index = indent - 1\n}\n\nexport const fixList = (editor:Editor, path?:Path): void => {\n    let entry:NodeEntry | undefined\n    if (!path){\n        entry = Editor.above(editor, {\n            match: n => isListNode(n)\n        })\n    }else{\n        entry = Editor.node(editor,path)\n    }\n    if (!entry || !isListNode(entry[0])){\n        return\n    }\n    const node = entry[0]\n    path = entry[1]\n    const [preNode, prePath] = Editor.previous(editor, {at:path}) || [undefined, undefined]\n\n    // merge\n    if (isListNode(preNode) && preNode.type === node.type && preNode.indent === node.indent){\n        Transforms.mergeNodes(editor, {at: path})\n    }\n    let listStart: number[] = prePath ? getListStart(editor, prePath) : []\n    console.log(\"listStart:\", listStart)\n    updateListStart(editor, path, listStart)\n}\n\nconst updateListStart = (editor:Editor, path:Path, listStart:number[]):void => {\n    let [node] = Editor.node(editor, path)\n    while (isListNode(node)){\n        const indent = node.indent || 0\n        const start = listStart[indent] || 1\n\n        if (node.type === 'numbered-list') {\n            Transforms.setNodes(editor,{start:listStart[indent]}, {at:path})\n        }\n        listStart.splice(indent+1)\n\n        if (node.type === 'numbered-list'){\n            while(indent >= listStart.length){\n                listStart.push(1)\n            }\n            listStart[indent] = start + node.children.length\n        }\n\n        // node.start = listStart[node.indent]\n\n        path = Path.next(path);\n        [node] = Editor.node(editor, path)\n    }\n}"]},"metadata":{},"sourceType":"module"}