{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n            padding: 20px;\\n            border: 2px solid #ddd;\\n          \"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n            margin: 8px 0;\\n          \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n          box-shadow: 0 0 0 3px #ddd;\\n          padding: 8px;\\n        \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  width: unset;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useMemo } from 'react';\nimport { Transforms, createEditor } from 'slate';\nimport { Slate, Editable, useEditor, withReact } from 'slate-react';\nimport { withHistory } from 'slate-history';\nimport { css } from 'emotion';\nimport RichTextEditor from './richtext';\nimport { Button, Icon, Toolbar } from '../components';\n\nvar EditableVoidsExample = function EditableVoidsExample() {\n  var _useState = useState(initialValue),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var editor = useMemo(function () {\n    return withEditableVoids(withHistory(withReact(createEditor())));\n  }, []);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: setValue\n  }, __jsx(Toolbar, null, __jsx(InsertEditableVoidButton, null)), __jsx(Editable, {\n    renderElement: function renderElement(props) {\n      return __jsx(Element, props);\n    },\n    placeholder: \"Enter some text...\"\n  }));\n};\n\nvar withEditableVoids = function withEditableVoids(editor) {\n  var isVoid = editor.isVoid;\n\n  editor.isVoid = function (element) {\n    return element.type === 'editable-void' ? true : isVoid(element);\n  };\n\n  return editor;\n};\n\nvar insertEditableVoid = function insertEditableVoid(editor) {\n  var text = {\n    text: ''\n  };\n  var voidNode = {\n    type: 'editable-void',\n    children: [text]\n  };\n  Transforms.insertNodes(editor, voidNode);\n};\n\nvar Element = function Element(props) {\n  var attributes = props.attributes,\n      children = props.children,\n      element = props.element;\n\n  switch (element.type) {\n    case 'editable-void':\n      return __jsx(EditableVoidElement, props);\n\n    default:\n      return __jsx(\"p\", attributes, children);\n  }\n};\n\nvar unsetWidthStyle = css(_templateObject());\n\nvar EditableVoidElement = function EditableVoidElement(_ref) {\n  var attributes = _ref.attributes,\n      children = _ref.children,\n      element = _ref.element;\n\n  var _useState2 = useState(''),\n      inputValue = _useState2[0],\n      setInputValue = _useState2[1];\n\n  return (// Need contentEditable=false or Firefox has issues with certain input types.\n    __jsx(\"div\", _extends({}, attributes, {\n      contentEditable: false\n    }), __jsx(\"div\", {\n      className: css(_templateObject2())\n    }, __jsx(\"h4\", null, \"Name:\"), __jsx(\"input\", {\n      className: css(_templateObject3()),\n      type: \"text\",\n      value: inputValue,\n      onChange: function onChange(e) {\n        setInputValue(e.target.value);\n      }\n    }), __jsx(\"h4\", null, \"Left or right handed:\"), __jsx(\"input\", {\n      className: unsetWidthStyle,\n      type: \"radio\",\n      name: \"handedness\",\n      value: \"left\"\n    }), ' ', \"Left\", __jsx(\"br\", null), __jsx(\"input\", {\n      className: unsetWidthStyle,\n      type: \"radio\",\n      name: \"handedness\",\n      value: \"right\"\n    }), ' ', \"Right\", __jsx(\"h4\", null, \"Tell us about yourself:\"), __jsx(\"div\", {\n      className: css(_templateObject4())\n    }, __jsx(RichTextEditor, null))), children)\n  );\n};\n\nvar InsertEditableVoidButton = function InsertEditableVoidButton() {\n  var editor = useEditor();\n  return __jsx(Button, {\n    onMouseDown: function onMouseDown(event) {\n      event.preventDefault();\n      insertEditableVoid(editor);\n    }\n  }, __jsx(Icon, null, \"add\"));\n};\n\nvar initialValue = [{\n  type: 'paragraph',\n  children: [{\n    text: 'In addition to nodes that contain editable text, you can insert void nodes, which can also contain editable elements, inputs, or an entire other Slate editor.'\n  }]\n}, {\n  type: 'editable-void',\n  children: [{\n    text: ''\n  }]\n}, {\n  type: 'paragraph',\n  children: [{\n    text: ''\n  }]\n}];\nexport default EditableVoidsExample;","map":null,"metadata":{},"sourceType":"module"}