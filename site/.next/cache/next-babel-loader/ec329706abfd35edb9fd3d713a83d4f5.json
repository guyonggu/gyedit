{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { Editor, Point, Range, Transforms } from \"slate\";\nvar SHORTCUTS = {\n  '*': 'ul-item',\n  '-': 'ul-item',\n  '+': 'ul-item',\n  '>': 'block-quote',\n  '#': 'heading-one',\n  '##': 'heading-two',\n  '###': 'heading-three',\n  '####': 'heading-four',\n  '#####': 'heading-five',\n  '######': 'heading-six'\n};\nexport var withMarkdown = function withMarkdown(editor) {\n  var deleteBackward = editor.deleteBackward,\n      insertText = editor.insertText;\n\n  editor.insertText = function (text) {\n    var selection = editor.selection;\n\n    if (text !== ' ' || !selection || !Range.isCollapsed(selection)) {\n      insertText(text);\n      return;\n    }\n\n    var anchor = selection.anchor;\n    var block = Editor.above(editor, {\n      match: function match(n) {\n        return Editor.isBlock(editor, n);\n      }\n    });\n    var path = block ? block[1] : [];\n    var start = Editor.start(editor, path);\n    var range = {\n      anchor: anchor,\n      focus: start\n    };\n    var beforeText = Editor.string(editor, range);\n    var tabs = 0;\n\n    var _iterator = _createForOfIteratorHelper(beforeText),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var c = _step.value;\n\n        if (c === '\\t') {\n          tabs++;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    beforeText = beforeText.substr(tabs);\n    var blockType = block[0].type;\n    var inList = typeof blockType === 'string' ? blockType === 'list-item' : false;\n\n    if (text === ' ') {\n      var type = SHORTCUTS[beforeText];\n\n      if (!type && /^[1-9]\\d*\\./.test(beforeText)) {\n        type = 'ol-item';\n      }\n\n      var list;\n\n      switch (type) {\n        case 'ul-item':\n          if (inList) break;\n          Transforms.select(editor, range);\n          Transforms[\"delete\"](editor);\n          Transforms.setNodes(editor, {\n            type: 'list-item'\n          }, {\n            match: function match(n) {\n              return Editor.isBlock(editor, n);\n            }\n          });\n          list = {\n            type: 'bulleted-list',\n            indent: tabs,\n            children: []\n          };\n          Transforms.wrapNodes(editor, list, {\n            match: function match(n) {\n              return n.type === 'list-item';\n            }\n          });\n          break;\n\n        case 'ol-item':\n          if (inList) break;\n          var found = beforeText.match(/^([\\t]*)\\d+\\./);\n          Transforms.select(editor, range);\n          Transforms[\"delete\"](editor);\n          Transforms.setNodes(editor, {\n            type: 'list-item'\n          }, {\n            match: function match(n) {\n              return Editor.isBlock(editor, n);\n            }\n          });\n          list = {\n            type: 'numbered-list',\n            indent: tabs,\n            children: []\n          };\n          Transforms.wrapNodes(editor, list, {\n            match: function match(n) {\n              return n.type === 'list-item';\n            }\n          });\n          break;\n\n        default:\n          insertText(text);\n          return;\n      }\n    } else if (text === '\\t' && inList && beforeText === '') {\n      var _ref = Editor.parent(editor, path),\n          _ref2 = _slicedToArray(_ref, 1),\n          listNode = _ref2[0];\n\n      console.log(listNode.type);\n\n      if (listNode.type === 'bulleted-list' || listNode.type === 'numbered-list') {\n        listNode.indent++;\n      }\n\n      Transforms.select(editor, path);\n      return;\n    }\n\n    insertText(text);\n  };\n\n  editor.deleteBackward = function () {\n    var selection = editor.selection;\n\n    if (selection && Range.isCollapsed(selection)) {\n      var match = Editor.above(editor, {\n        match: function match(n) {\n          return Editor.isBlock(editor, n);\n        }\n      });\n\n      if (match) {\n        var _match = _slicedToArray(match, 2),\n            block = _match[0],\n            path = _match[1];\n\n        var start = Editor.start(editor, path);\n\n        if (block.type !== 'paragraph' && Point.equals(selection.anchor, start)) {\n          Transforms.setNodes(editor, {\n            type: 'paragraph'\n          });\n\n          if (block.type === 'list-item') {\n            Transforms.unwrapNodes(editor, {\n              match: function match(n) {\n                return n.type === 'bulleted-list';\n              },\n              split: true\n            });\n          }\n\n          return;\n        }\n      }\n\n      deleteBackward.apply(void 0, arguments);\n    }\n  };\n\n  return editor;\n};","map":{"version":3,"sources":["/Users/yonggu/WebstormProjects/gyedit/src/withMarkdown.ts"],"names":["Editor","Point","Range","Transforms","SHORTCUTS","withMarkdown","editor","deleteBackward","insertText","text","selection","isCollapsed","anchor","block","above","match","n","isBlock","path","start","range","focus","beforeText","string","tabs","c","substr","blockType","type","inList","test","list","select","setNodes","indent","children","wrapNodes","found","parent","listNode","console","log","equals","unwrapNodes","split"],"mappings":"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","sourcesContent":["import {Editor, Point, Range, Transforms} from \"slate\";\nimport {ListNode, ListNodeEntry} from './types'\nconst SHORTCUTS = {\n    '*': 'ul-item',\n    '-': 'ul-item',\n    '+': 'ul-item',\n    '>': 'block-quote',\n    '#': 'heading-one',\n    '##': 'heading-two',\n    '###': 'heading-three',\n    '####': 'heading-four',\n    '#####': 'heading-five',\n    '######': 'heading-six',\n}\n\nexport const withMarkdown = (editor: Editor) => {\n    const {deleteBackward, insertText} = editor\n\n    editor.insertText = (text: string) => {\n        const {selection} = editor\n        if ((text !== ' ') || !selection || !Range.isCollapsed(selection)) {\n            insertText(text)\n            return\n        }\n\n        const {anchor} = selection\n        const block = Editor.above(editor, {\n            match: n => Editor.isBlock(editor, n),\n        })\n        const path = block ? block[1] : []\n        const start = Editor.start(editor, path)\n        const range = {anchor, focus: start}\n        let beforeText = Editor.string(editor, range)\n        let tabs = 0\n        for (let c of beforeText) {\n            if (c === '\\t') {\n                tabs++\n            }\n        }\n        beforeText = beforeText.substr(tabs)\n        const blockType = block![0].type\n        let inList = typeof blockType === 'string' ? blockType === 'list-item' : false\n\n        if (text === ' ') {\n\n            let type = SHORTCUTS[beforeText]\n\n            if (!type && /^[1-9]\\d*\\./.test(beforeText)) {\n                type = 'ol-item'\n            }\n            let list:ListNode\n            switch (type) {\n                case 'ul-item':\n                    if (inList) break\n                    Transforms.select(editor, range)\n                    Transforms.delete(editor)\n                    Transforms.setNodes(\n                        editor,\n                        {type: 'list-item'},\n                        {match: n => Editor.isBlock(editor, n)}\n                    )\n                    list = {type: 'bulleted-list', indent: tabs, children: []}\n                    Transforms.wrapNodes(editor, list, {\n                        match: n => n.type === 'list-item',\n                    })\n                    break\n                case 'ol-item':\n                    if (inList) break\n                    const found = beforeText.match(/^([\\t]*)\\d+\\./)\n                    Transforms.select(editor, range)\n                    Transforms.delete(editor)\n                    Transforms.setNodes(\n                        editor,\n                        {type: 'list-item'},\n                        {match: n => Editor.isBlock(editor, n)}\n                    )\n                    list = {type: 'numbered-list', indent: tabs, children: []}\n                    Transforms.wrapNodes(editor, list, {\n                        match: n => n.type === 'list-item',\n                    })\n                    break\n                default:\n                    insertText(text)\n\n                    return\n            }\n        } else if (text === '\\t' && inList && beforeText === '') {\n            const [listNode] = Editor.parent(editor, path) as ListNodeEntry\n            console.log(listNode.type)\n            if (listNode.type === 'bulleted-list' || listNode.type === 'numbered-list') {\n                listNode.indent++\n            }\n            Transforms.select(editor, path)\n            return\n        }\n\n        insertText(text)\n    }\n\n    editor.deleteBackward = (...args) => {\n        const {selection} = editor\n\n        if (selection && Range.isCollapsed(selection)) {\n            const match = Editor.above(editor, {\n                match: n => Editor.isBlock(editor, n),\n            })\n\n            if (match) {\n                const [block, path] = match\n                const start = Editor.start(editor, path)\n\n                if (\n                    block.type !== 'paragraph' &&\n                    Point.equals(selection.anchor, start)\n                ) {\n                    Transforms.setNodes(editor, {type: 'paragraph'})\n\n                    if (block.type === 'list-item') {\n                        Transforms.unwrapNodes(editor, {\n                            match: n => n.type === 'bulleted-list',\n                            split: true,\n                        })\n                    }\n\n                    return\n                }\n            }\n\n            deleteBackward(...args)\n        }\n    }\n\n    return editor\n}"]},"metadata":{},"sourceType":"module"}