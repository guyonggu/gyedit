{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/yonggu/WebstormProjects/gyedit/site/examples/tables.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { Slate, Editable, withReact } from 'slate-react';\nimport { Editor, Range, Point, createEditor } from 'slate';\nimport { withHistory } from 'slate-history';\n\nvar TablesExample = function TablesExample() {\n  _s();\n\n  var _useState = useState(initialValue),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var renderElement = useCallback(function (props) {\n    return __jsx(Element, _extends({}, props, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 46\n      }\n    }));\n  }, []);\n  var renderLeaf = useCallback(function (props) {\n    return __jsx(Leaf, _extends({}, props, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 43\n      }\n    }));\n  }, []);\n  var editor = useMemo(function () {\n    return withTables(withHistory(withReact(createEditor())));\n  }, []);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: function onChange(value) {\n      return setValue(value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 5\n    }\n  }, __jsx(Editable, {\n    renderElement: renderElement,\n    renderLeaf: renderLeaf,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(TablesExample, \"eGTXoAMSU5Zwxn30ofCLeiwqzhc=\");\n\n_c = TablesExample;\n\nvar withTables = function withTables(editor) {\n  var deleteBackward = editor.deleteBackward,\n      deleteForward = editor.deleteForward,\n      insertBreak = editor.insertBreak;\n\n  editor.deleteBackward = function (unit) {\n    var selection = editor.selection;\n\n    if (selection && Range.isCollapsed(selection)) {\n      var _Editor$nodes = Editor.nodes(editor, {\n        match: function match(n) {\n          return n.type === 'table-cell';\n        }\n      }),\n          _Editor$nodes2 = _slicedToArray(_Editor$nodes, 1),\n          cell = _Editor$nodes2[0];\n\n      if (cell) {\n        var _cell = _slicedToArray(cell, 2),\n            cellPath = _cell[1];\n\n        var start = Editor.start(editor, cellPath);\n\n        if (Point.equals(selection.anchor, start)) {\n          return;\n        }\n      }\n    }\n\n    deleteBackward(unit);\n  };\n\n  editor.deleteForward = function (unit) {\n    var selection = editor.selection;\n\n    if (selection && Range.isCollapsed(selection)) {\n      var _Editor$nodes3 = Editor.nodes(editor, {\n        match: function match(n) {\n          return n.type === 'table-cell';\n        }\n      }),\n          _Editor$nodes4 = _slicedToArray(_Editor$nodes3, 1),\n          cell = _Editor$nodes4[0];\n\n      if (cell) {\n        var _cell2 = _slicedToArray(cell, 2),\n            cellPath = _cell2[1];\n\n        var end = Editor.end(editor, cellPath);\n\n        if (Point.equals(selection.anchor, end)) {\n          return;\n        }\n      }\n    }\n\n    deleteForward(unit);\n  };\n\n  editor.insertBreak = function () {\n    var selection = editor.selection;\n\n    if (selection) {\n      var _Editor$nodes5 = Editor.nodes(editor, {\n        match: function match(n) {\n          return n.type === 'table';\n        }\n      }),\n          _Editor$nodes6 = _slicedToArray(_Editor$nodes5, 1),\n          table = _Editor$nodes6[0];\n\n      if (table) {\n        return;\n      }\n    }\n\n    insertBreak();\n  };\n\n  return editor;\n};\n\nvar Element = function Element(_ref) {\n  var attributes = _ref.attributes,\n      children = _ref.children,\n      element = _ref.element;\n\n  switch (element.type) {\n    case 'table':\n      return __jsx(\"table\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }\n      }, __jsx(\"tbody\", _extends({}, attributes, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }\n      }), children));\n\n    case 'table-row':\n      return __jsx(\"tr\", _extends({}, attributes, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'table-cell':\n      return __jsx(\"td\", _extends({}, attributes, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 14\n        }\n      }), children);\n\n    default:\n      return __jsx(\"p\", _extends({}, attributes, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 14\n        }\n      }), children);\n  }\n};\n\n_c2 = Element;\n\nvar Leaf = function Leaf(_ref2) {\n  var attributes = _ref2.attributes,\n      children = _ref2.children,\n      leaf = _ref2.leaf;\n\n  if (leaf.bold) {\n    children = __jsx(\"strong\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 16\n      }\n    }, children);\n  }\n\n  return __jsx(\"span\", _extends({}, attributes, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 10\n    }\n  }), children);\n};\n\n_c3 = Leaf;\nvar initialValue = [{\n  children: [{\n    text: 'Since the editor is based on a recursive tree model, similar to an HTML document, you can create complex nested structures, like tables:'\n  }]\n}, {\n  type: 'table',\n  children: [{\n    type: 'table-row',\n    children: [{\n      type: 'table-cell',\n      children: [{\n        text: ''\n      }]\n    }, {\n      type: 'table-cell',\n      children: [{\n        text: 'Human',\n        bold: true\n      }]\n    }, {\n      type: 'table-cell',\n      children: [{\n        text: 'Dog',\n        bold: true\n      }]\n    }, {\n      type: 'table-cell',\n      children: [{\n        text: 'Cat',\n        bold: true\n      }]\n    }]\n  }, {\n    type: 'table-row',\n    children: [{\n      type: 'table-cell',\n      children: [{\n        text: '# of Feet',\n        bold: true\n      }]\n    }, {\n      type: 'table-cell',\n      children: [{\n        text: '2'\n      }]\n    }, {\n      type: 'table-cell',\n      children: [{\n        text: '4'\n      }]\n    }, {\n      type: 'table-cell',\n      children: [{\n        text: '4'\n      }]\n    }]\n  }, {\n    type: 'table-row',\n    children: [{\n      type: 'table-cell',\n      children: [{\n        text: '# of Lives',\n        bold: true\n      }]\n    }, {\n      type: 'table-cell',\n      children: [{\n        text: '1'\n      }]\n    }, {\n      type: 'table-cell',\n      children: [{\n        text: '1'\n      }]\n    }, {\n      type: 'table-cell',\n      children: [{\n        text: '9'\n      }]\n    }]\n  }]\n}, {\n  children: [{\n    text: \"This table is just a basic example of rendering a table, and it doesn't have fancy functionality. But you could augment it to add support for navigating with arrow keys, displaying table headers, adding column and rows, or even formulas if you wanted to get really crazy!\"\n  }]\n}];\nexport default TablesExample;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"TablesExample\");\n$RefreshReg$(_c2, \"Element\");\n$RefreshReg$(_c3, \"Leaf\");","map":{"version":3,"sources":["/Users/yonggu/WebstormProjects/gyedit/site/examples/tables.tsx"],"names":["React","useState","useCallback","useMemo","Slate","Editable","withReact","Editor","Range","Point","createEditor","withHistory","TablesExample","initialValue","value","setValue","renderElement","props","renderLeaf","editor","withTables","deleteBackward","deleteForward","insertBreak","unit","selection","isCollapsed","nodes","match","n","type","cell","cellPath","start","equals","anchor","end","table","Element","attributes","children","element","Leaf","leaf","bold","text"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useMemo } from 'react'\nimport { Slate, Editable, withReact } from 'slate-react'\nimport { Editor, Range, Point, Node, createEditor } from 'slate'\nimport { withHistory } from 'slate-history'\n\nconst TablesExample = () => {\n  const [value, setValue] = useState<Node[]>(initialValue)\n  const renderElement = useCallback(props => <Element {...props} />, [])\n  const renderLeaf = useCallback(props => <Leaf {...props} />, [])\n  const editor = useMemo(\n    () => withTables(withHistory(withReact(createEditor()))),\n    []\n  )\n  return (\n    <Slate editor={editor} value={value} onChange={value => setValue(value)}>\n      <Editable renderElement={renderElement} renderLeaf={renderLeaf} />\n    </Slate>\n  )\n}\n\nconst withTables = editor => {\n  const { deleteBackward, deleteForward, insertBreak } = editor\n\n  editor.deleteBackward = unit => {\n    const { selection } = editor\n\n    if (selection && Range.isCollapsed(selection)) {\n      const [cell] = Editor.nodes(editor, {\n        match: n => n.type === 'table-cell',\n      })\n\n      if (cell) {\n        const [, cellPath] = cell\n        const start = Editor.start(editor, cellPath)\n\n        if (Point.equals(selection.anchor, start)) {\n          return\n        }\n      }\n    }\n\n    deleteBackward(unit)\n  }\n\n  editor.deleteForward = unit => {\n    const { selection } = editor\n\n    if (selection && Range.isCollapsed(selection)) {\n      const [cell] = Editor.nodes(editor, {\n        match: n => n.type === 'table-cell',\n      })\n\n      if (cell) {\n        const [, cellPath] = cell\n        const end = Editor.end(editor, cellPath)\n\n        if (Point.equals(selection.anchor, end)) {\n          return\n        }\n      }\n    }\n\n    deleteForward(unit)\n  }\n\n  editor.insertBreak = () => {\n    const { selection } = editor\n\n    if (selection) {\n      const [table] = Editor.nodes(editor, { match: n => n.type === 'table' })\n\n      if (table) {\n        return\n      }\n    }\n\n    insertBreak()\n  }\n\n  return editor\n}\n\nconst Element = ({ attributes, children, element }) => {\n  switch (element.type) {\n    case 'table':\n      return (\n        <table>\n          <tbody {...attributes}>{children}</tbody>\n        </table>\n      )\n    case 'table-row':\n      return <tr {...attributes}>{children}</tr>\n    case 'table-cell':\n      return <td {...attributes}>{children}</td>\n    default:\n      return <p {...attributes}>{children}</p>\n  }\n}\n\nconst Leaf = ({ attributes, children, leaf }) => {\n  if (leaf.bold) {\n    children = <strong>{children}</strong>\n  }\n\n  return <span {...attributes}>{children}</span>\n}\n\nconst initialValue = [\n  {\n    children: [\n      {\n        text:\n          'Since the editor is based on a recursive tree model, similar to an HTML document, you can create complex nested structures, like tables:',\n      },\n    ],\n  },\n  {\n    type: 'table',\n    children: [\n      {\n        type: 'table-row',\n        children: [\n          {\n            type: 'table-cell',\n            children: [{ text: '' }],\n          },\n          {\n            type: 'table-cell',\n            children: [{ text: 'Human', bold: true }],\n          },\n          {\n            type: 'table-cell',\n            children: [{ text: 'Dog', bold: true }],\n          },\n          {\n            type: 'table-cell',\n            children: [{ text: 'Cat', bold: true }],\n          },\n        ],\n      },\n      {\n        type: 'table-row',\n        children: [\n          {\n            type: 'table-cell',\n            children: [{ text: '# of Feet', bold: true }],\n          },\n          {\n            type: 'table-cell',\n            children: [{ text: '2' }],\n          },\n          {\n            type: 'table-cell',\n            children: [{ text: '4' }],\n          },\n          {\n            type: 'table-cell',\n            children: [{ text: '4' }],\n          },\n        ],\n      },\n      {\n        type: 'table-row',\n        children: [\n          {\n            type: 'table-cell',\n            children: [{ text: '# of Lives', bold: true }],\n          },\n          {\n            type: 'table-cell',\n            children: [{ text: '1' }],\n          },\n          {\n            type: 'table-cell',\n            children: [{ text: '1' }],\n          },\n          {\n            type: 'table-cell',\n            children: [{ text: '9' }],\n          },\n        ],\n      },\n    ],\n  },\n  {\n    children: [\n      {\n        text:\n          \"This table is just a basic example of rendering a table, and it doesn't have fancy functionality. But you could augment it to add support for navigating with arrow keys, displaying table headers, adding column and rows, or even formulas if you wanted to get really crazy!\",\n      },\n    ],\n  },\n]\n\nexport default TablesExample\n"]},"metadata":{},"sourceType":"module"}