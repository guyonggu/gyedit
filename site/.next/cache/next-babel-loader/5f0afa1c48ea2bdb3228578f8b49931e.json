{"ast":null,"code":"var _jsxFileName = \"/Users/yonggu/WebstormProjects/gyedit/site/examples/tables.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { Slate, Editable, withReact } from 'slate-react';\nimport { Editor, Range, Point, createEditor } from 'slate';\nimport { withHistory } from 'slate-history';\n\nconst TablesExample = () => {\n  const {\n    0: value,\n    1: setValue\n  } = useState(initialValue);\n  const renderElement = useCallback(props => __jsx(Element, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 46\n    }\n  })), []);\n  const renderLeaf = useCallback(props => __jsx(Leaf, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 43\n    }\n  })), []);\n  const editor = useMemo(() => withTables(withHistory(withReact(createEditor()))), []);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: value => setValue(value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 5\n    }\n  }, __jsx(Editable, {\n    renderElement: renderElement,\n    renderLeaf: renderLeaf,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst withTables = editor => {\n  const {\n    deleteBackward,\n    deleteForward,\n    insertBreak\n  } = editor;\n\n  editor.deleteBackward = unit => {\n    const {\n      selection\n    } = editor;\n\n    if (selection && Range.isCollapsed(selection)) {\n      const [cell] = Editor.nodes(editor, {\n        match: n => n.type === 'table-cell'\n      });\n\n      if (cell) {\n        const [, cellPath] = cell;\n        const start = Editor.start(editor, cellPath);\n\n        if (Point.equals(selection.anchor, start)) {\n          return;\n        }\n      }\n    }\n\n    deleteBackward(unit);\n  };\n\n  editor.deleteForward = unit => {\n    const {\n      selection\n    } = editor;\n\n    if (selection && Range.isCollapsed(selection)) {\n      const [cell] = Editor.nodes(editor, {\n        match: n => n.type === 'table-cell'\n      });\n\n      if (cell) {\n        const [, cellPath] = cell;\n        const end = Editor.end(editor, cellPath);\n\n        if (Point.equals(selection.anchor, end)) {\n          return;\n        }\n      }\n    }\n\n    deleteForward(unit);\n  };\n\n  editor.insertBreak = () => {\n    const {\n      selection\n    } = editor;\n\n    if (selection) {\n      const [table] = Editor.nodes(editor, {\n        match: n => n.type === 'table'\n      });\n\n      if (table) {\n        return;\n      }\n    }\n\n    insertBreak();\n  };\n\n  return editor;\n};\n\nconst Element = ({\n  attributes,\n  children,\n  element\n}) => {\n  switch (element.type) {\n    case 'table':\n      return __jsx(\"table\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }\n      }, __jsx(\"tbody\", _extends({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }\n      }), children));\n\n    case 'table-row':\n      return __jsx(\"tr\", _extends({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'table-cell':\n      return __jsx(\"td\", _extends({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 14\n        }\n      }), children);\n\n    default:\n      return __jsx(\"p\", _extends({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 14\n        }\n      }), children);\n  }\n};\n\nconst Leaf = ({\n  attributes,\n  children,\n  leaf\n}) => {\n  if (leaf.bold) {\n    children = __jsx(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 16\n      }\n    }, children);\n  }\n\n  return __jsx(\"span\", _extends({}, attributes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 10\n    }\n  }), children);\n};\n\nconst initialValue = [{\n  children: [{\n    text: 'Since the editor is based on a recursive tree model, similar to an HTML document, you can create complex nested structures, like tables:'\n  }]\n}, {\n  type: 'table',\n  children: [{\n    type: 'table-row',\n    children: [{\n      type: 'table-cell',\n      children: [{\n        text: ''\n      }]\n    }, {\n      type: 'table-cell',\n      children: [{\n        text: 'Human',\n        bold: true\n      }]\n    }, {\n      type: 'table-cell',\n      children: [{\n        text: 'Dog',\n        bold: true\n      }]\n    }, {\n      type: 'table-cell',\n      children: [{\n        text: 'Cat',\n        bold: true\n      }]\n    }]\n  }, {\n    type: 'table-row',\n    children: [{\n      type: 'table-cell',\n      children: [{\n        text: '# of Feet',\n        bold: true\n      }]\n    }, {\n      type: 'table-cell',\n      children: [{\n        text: '2'\n      }]\n    }, {\n      type: 'table-cell',\n      children: [{\n        text: '4'\n      }]\n    }, {\n      type: 'table-cell',\n      children: [{\n        text: '4'\n      }]\n    }]\n  }, {\n    type: 'table-row',\n    children: [{\n      type: 'table-cell',\n      children: [{\n        text: '# of Lives',\n        bold: true\n      }]\n    }, {\n      type: 'table-cell',\n      children: [{\n        text: '1'\n      }]\n    }, {\n      type: 'table-cell',\n      children: [{\n        text: '1'\n      }]\n    }, {\n      type: 'table-cell',\n      children: [{\n        text: '9'\n      }]\n    }]\n  }]\n}, {\n  children: [{\n    text: \"This table is just a basic example of rendering a table, and it doesn't have fancy functionality. But you could augment it to add support for navigating with arrow keys, displaying table headers, adding column and rows, or even formulas if you wanted to get really crazy!\"\n  }]\n}];\nexport default TablesExample;","map":{"version":3,"sources":["/Users/yonggu/WebstormProjects/gyedit/site/examples/tables.tsx"],"names":["React","useState","useCallback","useMemo","Slate","Editable","withReact","Editor","Range","Point","createEditor","withHistory","TablesExample","value","setValue","initialValue","renderElement","props","renderLeaf","editor","withTables","deleteBackward","deleteForward","insertBreak","unit","selection","isCollapsed","cell","nodes","match","n","type","cellPath","start","equals","anchor","end","table","Element","attributes","children","element","Leaf","leaf","bold","text"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useMemo } from 'react'\nimport { Slate, Editable, withReact } from 'slate-react'\nimport { Editor, Range, Point, Node, createEditor } from 'slate'\nimport { withHistory } from 'slate-history'\n\nconst TablesExample = () => {\n  const [value, setValue] = useState<Node[]>(initialValue)\n  const renderElement = useCallback(props => <Element {...props} />, [])\n  const renderLeaf = useCallback(props => <Leaf {...props} />, [])\n  const editor = useMemo(\n    () => withTables(withHistory(withReact(createEditor()))),\n    []\n  )\n  return (\n    <Slate editor={editor} value={value} onChange={value => setValue(value)}>\n      <Editable renderElement={renderElement} renderLeaf={renderLeaf} />\n    </Slate>\n  )\n}\n\nconst withTables = editor => {\n  const { deleteBackward, deleteForward, insertBreak } = editor\n\n  editor.deleteBackward = unit => {\n    const { selection } = editor\n\n    if (selection && Range.isCollapsed(selection)) {\n      const [cell] = Editor.nodes(editor, {\n        match: n => n.type === 'table-cell',\n      })\n\n      if (cell) {\n        const [, cellPath] = cell\n        const start = Editor.start(editor, cellPath)\n\n        if (Point.equals(selection.anchor, start)) {\n          return\n        }\n      }\n    }\n\n    deleteBackward(unit)\n  }\n\n  editor.deleteForward = unit => {\n    const { selection } = editor\n\n    if (selection && Range.isCollapsed(selection)) {\n      const [cell] = Editor.nodes(editor, {\n        match: n => n.type === 'table-cell',\n      })\n\n      if (cell) {\n        const [, cellPath] = cell\n        const end = Editor.end(editor, cellPath)\n\n        if (Point.equals(selection.anchor, end)) {\n          return\n        }\n      }\n    }\n\n    deleteForward(unit)\n  }\n\n  editor.insertBreak = () => {\n    const { selection } = editor\n\n    if (selection) {\n      const [table] = Editor.nodes(editor, { match: n => n.type === 'table' })\n\n      if (table) {\n        return\n      }\n    }\n\n    insertBreak()\n  }\n\n  return editor\n}\n\nconst Element = ({ attributes, children, element }) => {\n  switch (element.type) {\n    case 'table':\n      return (\n        <table>\n          <tbody {...attributes}>{children}</tbody>\n        </table>\n      )\n    case 'table-row':\n      return <tr {...attributes}>{children}</tr>\n    case 'table-cell':\n      return <td {...attributes}>{children}</td>\n    default:\n      return <p {...attributes}>{children}</p>\n  }\n}\n\nconst Leaf = ({ attributes, children, leaf }) => {\n  if (leaf.bold) {\n    children = <strong>{children}</strong>\n  }\n\n  return <span {...attributes}>{children}</span>\n}\n\nconst initialValue = [\n  {\n    children: [\n      {\n        text:\n          'Since the editor is based on a recursive tree model, similar to an HTML document, you can create complex nested structures, like tables:',\n      },\n    ],\n  },\n  {\n    type: 'table',\n    children: [\n      {\n        type: 'table-row',\n        children: [\n          {\n            type: 'table-cell',\n            children: [{ text: '' }],\n          },\n          {\n            type: 'table-cell',\n            children: [{ text: 'Human', bold: true }],\n          },\n          {\n            type: 'table-cell',\n            children: [{ text: 'Dog', bold: true }],\n          },\n          {\n            type: 'table-cell',\n            children: [{ text: 'Cat', bold: true }],\n          },\n        ],\n      },\n      {\n        type: 'table-row',\n        children: [\n          {\n            type: 'table-cell',\n            children: [{ text: '# of Feet', bold: true }],\n          },\n          {\n            type: 'table-cell',\n            children: [{ text: '2' }],\n          },\n          {\n            type: 'table-cell',\n            children: [{ text: '4' }],\n          },\n          {\n            type: 'table-cell',\n            children: [{ text: '4' }],\n          },\n        ],\n      },\n      {\n        type: 'table-row',\n        children: [\n          {\n            type: 'table-cell',\n            children: [{ text: '# of Lives', bold: true }],\n          },\n          {\n            type: 'table-cell',\n            children: [{ text: '1' }],\n          },\n          {\n            type: 'table-cell',\n            children: [{ text: '1' }],\n          },\n          {\n            type: 'table-cell',\n            children: [{ text: '9' }],\n          },\n        ],\n      },\n    ],\n  },\n  {\n    children: [\n      {\n        text:\n          \"This table is just a basic example of rendering a table, and it doesn't have fancy functionality. But you could augment it to add support for navigating with arrow keys, displaying table headers, adding column and rows, or even formulas if you wanted to get really crazy!\",\n      },\n    ],\n  },\n]\n\nexport default TablesExample\n"]},"metadata":{},"sourceType":"module"}