{"ast":null,"code":"var _jsxFileName = \"/Users/yonggu/WebstormProjects/slate/site/examples/hovering-toolbar.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState, useMemo, useRef, useEffect } from 'react';\nimport { Slate, Editable, ReactEditor, withReact, useSlate } from 'slate-react';\nimport { Editor, Transforms, Text, createEditor } from 'slate';\nimport { css } from 'emotion';\nimport { withHistory } from 'slate-history';\nimport { Button, Icon, Menu, Portal } from '../components';\nimport { Range } from 'slate';\n\nconst HoveringMenuExample = () => {\n  const {\n    0: value,\n    1: setValue\n  } = useState(initialValue);\n  const editor = useMemo(() => withHistory(withReact(createEditor())), []);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: value => setValue(value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 5\n    }\n  }, __jsx(HoveringToolbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }\n  }), __jsx(Editable, {\n    renderLeaf: props => __jsx(Leaf, _extends({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 30\n      }\n    })),\n    placeholder: \"Enter some text...\",\n    onDOMBeforeInput: event => {\n      event.preventDefault();\n\n      switch (event.inputType) {\n        case 'formatBold':\n          return toggleFormat(editor, 'bold');\n\n        case 'formatItalic':\n          return toggleFormat(editor, 'italic');\n\n        case 'formatUnderline':\n          return toggleFormat(editor, 'underline');\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst toggleFormat = (editor, format) => {\n  const isActive = isFormatActive(editor, format);\n  Transforms.setNodes(editor, {\n    [format]: isActive ? null : true\n  }, {\n    match: Text.isText,\n    split: true\n  });\n};\n\nconst isFormatActive = (editor, format) => {\n  const [match] = Editor.nodes(editor, {\n    match: n => n[format] === true,\n    mode: 'all'\n  });\n  return !!match;\n};\n\nconst Leaf = ({\n  attributes,\n  children,\n  leaf\n}) => {\n  if (leaf.bold) {\n    children = __jsx(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 16\n      }\n    }, children);\n  }\n\n  if (leaf.italic) {\n    children = __jsx(\"em\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 16\n      }\n    }, children);\n  }\n\n  if (leaf.underlined) {\n    children = __jsx(\"u\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 16\n      }\n    }, children);\n  }\n\n  return __jsx(\"span\", _extends({}, attributes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 10\n    }\n  }), children);\n};\n\nconst HoveringToolbar = () => {\n  const ref = useRef();\n  const editor = useSlate();\n  useEffect(() => {\n    const el = ref.current;\n    const {\n      selection\n    } = editor;\n\n    if (!el) {\n      return;\n    }\n\n    if (!selection || !ReactEditor.isFocused(editor) || Range.isCollapsed(selection) || Editor.string(editor, selection) === '') {\n      el.removeAttribute('style');\n      return;\n    }\n\n    const domSelection = window.getSelection();\n    const domRange = domSelection.getRangeAt(0);\n    const rect = domRange.getBoundingClientRect();\n    el.style.opacity = '1';\n    el.style.top = `${rect.top + window.pageYOffset - el.offsetHeight}px`;\n    el.style.left = `${rect.left + window.pageXOffset - el.offsetWidth / 2 + rect.width / 2}px`;\n  });\n  return __jsx(Portal, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, __jsx(Menu, {\n    ref: ref,\n    className: css`\n          padding: 8px 7px 6px;\n          position: absolute;\n          z-index: 1;\n          top: -10000px;\n          left: -10000px;\n          margin-top: -6px;\n          opacity: 0;\n          background-color: #222;\n          border-radius: 4px;\n          transition: opacity 0.75s;\n        `,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, __jsx(FormatButton, {\n    format: \"bold\",\n    icon: \"format_bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }), __jsx(FormatButton, {\n    format: \"italic\",\n    icon: \"format_italic\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }), __jsx(FormatButton, {\n    format: \"underlined\",\n    icon: \"format_underlined\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  })));\n};\n\nconst FormatButton = ({\n  format,\n  icon\n}) => {\n  const editor = useSlate();\n  return __jsx(Button, {\n    reversed: true,\n    active: isFormatActive(editor, format),\n    onMouseDown: event => {\n      event.preventDefault();\n      toggleFormat(editor, format);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 5\n    }\n  }, __jsx(Icon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }\n  }, icon));\n};\n\nconst initialValue = [{\n  children: [{\n    text: 'This example shows how you can make a hovering menu appear above your content, which you can use to make text '\n  }, {\n    text: 'bold',\n    bold: true\n  }, {\n    text: ', '\n  }, {\n    text: 'italic',\n    italic: true\n  }, {\n    text: ', or anything else you might want to do!'\n  }]\n}, {\n  children: [{\n    text: 'Try it out yourself! Just '\n  }, {\n    text: 'select any piece of text and the menu will appear',\n    bold: true\n  }, {\n    text: '.'\n  }]\n}];\nexport default HoveringMenuExample;","map":{"version":3,"sources":["/Users/yonggu/WebstormProjects/slate/site/examples/hovering-toolbar.tsx"],"names":["React","useState","useMemo","useRef","useEffect","Slate","Editable","ReactEditor","withReact","useSlate","Editor","Transforms","Text","createEditor","css","withHistory","Button","Icon","Menu","Portal","Range","HoveringMenuExample","value","setValue","initialValue","editor","props","event","preventDefault","inputType","toggleFormat","format","isActive","isFormatActive","setNodes","match","isText","split","nodes","n","mode","Leaf","attributes","children","leaf","bold","italic","underlined","HoveringToolbar","ref","el","current","selection","isFocused","isCollapsed","string","removeAttribute","domSelection","window","getSelection","domRange","getRangeAt","rect","getBoundingClientRect","style","opacity","top","pageYOffset","offsetHeight","left","pageXOffset","offsetWidth","width","FormatButton","icon","text"],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useRef, useEffect } from 'react'\nimport { Slate, Editable, ReactEditor, withReact, useSlate } from 'slate-react'\nimport { Editor, Transforms, Text, createEditor, Node } from 'slate'\nimport { css } from 'emotion'\nimport { withHistory } from 'slate-history'\n\nimport { Button, Icon, Menu, Portal } from '../components'\nimport { Range } from 'slate'\n\nconst HoveringMenuExample = () => {\n  const [value, setValue] = useState<Node[]>(initialValue)\n  const editor = useMemo(() => withHistory(withReact(createEditor())), [])\n\n  return (\n    <Slate editor={editor} value={value} onChange={value => setValue(value)}>\n      <HoveringToolbar />\n      <Editable\n        renderLeaf={props => <Leaf {...props} />}\n        placeholder=\"Enter some text...\"\n        onDOMBeforeInput={(event: InputEvent) => {\n          event.preventDefault()\n          switch (event.inputType) {\n            case 'formatBold':\n              return toggleFormat(editor, 'bold')\n            case 'formatItalic':\n              return toggleFormat(editor, 'italic')\n            case 'formatUnderline':\n              return toggleFormat(editor, 'underline')\n          }\n        }}\n      />\n    </Slate>\n  )\n}\n\nconst toggleFormat = (editor, format) => {\n  const isActive = isFormatActive(editor, format)\n  Transforms.setNodes(\n    editor,\n    { [format]: isActive ? null : true },\n    { match: Text.isText, split: true }\n  )\n}\n\nconst isFormatActive = (editor, format) => {\n  const [match] = Editor.nodes(editor, {\n    match: n => n[format] === true,\n    mode: 'all',\n  })\n  return !!match\n}\n\nconst Leaf = ({ attributes, children, leaf }) => {\n  if (leaf.bold) {\n    children = <strong>{children}</strong>\n  }\n\n  if (leaf.italic) {\n    children = <em>{children}</em>\n  }\n\n  if (leaf.underlined) {\n    children = <u>{children}</u>\n  }\n\n  return <span {...attributes}>{children}</span>\n}\n\nconst HoveringToolbar = () => {\n  const ref = useRef<HTMLDivElement | null>()\n  const editor = useSlate()\n\n  useEffect(() => {\n    const el = ref.current\n    const { selection } = editor\n\n    if (!el) {\n      return\n    }\n\n    if (\n      !selection ||\n      !ReactEditor.isFocused(editor) ||\n      Range.isCollapsed(selection) ||\n      Editor.string(editor, selection) === ''\n    ) {\n      el.removeAttribute('style')\n      return\n    }\n\n    const domSelection = window.getSelection()\n    const domRange = domSelection.getRangeAt(0)\n    const rect = domRange.getBoundingClientRect()\n    el.style.opacity = '1'\n    el.style.top = `${rect.top + window.pageYOffset - el.offsetHeight}px`\n    el.style.left = `${rect.left +\n      window.pageXOffset -\n      el.offsetWidth / 2 +\n      rect.width / 2}px`\n  })\n\n  return (\n    <Portal>\n      <Menu\n        ref={ref}\n        className={css`\n          padding: 8px 7px 6px;\n          position: absolute;\n          z-index: 1;\n          top: -10000px;\n          left: -10000px;\n          margin-top: -6px;\n          opacity: 0;\n          background-color: #222;\n          border-radius: 4px;\n          transition: opacity 0.75s;\n        `}\n      >\n        <FormatButton format=\"bold\" icon=\"format_bold\" />\n        <FormatButton format=\"italic\" icon=\"format_italic\" />\n        <FormatButton format=\"underlined\" icon=\"format_underlined\" />\n      </Menu>\n    </Portal>\n  )\n}\n\nconst FormatButton = ({ format, icon }) => {\n  const editor = useSlate()\n  return (\n    <Button\n      reversed\n      active={isFormatActive(editor, format)}\n      onMouseDown={event => {\n        event.preventDefault()\n        toggleFormat(editor, format)\n      }}\n    >\n      <Icon>{icon}</Icon>\n    </Button>\n  )\n}\n\nconst initialValue = [\n  {\n    children: [\n      {\n        text:\n          'This example shows how you can make a hovering menu appear above your content, which you can use to make text ',\n      },\n      { text: 'bold', bold: true },\n      { text: ', ' },\n      { text: 'italic', italic: true },\n      { text: ', or anything else you might want to do!' },\n    ],\n  },\n  {\n    children: [\n      { text: 'Try it out yourself! Just ' },\n      { text: 'select any piece of text and the menu will appear', bold: true },\n      { text: '.' },\n    ],\n  },\n]\n\nexport default HoveringMenuExample\n"]},"metadata":{},"sourceType":"module"}