{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { Slate, Editable, withReact } from 'slate-react';\nimport { Transforms, createEditor, Node } from 'slate';\nimport { withHistory } from 'slate-history';\n\nconst withLayout = editor => {\n  const {\n    normalizeNode\n  } = editor;\n\n  editor.normalizeNode = ([node, path]) => {\n    if (path.length === 0) {\n      if (editor.children.length < 1) {\n        const title = {\n          type: 'title',\n          children: [{\n            text: 'Untitled'\n          }]\n        };\n        Transforms.insertNodes(editor, title, {\n          at: path.concat(0)\n        });\n      }\n\n      if (editor.children.length < 2) {\n        const paragraph = {\n          type: 'paragraph',\n          children: [{\n            text: ''\n          }]\n        };\n        Transforms.insertNodes(editor, paragraph, {\n          at: path.concat(1)\n        });\n      }\n\n      for (const [child, childPath] of Node.children(editor, path)) {\n        const type = childPath[0] === 0 ? 'title' : 'paragraph';\n\n        if (child.type !== type) {\n          Transforms.setNodes(editor, {\n            type\n          }, {\n            at: childPath\n          });\n        }\n      }\n    }\n\n    return normalizeNode([node, path]);\n  };\n\n  return editor;\n};\n\nconst ForcedLayoutExample = () => {\n  const {\n    0: value,\n    1: setValue\n  } = useState(initialValue);\n  const renderElement = useCallback(props => __jsx(Element, props), []);\n  const editor = useMemo(() => withLayout(withHistory(withReact(createEditor()))), []);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: value => setValue(value)\n  }, __jsx(Editable, {\n    renderElement: renderElement,\n    placeholder: \"Enter a title\\u2026\",\n    spellCheck: true,\n    autoFocus: true\n  }));\n};\n\nconst Element = ({\n  attributes,\n  children,\n  element\n}) => {\n  switch (element.type) {\n    case 'title':\n      return __jsx(\"h2\", attributes, children);\n\n    case 'paragraph':\n      return __jsx(\"p\", attributes, children);\n  }\n};\n\nconst initialValue = [{\n  type: 'title',\n  children: [{\n    text: 'Enforce Your Layout!'\n  }]\n}, {\n  type: 'paragraph',\n  children: [{\n    text: 'This example shows how to enforce your layout with domain-specific constraints. This document will always have a title block at the top and at least one paragraph in the body. Try deleting them and see what happens!'\n  }]\n}];\nexport default ForcedLayoutExample;","map":null,"metadata":{},"sourceType":"module"}