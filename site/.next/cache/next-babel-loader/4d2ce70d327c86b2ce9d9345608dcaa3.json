{"ast":null,"code":"var _jsxFileName = \"/Users/yonggu/WebstormProjects/gyedit/site/examples/embeds.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState, useMemo } from 'react';\nimport { Transforms, createEditor } from 'slate';\nimport { Slate, Editable, withReact, useEditor, ReactEditor } from 'slate-react';\n\nconst EmbedsExample = () => {\n  const {\n    0: value,\n    1: setValue\n  } = useState(initialValue);\n  const editor = useMemo(() => withEmbeds(withReact(createEditor())), []);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: value => setValue(value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, __jsx(Editable, {\n    renderElement: props => __jsx(Element, _extends({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 33\n      }\n    })),\n    placeholder: \"Enter some text...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst withEmbeds = editor => {\n  const {\n    isVoid\n  } = editor;\n\n  editor.isVoid = element => element.type === 'video' ? true : isVoid(element);\n\n  return editor;\n};\n\nconst Element = props => {\n  const {\n    attributes,\n    children,\n    element\n  } = props;\n\n  switch (element.type) {\n    case 'video':\n      return __jsx(VideoElement, _extends({}, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 14\n        }\n      }));\n\n    default:\n      return __jsx(\"p\", _extends({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 14\n        }\n      }), children);\n  }\n};\n\nconst VideoElement = ({\n  attributes,\n  children,\n  element\n}) => {\n  const editor = useEditor();\n  const {\n    url\n  } = element;\n  return __jsx(\"div\", _extends({}, attributes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }), __jsx(\"div\", {\n    contentEditable: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    style: {\n      padding: '75% 0 0 0',\n      position: 'relative'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, __jsx(\"iframe\", {\n    src: `${url}?title=0&byline=0&portrait=0`,\n    frameBorder: \"0\",\n    style: {\n      position: 'absolute',\n      top: '0',\n      left: '0',\n      width: '100%',\n      height: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  })), __jsx(UrlInput, {\n    url: url,\n    onChange: val => {\n      const path = ReactEditor.findPath(editor, element);\n      Transforms.setNodes(editor, {\n        url: val\n      }, {\n        at: path\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  })), children);\n};\n\nconst UrlInput = ({\n  url,\n  onChange\n}) => {\n  const [value, setValue] = React.useState(url);\n  return __jsx(\"input\", {\n    value: value,\n    onClick: e => e.stopPropagation(),\n    style: {\n      marginTop: '5px',\n      boxSizing: 'border-box'\n    },\n    onChange: e => {\n      const newUrl = e.target.value;\n      setValue(newUrl);\n      onChange(newUrl);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  });\n};\n\nconst initialValue = [{\n  children: [{\n    text: 'In addition to simple image nodes, you can actually create complex embedded nodes. For example, this one contains an input element that lets you change the video being rendered!'\n  }]\n}, {\n  type: 'video',\n  url: 'https://player.vimeo.com/video/26689853',\n  children: [{\n    text: ''\n  }]\n}, {\n  children: [{\n    text: 'Try it out! This editor is built to handle Vimeo embeds, but you could handle any type.'\n  }]\n}];\nexport default EmbedsExample;","map":{"version":3,"sources":["/Users/yonggu/WebstormProjects/gyedit/site/examples/embeds.tsx"],"names":["React","useState","useMemo","Transforms","createEditor","Slate","Editable","withReact","useEditor","ReactEditor","EmbedsExample","value","setValue","initialValue","editor","withEmbeds","props","isVoid","element","type","Element","attributes","children","VideoElement","url","padding","position","top","left","width","height","val","path","findPath","setNodes","at","UrlInput","onChange","e","stopPropagation","marginTop","boxSizing","newUrl","target","text"],"mappings":"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","sourcesContent":["import React, { useState, useMemo } from 'react'\nimport { Transforms, createEditor, Node } from 'slate'\nimport {\n  Slate,\n  Editable,\n  withReact,\n  useEditor,\n  ReactEditor,\n  useFocused,\n  useSelected,\n} from 'slate-react'\n\nconst EmbedsExample = () => {\n  const [value, setValue] = useState<Node[]>(initialValue)\n  const editor = useMemo(() => withEmbeds(withReact(createEditor())), [])\n  return (\n    <Slate editor={editor} value={value} onChange={value => setValue(value)}>\n      <Editable\n        renderElement={props => <Element {...props} />}\n        placeholder=\"Enter some text...\"\n      />\n    </Slate>\n  )\n}\n\nconst withEmbeds = editor => {\n  const { isVoid } = editor\n  editor.isVoid = element => (element.type === 'video' ? true : isVoid(element))\n  return editor\n}\n\nconst Element = props => {\n  const { attributes, children, element } = props\n  switch (element.type) {\n    case 'video':\n      return <VideoElement {...props} />\n    default:\n      return <p {...attributes}>{children}</p>\n  }\n}\n\nconst VideoElement = ({ attributes, children, element }) => {\n  const editor = useEditor()\n  const { url } = element\n  return (\n    <div {...attributes}>\n      <div contentEditable={false}>\n        <div\n          style={{\n            padding: '75% 0 0 0',\n            position: 'relative',\n          }}\n        >\n          <iframe\n            src={`${url}?title=0&byline=0&portrait=0`}\n            frameBorder=\"0\"\n            style={{\n              position: 'absolute',\n              top: '0',\n              left: '0',\n              width: '100%',\n              height: '100%',\n            }}\n          />\n        </div>\n        <UrlInput\n          url={url}\n          onChange={val => {\n            const path = ReactEditor.findPath(editor, element)\n            Transforms.setNodes(editor, { url: val }, { at: path })\n          }}\n        />\n      </div>\n      {children}\n    </div>\n  )\n}\n\nconst UrlInput = ({ url, onChange }) => {\n  const [value, setValue] = React.useState(url)\n  return (\n    <input\n      value={value}\n      onClick={e => e.stopPropagation()}\n      style={{\n        marginTop: '5px',\n        boxSizing: 'border-box',\n      }}\n      onChange={e => {\n        const newUrl = e.target.value\n        setValue(newUrl)\n        onChange(newUrl)\n      }}\n    />\n  )\n}\n\nconst initialValue = [\n  {\n    children: [\n      {\n        text:\n          'In addition to simple image nodes, you can actually create complex embedded nodes. For example, this one contains an input element that lets you change the video being rendered!',\n      },\n    ],\n  },\n  {\n    type: 'video',\n    url: 'https://player.vimeo.com/video/26689853',\n    children: [{ text: '' }],\n  },\n  {\n    children: [\n      {\n        text:\n          'Try it out! This editor is built to handle Vimeo embeds, but you could handle any type.',\n      },\n    ],\n  },\n]\n\nexport default EmbedsExample\n"]},"metadata":{},"sourceType":"module"}