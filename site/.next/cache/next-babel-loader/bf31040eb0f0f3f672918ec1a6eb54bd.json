{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState, useMemo } from 'react';\nimport isUrl from 'is-url';\nimport { Slate, Editable, withReact, useSlate } from 'slate-react';\nimport { Transforms, Editor, Range, createEditor } from 'slate';\nimport { withHistory } from 'slate-history';\nimport { Button, Icon, Toolbar } from '../components';\n\nconst LinkExample = () => {\n  const {\n    0: value,\n    1: setValue\n  } = useState(initialValue);\n  const editor = useMemo(() => withLinks(withHistory(withReact(createEditor()))), []);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: value => setValue(value)\n  }, __jsx(Toolbar, null, __jsx(LinkButton, null)), __jsx(Editable, {\n    renderElement: props => __jsx(Element, props),\n    placeholder: \"Enter some text...\"\n  }));\n};\n\nconst withLinks = editor => {\n  const {\n    insertData,\n    insertText,\n    isInline\n  } = editor;\n\n  editor.isInline = element => {\n    return element.type === 'link' ? true : isInline(element);\n  };\n\n  editor.insertText = text => {\n    if (text && isUrl(text)) {\n      wrapLink(editor, text);\n    } else {\n      insertText(text);\n    }\n  };\n\n  editor.insertData = data => {\n    const text = data.getData('text/plain');\n\n    if (text && isUrl(text)) {\n      wrapLink(editor, text);\n    } else {\n      insertData(data);\n    }\n  };\n\n  return editor;\n};\n\nconst insertLink = (editor, url) => {\n  if (editor.selection) {\n    wrapLink(editor, url);\n  }\n};\n\nconst isLinkActive = editor => {\n  const [link] = Editor.nodes(editor, {\n    match: n => n.type === 'link'\n  });\n  return !!link;\n};\n\nconst unwrapLink = editor => {\n  Transforms.unwrapNodes(editor, {\n    match: n => n.type === 'link'\n  });\n};\n\nconst wrapLink = (editor, url) => {\n  if (isLinkActive(editor)) {\n    unwrapLink(editor);\n  }\n\n  const {\n    selection\n  } = editor;\n  const isCollapsed = selection && Range.isCollapsed(selection);\n  const link = {\n    type: 'link',\n    url,\n    children: isCollapsed ? [{\n      text: url\n    }] : []\n  };\n\n  if (isCollapsed) {\n    Transforms.insertNodes(editor, link);\n  } else {\n    Transforms.wrapNodes(editor, link, {\n      split: true\n    });\n    Transforms.collapse(editor, {\n      edge: 'end'\n    });\n  }\n};\n\nconst Element = ({\n  attributes,\n  children,\n  element\n}) => {\n  switch (element.type) {\n    case 'link':\n      return __jsx(\"a\", _extends({}, attributes, {\n        href: element.url\n      }), children);\n\n    default:\n      return __jsx(\"p\", attributes, children);\n  }\n};\n\nconst LinkButton = () => {\n  const editor = useSlate();\n  return __jsx(Button, {\n    active: isLinkActive(editor),\n    onMouseDown: event => {\n      event.preventDefault();\n      const url = window.prompt('Enter the URL of the link:');\n      if (!url) return;\n      insertLink(editor, url);\n    }\n  }, __jsx(Icon, null, \"link\"));\n};\n\nconst initialValue = [{\n  children: [{\n    text: 'In addition to block nodes, you can create inline nodes, like '\n  }, {\n    type: 'link',\n    url: 'https://en.wikipedia.org/wiki/Hypertext',\n    children: [{\n      text: 'hyperlinks'\n    }]\n  }, {\n    text: '!'\n  }]\n}, {\n  children: [{\n    text: 'This example shows hyperlinks in action. It features two ways to add links. You can either add a link via the toolbar icon above, or if you want in on a little secret, copy a URL to your keyboard and paste it while a range of text is selected.'\n  }]\n}];\nexport default LinkExample;","map":null,"metadata":{},"sourceType":"module"}