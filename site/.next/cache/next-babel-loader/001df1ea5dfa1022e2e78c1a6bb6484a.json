{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/yonggu/WebstormProjects/slate/site/examples/editable-voids.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n            padding: 20px;\\n            border: 2px solid #ddd;\\n          \"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n            margin: 8px 0;\\n          \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n          box-shadow: 0 0 0 3px #ddd;\\n          padding: 8px;\\n        \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  width: unset;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useMemo } from 'react';\nimport { Transforms, createEditor } from 'slate';\nimport { Slate, Editable, useEditor, withReact } from 'slate-react';\nimport { withHistory } from 'slate-history';\nimport { css } from 'emotion';\nimport RichTextEditor from './richtext';\nimport { Button, Icon, Toolbar } from '../components';\n\nvar EditableVoidsExample = function EditableVoidsExample() {\n  _s();\n\n  var _useState = useState(initialValue),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var editor = useMemo(function () {\n    return withEditableVoids(withHistory(withReact(createEditor())));\n  }, []);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: setValue,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, __jsx(Toolbar, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, __jsx(InsertEditableVoidButton, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  })), __jsx(Editable, {\n    renderElement: function renderElement(props) {\n      return __jsx(Element, _extends({}, props, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 33\n        }\n      }));\n    },\n    placeholder: \"Enter some text...\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(EditableVoidsExample, \"4ewp4wBHt4y6QUDh2ipfoCLaKxY=\");\n\n_c = EditableVoidsExample;\n\nvar withEditableVoids = function withEditableVoids(editor) {\n  var isVoid = editor.isVoid;\n\n  editor.isVoid = function (element) {\n    return element.type === 'editable-void' ? true : isVoid(element);\n  };\n\n  return editor;\n};\n\nvar insertEditableVoid = function insertEditableVoid(editor) {\n  var text = {\n    text: ''\n  };\n  var voidNode = {\n    type: 'editable-void',\n    children: [text]\n  };\n  Transforms.insertNodes(editor, voidNode);\n};\n\nvar Element = function Element(props) {\n  var attributes = props.attributes,\n      children = props.children,\n      element = props.element;\n\n  switch (element.type) {\n    case 'editable-void':\n      return __jsx(EditableVoidElement, _extends({}, props, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 14\n        }\n      }));\n\n    default:\n      return __jsx(\"p\", _extends({}, attributes, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 14\n        }\n      }), children);\n  }\n};\n\n_c2 = Element;\nvar unsetWidthStyle = css(_templateObject());\n\nvar EditableVoidElement = function EditableVoidElement(_ref) {\n  _s2();\n\n  var attributes = _ref.attributes,\n      children = _ref.children,\n      element = _ref.element;\n\n  var _useState2 = useState(''),\n      inputValue = _useState2[0],\n      setInputValue = _useState2[1];\n\n  return (// Need contentEditable=false or Firefox has issues with certain input types.\n    __jsx(\"div\", _extends({}, attributes, {\n      contentEditable: false,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 5\n      }\n    }), __jsx(\"div\", {\n      className: css(_templateObject2()),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }\n    }, __jsx(\"h4\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }\n    }, \"Name:\"), __jsx(\"input\", {\n      className: css(_templateObject3()),\n      type: \"text\",\n      value: inputValue,\n      onChange: function onChange(e) {\n        setInputValue(e.target.value);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }), __jsx(\"h4\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }, \"Left or right handed:\"), __jsx(\"input\", {\n      className: unsetWidthStyle,\n      type: \"radio\",\n      name: \"handedness\",\n      value: \"left\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }\n    }), ' ', \"Left\", __jsx(\"br\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }\n    }), __jsx(\"input\", {\n      className: unsetWidthStyle,\n      type: \"radio\",\n      name: \"handedness\",\n      value: \"right\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }), ' ', \"Right\", __jsx(\"h4\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }, \"Tell us about yourself:\"), __jsx(\"div\", {\n      className: css(_templateObject4()),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }\n    }, __jsx(RichTextEditor, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }\n    }))), children)\n  );\n};\n\n_s2(EditableVoidElement, \"SORcW8kVWUa8fZ+un8oXhp/OLnk=\");\n\n_c3 = EditableVoidElement;\n\nvar InsertEditableVoidButton = function InsertEditableVoidButton() {\n  _s3();\n\n  var editor = useEditor();\n  return __jsx(Button, {\n    onMouseDown: function onMouseDown(event) {\n      event.preventDefault();\n      insertEditableVoid(editor);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 5\n    }\n  }, __jsx(Icon, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }\n  }, \"add\"));\n};\n\n_s3(InsertEditableVoidButton, \"t0rsU/t1p+LiVrRpHUSgNnV9Lz4=\", false, function () {\n  return [useEditor];\n});\n\n_c4 = InsertEditableVoidButton;\nvar initialValue = [{\n  type: 'paragraph',\n  children: [{\n    text: 'In addition to nodes that contain editable text, you can insert void nodes, which can also contain editable elements, inputs, or an entire other Slate editor.'\n  }]\n}, {\n  type: 'editable-void',\n  children: [{\n    text: ''\n  }]\n}, {\n  type: 'paragraph',\n  children: [{\n    text: ''\n  }]\n}];\nexport default EditableVoidsExample;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"EditableVoidsExample\");\n$RefreshReg$(_c2, \"Element\");\n$RefreshReg$(_c3, \"EditableVoidElement\");\n$RefreshReg$(_c4, \"InsertEditableVoidButton\");","map":{"version":3,"sources":["/Users/yonggu/WebstormProjects/slate/site/examples/editable-voids.tsx"],"names":["React","useState","useMemo","Transforms","createEditor","Slate","Editable","useEditor","withReact","withHistory","css","RichTextEditor","Button","Icon","Toolbar","EditableVoidsExample","initialValue","value","setValue","editor","withEditableVoids","props","isVoid","element","type","insertEditableVoid","text","voidNode","children","insertNodes","Element","attributes","unsetWidthStyle","EditableVoidElement","inputValue","setInputValue","e","target","InsertEditableVoidButton","event","preventDefault"],"mappings":"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","sourcesContent":["import React, { useState, useMemo } from 'react'\nimport { Transforms, createEditor, Node } from 'slate'\nimport { Slate, Editable, useEditor, withReact } from 'slate-react'\nimport { withHistory } from 'slate-history'\nimport { css } from 'emotion'\n\nimport RichTextEditor from './richtext'\nimport { Button, Icon, Toolbar } from '../components'\n\nconst EditableVoidsExample = () => {\n  const [value, setValue] = useState<Node[]>(initialValue)\n  const editor = useMemo(\n    () => withEditableVoids(withHistory(withReact(createEditor()))),\n    []\n  )\n\n  return (\n    <Slate editor={editor} value={value} onChange={setValue}>\n      <Toolbar>\n        <InsertEditableVoidButton />\n      </Toolbar>\n\n      <Editable\n        renderElement={props => <Element {...props} />}\n        placeholder=\"Enter some text...\"\n      />\n    </Slate>\n  )\n}\n\nconst withEditableVoids = editor => {\n  const { isVoid } = editor\n\n  editor.isVoid = element => {\n    return element.type === 'editable-void' ? true : isVoid(element)\n  }\n\n  return editor\n}\n\nconst insertEditableVoid = editor => {\n  const text = { text: '' }\n  const voidNode = { type: 'editable-void', children: [text] }\n  Transforms.insertNodes(editor, voidNode)\n}\n\nconst Element = props => {\n  const { attributes, children, element } = props\n\n  switch (element.type) {\n    case 'editable-void':\n      return <EditableVoidElement {...props} />\n    default:\n      return <p {...attributes}>{children}</p>\n  }\n}\n\nconst unsetWidthStyle = css`\n  width: unset;\n`\n\nconst EditableVoidElement = ({ attributes, children, element }) => {\n  const [inputValue, setInputValue] = useState('')\n\n  return (\n    // Need contentEditable=false or Firefox has issues with certain input types.\n    <div {...attributes} contentEditable={false}>\n      <div\n        className={css`\n          box-shadow: 0 0 0 3px #ddd;\n          padding: 8px;\n        `}\n      >\n        <h4>Name:</h4>\n        <input\n          className={css`\n            margin: 8px 0;\n          `}\n          type=\"text\"\n          value={inputValue}\n          onChange={e => {\n            setInputValue(e.target.value)\n          }}\n        />\n        <h4>Left or right handed:</h4>\n        <input\n          className={unsetWidthStyle}\n          type=\"radio\"\n          name=\"handedness\"\n          value=\"left\"\n        />{' '}\n        Left\n        <br />\n        <input\n          className={unsetWidthStyle}\n          type=\"radio\"\n          name=\"handedness\"\n          value=\"right\"\n        />{' '}\n        Right\n        <h4>Tell us about yourself:</h4>\n        <div\n          className={css`\n            padding: 20px;\n            border: 2px solid #ddd;\n          `}\n        >\n          <RichTextEditor />\n        </div>\n      </div>\n      {children}\n    </div>\n  )\n}\n\nconst InsertEditableVoidButton = () => {\n  const editor = useEditor()\n  return (\n    <Button\n      onMouseDown={event => {\n        event.preventDefault()\n        insertEditableVoid(editor)\n      }}\n    >\n      <Icon>add</Icon>\n    </Button>\n  )\n}\n\nconst initialValue = [\n  {\n    type: 'paragraph',\n    children: [\n      {\n        text:\n          'In addition to nodes that contain editable text, you can insert void nodes, which can also contain editable elements, inputs, or an entire other Slate editor.',\n      },\n    ],\n  },\n  {\n    type: 'editable-void',\n    children: [{ text: '' }],\n  },\n  {\n    type: 'paragraph',\n    children: [\n      {\n        text: '',\n      },\n    ],\n  },\n]\n\nexport default EditableVoidsExample\n"]},"metadata":{},"sourceType":"module"}