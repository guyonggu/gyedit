{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { Editor, Point, Range, Transforms } from \"slate\";\nimport { fixList } from \"./util\";\nvar SHORTCUTS = {\n  '*': 'ul-item',\n  '-': 'ul-item',\n  '+': 'ul-item',\n  '>': 'block-quote',\n  '#': 'heading-one',\n  '##': 'heading-two',\n  '###': 'heading-three',\n  '####': 'heading-four',\n  '#####': 'heading-five',\n  '######': 'heading-six'\n};\nexport var withMarkdown = function withMarkdown(editor) {\n  var deleteBackward = editor.deleteBackward,\n      insertText = editor.insertText,\n      insertBreak = editor.insertBreak,\n      deleteFragment = editor.deleteFragment;\n\n  var insertBreak2 = function insertBreak2() {\n    var handled = false;\n    var selection = editor.selection;\n\n    if (!selection || Range.isExpanded(selection)) {\n      insertBreak();\n      return;\n    }\n\n    var block = Editor.above(editor, {\n      match: function match(n) {\n        return Editor.isBlock(editor, n);\n      }\n    });\n\n    if (!block || Editor.isEditor(block[0])) {\n      insertBreak();\n      return;\n    }\n\n    var parent = Editor.parent(editor, block[1]);\n\n    if (!parent || Editor.isEditor(parent[0])) {\n      insertBreak();\n      return;\n    }\n\n    var text = Editor.string(editor, block[1]);\n\n    if (text) {\n      insertBreak();\n      return;\n    }\n\n    var blockPath = block[1];\n    var indent = 0;\n\n    if (typeof parent[0].indent === \"number\") {\n      indent = parent[0].indent > 1 ? parent[0].indent - 1 : 0;\n    }\n\n    Transforms.setNodes(editor, {\n      type: 'paragraph',\n      indent: indent\n    }, {\n      at: blockPath\n    }); // if it is the last child\n\n    if (blockPath[blockPath.length - 1] === parent[0].children.length - 1) {\n      Transforms.liftNodes(editor, {\n        at: blockPath\n      });\n      return;\n    }\n  };\n\n  editor.insertBreak = function () {\n    insertBreak2();\n    fixList(editor);\n  };\n\n  editor.insertText = function (text) {\n    var selection = editor.selection;\n\n    if (text !== ' ' || !selection || !Range.isCollapsed(selection)) {\n      insertText(text);\n      return;\n    }\n\n    var anchor = selection.anchor;\n    var block = Editor.above(editor, {\n      match: function match(n) {\n        return Editor.isBlock(editor, n);\n      }\n    });\n    var path = block ? block[1] : [];\n    var start = Editor.start(editor, path);\n    var range = {\n      anchor: anchor,\n      focus: start\n    };\n    var beforeText = Editor.string(editor, range);\n    var tabs = 0;\n\n    var _iterator = _createForOfIteratorHelper(beforeText),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var c = _step.value;\n\n        if (c === '\\t') {\n          tabs++;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    beforeText = beforeText.substr(tabs);\n    var blockType = block[0].type;\n    var inList = typeof blockType === 'string' ? blockType === 'list-item' : false;\n    var type = SHORTCUTS[beforeText];\n\n    if (!type && /^[1-9]\\d*\\./.test(beforeText)) {\n      type = 'ol-item';\n    }\n\n    var list;\n\n    switch (type) {\n      case 'ul-item':\n        if (inList) {\n          insertText(text);\n          break;\n        }\n\n        Transforms.select(editor, range);\n        Transforms[\"delete\"](editor);\n        Transforms.setNodes(editor, {\n          type: 'list-item'\n        }, {\n          match: function match(n) {\n            return Editor.isBlock(editor, n);\n          }\n        });\n        list = {\n          type: 'bulleted-list',\n          indent: tabs,\n          children: []\n        };\n        Transforms.wrapNodes(editor, list, {\n          match: function match(n) {\n            return n.type === 'list-item';\n          }\n        });\n        fixList(editor);\n        break;\n\n      case 'ol-item':\n        if (inList) {\n          insertText(text);\n          break;\n        }\n\n        var found = beforeText.match(/^([\\t]*)\\d+\\./);\n        Transforms.select(editor, range);\n        Transforms[\"delete\"](editor);\n        Transforms.setNodes(editor, {\n          type: 'list-item'\n        }, {\n          match: function match(n) {\n            return Editor.isBlock(editor, n);\n          }\n        });\n        list = {\n          type: 'numbered-list',\n          indent: tabs,\n          children: []\n        };\n        Transforms.wrapNodes(editor, list, {\n          match: function match(n) {\n            return n.type === 'list-item';\n          }\n        });\n        fixList(editor);\n        break;\n\n      case 'block-quote':\n        if (inList || blockType !== 'paragraph') {\n          insertText(text);\n          break;\n        }\n\n        var parent = Editor.above(editor, {\n          match: function match(n) {\n            return n.type === 'block-quote';\n          }\n        });\n\n        if (parent) {\n          insertText(text);\n          break;\n        }\n\n        Transforms.select(editor, range);\n        Transforms[\"delete\"](editor);\n        Transforms.wrapNodes(editor, {\n          type: 'block-quote',\n          children: []\n        }, {\n          match: function match(n) {\n            return n.type === 'paragraph';\n          }\n        });\n        break;\n\n      default:\n        insertText(text);\n    }\n\n    return;\n  };\n\n  var deleteBackward2 = function deleteBackward2(unit) {\n    console.log(\"editor.deleteBackward:\", unit);\n    var selection = editor.selection;\n\n    if (!selection || Range.isExpanded(selection)) {\n      deleteBackward(unit);\n      return;\n    }\n\n    var match = Editor.above(editor, {\n      match: function match(n) {\n        return Editor.isBlock(editor, n);\n      }\n    });\n\n    if (!match || Editor.isEditor(match[0])) {\n      deleteBackward(unit);\n      return;\n    }\n\n    var _ref = match,\n        _ref2 = _slicedToArray(_ref, 2),\n        block = _ref2[0],\n        path = _ref2[1];\n\n    var start = Editor.start(editor, path);\n\n    if (Point.equals(selection.anchor, start)) {\n      if (block.type === 'list-item') {\n        var _ref3 = Editor.parent(editor, path),\n            _ref4 = _slicedToArray(_ref3, 1),\n            listNode = _ref4[0];\n\n        if (listNode && listNode.indent > 0) {\n          Editor.withoutNormalizing(editor, function () {\n            Transforms.wrapNodes(editor, {\n              type: listNode.type,\n              indent: listNode.indent - 1,\n              children: []\n            }, {\n              at: path\n            });\n            Transforms.liftNodes(editor, {\n              at: path\n            });\n          });\n        } else {\n          Transforms.setNodes(editor, {\n            type: 'paragraph'\n          });\n          Transforms.unwrapNodes(editor, {\n            match: function match(n) {\n              return typeof n.type === 'string' && n.type.endsWith('-list');\n            },\n            split: true\n          }); // deleteBackward(unit)\n        }\n      } else if (block.type === 'paragraph') {\n        if (block.indent && block.indent > 0) {\n          Transforms.setNodes(editor, {\n            indent: block.indent - 1\n          }, {\n            at: path\n          });\n          return;\n        } else {\n          deleteBackward(unit);\n        }\n      } else {\n        Transforms.setNodes(editor, {\n          type: 'paragraph'\n        });\n      }\n\n      return;\n    } // end if at start\n\n\n    deleteBackward(unit);\n  };\n\n  editor.deleteBackward = function (unit) {\n    console.log(\"editor.deleteBackward:\", unit);\n    deleteBackward2(unit);\n    fixList(editor);\n  };\n\n  editor.deleteFragment = function () {\n    console.log(\"editor.deleteFragment:\");\n    deleteFragment();\n  };\n\n  return editor;\n};\n\nvar beforeTextInBlock = function beforeTextInBlock(editor) {\n  var selection = editor.selection;\n\n  if (!selection) {\n    return '';\n  }\n\n  var block = Editor.above(editor, {\n    match: function match(n) {\n      return Editor.isBlock(editor, n);\n    }\n  });\n  var path = block ? block[1] : [];\n  var start = Editor.start(editor, path);\n  var range = {\n    anchor: Range.start(editor.selection),\n    focus: start\n  };\n  var beforeText = Editor.string(editor, range);\n  return beforeText;\n};","map":{"version":3,"sources":["/Users/yonggu/WebstormProjects/gyedit/src/withMarkdown.ts"],"names":["Editor","Point","Range","Transforms","fixList","SHORTCUTS","withMarkdown","editor","deleteBackward","insertText","insertBreak","deleteFragment","insertBreak2","handled","selection","isExpanded","block","above","match","n","isBlock","isEditor","parent","text","string","blockPath","indent","setNodes","type","at","length","children","liftNodes","isCollapsed","anchor","path","start","range","focus","beforeText","tabs","c","substr","blockType","inList","test","list","select","wrapNodes","found","deleteBackward2","unit","console","log","equals","listNode","withoutNormalizing","unwrapNodes","endsWith","split","beforeTextInBlock"],"mappings":"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","sourcesContent":["import {Editor, Path, Point, Range, Transforms, NodeEntry} from \"slate\";\nimport {ListNode} from './types'\nimport {fixList} from \"./util\";\n\nconst SHORTCUTS = {\n    '*': 'ul-item',\n    '-': 'ul-item',\n    '+': 'ul-item',\n    '>': 'block-quote',\n    '#': 'heading-one',\n    '##': 'heading-two',\n    '###': 'heading-three',\n    '####': 'heading-four',\n    '#####': 'heading-five',\n    '######': 'heading-six',\n}\n\nexport const withMarkdown = (editor: Editor) => {\n    const {deleteBackward, insertText, insertBreak, deleteFragment} = editor\n\n    const insertBreak2 = () => {\n        let handled = false\n        const {selection} = editor\n\n        if (!selection || Range.isExpanded(selection)) {\n            insertBreak()\n            return\n        }\n        const block = Editor.above(editor, {\n            match: n => Editor.isBlock(editor, n),\n        })\n        if (!block || Editor.isEditor(block[0])) {\n            insertBreak()\n            return\n        }\n        const parent = Editor.parent(editor, block[1])\n        if (!parent || Editor.isEditor(parent[0])) {\n            insertBreak()\n            return\n        }\n        const text = Editor.string(editor, block[1])\n        if (text) {\n            insertBreak()\n            return\n        }\n        const blockPath: Path = block[1]\n        let indent = 0\n        if (typeof parent[0].indent === \"number\") {\n            indent = parent[0].indent > 1 ? parent[0].indent - 1 : 0\n        }\n        Transforms.setNodes(editor, {type: 'paragraph', indent}, {at: blockPath})\n        // if it is the last child\n        if (blockPath[blockPath.length - 1] === parent[0].children.length - 1) {\n            Transforms.liftNodes(editor, {at: blockPath})\n            return\n        }\n    }\n    editor.insertBreak = () => {\n        insertBreak2()\n        fixList(editor)\n    }\n    editor.insertText = (text: string) => {\n        const {selection} = editor\n        if ((text !== ' ') || !selection || !Range.isCollapsed(selection)) {\n            insertText(text)\n            return\n        }\n\n        const {anchor} = selection\n        const block = Editor.above(editor, {\n            match: n => Editor.isBlock(editor, n),\n        })\n        const path = block ? block[1] : []\n        const start = Editor.start(editor, path)\n        const range = {anchor, focus: start}\n        let beforeText = Editor.string(editor, range)\n        let tabs = 0\n        for (let c of beforeText) {\n            if (c === '\\t') {\n                tabs++\n            }\n        }\n        beforeText = beforeText.substr(tabs)\n        const blockType = block![0].type as string\n        let inList = typeof blockType === 'string' ? blockType === 'list-item' : false\n\n\n        let type = SHORTCUTS[beforeText]\n\n        if (!type && /^[1-9]\\d*\\./.test(beforeText)) {\n            type = 'ol-item'\n        }\n        let list\n        switch (type) {\n            case 'ul-item':\n                if (inList) {\n                    insertText(text)\n                    break\n                }\n                Transforms.select(editor, range)\n                Transforms.delete(editor)\n                Transforms.setNodes(\n                    editor,\n                    {type: 'list-item'},\n                    {match: n => Editor.isBlock(editor, n)}\n                )\n                list = {type: 'bulleted-list', indent: tabs, children: []}\n                Transforms.wrapNodes(editor, list, {\n                    match: n => n.type === 'list-item',\n                })\n                fixList(editor)\n                break\n            case 'ol-item':\n                if (inList) {\n                    insertText(text)\n                    break\n                }\n                const found = beforeText.match(/^([\\t]*)\\d+\\./)\n                Transforms.select(editor, range)\n                Transforms.delete(editor)\n                Transforms.setNodes(\n                    editor,\n                    {type: 'list-item'},\n                    {match: n => Editor.isBlock(editor, n)}\n                )\n                list = {type: 'numbered-list', indent: tabs, children: []}\n                Transforms.wrapNodes(editor, list, {\n                    match: n => n.type === 'list-item',\n                })\n                fixList(editor)\n                break\n            case 'block-quote':\n                if (inList || blockType !== 'paragraph') {\n                    insertText(text)\n                    break\n                }\n                let parent = Editor.above(editor, {match: n => n.type === 'block-quote'})\n                if (parent) {\n                    insertText(text)\n                    break\n                }\n                Transforms.select(editor, range)\n                Transforms.delete(editor)\n                Transforms.wrapNodes(editor, {type: 'block-quote', children: []}, {\n                    match: n => n.type === 'paragraph'\n                })\n                break\n            default:\n                insertText(text)\n        }\n        return\n    }\n\n    const deleteBackward2 = (unit: 'character' | 'word' | 'line' | 'block') => {\n        console.log(\"editor.deleteBackward:\", unit)\n        const {selection} = editor\n\n        if (!selection || Range.isExpanded(selection)) {\n            deleteBackward(unit)\n            return\n        }\n        const match = Editor.above(editor, {\n            match: n => Editor.isBlock(editor, n),\n        })\n\n        if (!match || Editor.isEditor(match[0])) {\n            deleteBackward(unit)\n            return\n        }\n        const [block, path] = match as NodeEntry<ListNode>\n        const start = Editor.start(editor, path)\n\n        if (Point.equals(selection.anchor, start)) {\n            if (block.type === 'list-item') {\n                const [listNode] = Editor.parent(editor, path) as NodeEntry<ListNode>\n                if (listNode && (listNode.indent as number > 0)) {\n                    Editor.withoutNormalizing(editor, () => {\n                        Transforms.wrapNodes(editor, {\n                            type: listNode.type,\n                            indent: listNode.indent! - 1,\n                            children: []\n                        }, {at: path})\n                        Transforms.liftNodes(editor, {at: path})\n                    })\n                } else {\n                    Transforms.setNodes(editor, {type: 'paragraph'})\n                    Transforms.unwrapNodes(editor, {\n                        match: n => (typeof n.type === 'string' && n.type.endsWith('-list')),\n                        split: true,\n                    })\n                    // deleteBackward(unit)\n                }\n            } else if (block.type === 'paragraph') {\n                if (block.indent && block.indent > 0) {\n                    Transforms.setNodes(editor, {indent: block.indent - 1}, {at: path})\n                    return\n                } else {\n                    deleteBackward(unit)\n                }\n            } else {\n                Transforms.setNodes(editor, {type: 'paragraph'})\n            }\n            return\n        } // end if at start\n        deleteBackward(unit)\n    }\n\n    editor.deleteBackward = (unit: 'character' | 'word' | 'line' | 'block') => {\n        console.log(\"editor.deleteBackward:\", unit)\n        deleteBackward2(unit)\n        fixList(editor)\n    }\n\n    editor.deleteFragment = ()=>{\n        console.log(\"editor.deleteFragment:\")\n        deleteFragment()\n    }\n\n    return editor\n}\n\nconst beforeTextInBlock = (editor: Editor): string => {\n    const {selection} = editor\n    if (!selection) {\n        return ''\n    }\n    const block = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n    })\n    const path = block ? block[1] : []\n    const start = Editor.start(editor, path)\n    const range = {anchor: Range.start(editor.selection!), focus: start}\n    let beforeText = Editor.string(editor, range)\n    return beforeText\n}"]},"metadata":{},"sourceType":"module"}