{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useState, useMemo } from 'react';\nimport { Transforms, createEditor } from 'slate';\nimport { Slate, Editable, withReact, useEditor, ReactEditor } from 'slate-react';\n\nvar EmbedsExample = function EmbedsExample() {\n  var _useState = useState(initialValue),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var editor = useMemo(function () {\n    return withEmbeds(withReact(createEditor()));\n  }, []);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: function onChange(value) {\n      return setValue(value);\n    }\n  }, __jsx(Editable, {\n    renderElement: function renderElement(props) {\n      return __jsx(Element, props);\n    },\n    placeholder: \"Enter some text...\"\n  }));\n};\n\nvar withEmbeds = function withEmbeds(editor) {\n  var isVoid = editor.isVoid;\n\n  editor.isVoid = function (element) {\n    return element.type === 'video' ? true : isVoid(element);\n  };\n\n  return editor;\n};\n\nvar Element = function Element(props) {\n  var attributes = props.attributes,\n      children = props.children,\n      element = props.element;\n\n  switch (element.type) {\n    case 'video':\n      return __jsx(VideoElement, props);\n\n    default:\n      return __jsx(\"p\", attributes, children);\n  }\n};\n\nvar VideoElement = function VideoElement(_ref) {\n  var attributes = _ref.attributes,\n      children = _ref.children,\n      element = _ref.element;\n  var editor = useEditor();\n  var url = element.url;\n  return __jsx(\"div\", attributes, __jsx(\"div\", {\n    contentEditable: false\n  }, __jsx(\"div\", {\n    style: {\n      padding: '75% 0 0 0',\n      position: 'relative'\n    }\n  }, __jsx(\"iframe\", {\n    src: \"\".concat(url, \"?title=0&byline=0&portrait=0\"),\n    frameBorder: \"0\",\n    style: {\n      position: 'absolute',\n      top: '0',\n      left: '0',\n      width: '100%',\n      height: '100%'\n    }\n  })), __jsx(UrlInput, {\n    url: url,\n    onChange: function onChange(val) {\n      var path = ReactEditor.findPath(editor, element);\n      Transforms.setNodes(editor, {\n        url: val\n      }, {\n        at: path\n      });\n    }\n  })), children);\n};\n\nvar UrlInput = function UrlInput(_ref2) {\n  var url = _ref2.url,\n      _onChange = _ref2.onChange;\n\n  var _React$useState = React.useState(url),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      value = _React$useState2[0],\n      setValue = _React$useState2[1];\n\n  return __jsx(\"input\", {\n    value: value,\n    onClick: function onClick(e) {\n      return e.stopPropagation();\n    },\n    style: {\n      marginTop: '5px',\n      boxSizing: 'border-box'\n    },\n    onChange: function onChange(e) {\n      var newUrl = e.target.value;\n      setValue(newUrl);\n\n      _onChange(newUrl);\n    }\n  });\n};\n\nvar initialValue = [{\n  children: [{\n    text: 'In addition to simple image nodes, you can actually create complex embedded nodes. For example, this one contains an input element that lets you change the video being rendered!'\n  }]\n}, {\n  type: 'video',\n  url: 'https://player.vimeo.com/video/26689853',\n  children: [{\n    text: ''\n  }]\n}, {\n  children: [{\n    text: 'Try it out! This editor is built to handle Vimeo embeds, but you could handle any type.'\n  }]\n}];\nexport default EmbedsExample;","map":null,"metadata":{},"sourceType":"module"}