{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState, useMemo, useCallback } from 'react';\nimport { Slate, Editable, withReact, useEditor, useReadOnly, ReactEditor } from 'slate-react';\nimport { Editor, Transforms, Range, Point, createEditor } from 'slate';\nimport { css } from 'emotion';\nimport { withHistory } from 'slate-history';\n\nconst CheckListsExample = () => {\n  const {\n    0: value,\n    1: setValue\n  } = useState(initialValue);\n  const renderElement = useCallback(props => __jsx(Element, props), []);\n  const editor = useMemo(() => withChecklists(withHistory(withReact(createEditor()))), []);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: value => setValue(value)\n  }, __jsx(Editable, {\n    renderElement: renderElement,\n    placeholder: \"Get to work\\u2026\",\n    spellCheck: true,\n    autoFocus: true\n  }));\n};\n\nconst withChecklists = editor => {\n  const {\n    deleteBackward\n  } = editor;\n\n  editor.deleteBackward = (...args) => {\n    const {\n      selection\n    } = editor;\n\n    if (selection && Range.isCollapsed(selection)) {\n      const [match] = Editor.nodes(editor, {\n        match: n => n.type === 'check-list-item'\n      });\n\n      if (match) {\n        const [, path] = match;\n        const start = Editor.start(editor, path);\n\n        if (Point.equals(selection.anchor, start)) {\n          Transforms.setNodes(editor, {\n            type: 'paragraph'\n          }, {\n            match: n => n.type === 'check-list-item'\n          });\n          return;\n        }\n      }\n    }\n\n    deleteBackward(...args);\n  };\n\n  return editor;\n};\n\nconst Element = props => {\n  const {\n    attributes,\n    children,\n    element\n  } = props;\n\n  switch (element.type) {\n    case 'check-list-item':\n      return __jsx(CheckListItemElement, props);\n\n    default:\n      return __jsx(\"p\", attributes, children);\n  }\n};\n\nconst CheckListItemElement = ({\n  attributes,\n  children,\n  element\n}) => {\n  const editor = useEditor();\n  const readOnly = useReadOnly();\n  const {\n    checked\n  } = element;\n  return __jsx(\"div\", _extends({}, attributes, {\n    className: css`\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n\n        & + & {\n          margin-top: 0;\n        }\n      `\n  }), __jsx(\"span\", {\n    contentEditable: false,\n    className: css`\n          margin-right: 0.75em;\n        `\n  }, __jsx(\"input\", {\n    type: \"checkbox\",\n    checked: checked,\n    onChange: event => {\n      const path = ReactEditor.findPath(editor, element);\n      Transforms.setNodes(editor, {\n        checked: event.target.checked\n      }, {\n        at: path\n      });\n    }\n  })), __jsx(\"span\", {\n    contentEditable: !readOnly,\n    suppressContentEditableWarning: true,\n    className: css`\n          flex: 1;\n          opacity: ${checked ? 0.666 : 1};\n          text-decoration: ${checked ? 'none' : 'line-through'};\n\n          &:focus {\n            outline: none;\n          }\n        `\n  }, children));\n};\n\nconst initialValue = [{\n  children: [{\n    text: 'With Slate you can build complex block types that have their own embedded content and behaviors, like rendering checkboxes inside check list items!'\n  }]\n}, {\n  type: 'check-list-item',\n  checked: true,\n  children: [{\n    text: 'Slide to the left.'\n  }]\n}, {\n  type: 'check-list-item',\n  checked: true,\n  children: [{\n    text: 'Slide to the right.'\n  }]\n}, {\n  type: 'check-list-item',\n  checked: false,\n  children: [{\n    text: 'Criss-cross.'\n  }]\n}, {\n  type: 'check-list-item',\n  checked: true,\n  children: [{\n    text: 'Criss-cross!'\n  }]\n}, {\n  type: 'check-list-item',\n  checked: false,\n  children: [{\n    text: 'Cha cha real smoothâ€¦'\n  }]\n}, {\n  type: 'check-list-item',\n  checked: false,\n  children: [{\n    text: \"Let's go to work!\"\n  }]\n}, {\n  children: [{\n    text: 'Try it out for yourself!'\n  }]\n}];\nexport default CheckListsExample;","map":null,"metadata":{},"sourceType":"module"}