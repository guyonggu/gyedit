{"ast":null,"code":"import { Editor, Range, Path, Transforms } from 'slate';\nimport { fixList } from \"./util\";\nexport const onKeyDown = () => (e, editor) => {\n  let {\n    selection\n  } = editor;\n  if (!selection) return;\n\n  if (e.key === 'Tab') {\n    e.preventDefault();\n    onTab(editor); // Editor.insertText(editor,'\\t')\n  }\n};\nexport const onTab = editor => {\n  Editor.withoutNormalizing(editor, () => {\n    const selection = editor.selection;\n    const entry = Editor.above(editor, {\n      match: n => Editor.isBlock(editor, n)\n    });\n\n    if (!entry) {\n      return;\n    }\n\n    if (entry[0].type == 'list-item') {\n      if (Range.isCollapsed(selection)) {\n        const path = entry[1];\n        const start = Editor.start(editor, path);\n        const range = {\n          anchor: selection.anchor,\n          focus: start\n        };\n        let beforeText = Editor.string(editor, range);\n\n        if (beforeText.length) {\n          Editor.insertText(editor, '    ');\n          return;\n        }\n      } // // move down with tab\n      // const tab = !e.shiftKey;\n      // if (tab) {\n\n\n      moveListItemDown(editor, entry[1]);\n      fixList(editor); // }\n    } else {\n      let p = selection.anchor;\n\n      if (Range.isExpanded(selection)) {\n        p = Editor.start(editor, p.path);\n      }\n\n      const ref = Editor.rangeRef(editor, selection);\n      Transforms.select(editor, p);\n      Editor.insertText(editor, '    ');\n      Transforms.select(editor, ref.unref());\n    }\n  });\n};\n\nfunction moveListItemDown(editor, path) {\n  let entry = Editor.parent(editor, path);\n  let node = entry[0];\n\n  if (!node.type.endsWith('-list')) {\n    throw new Error(`moveListItemDown, not a list at: ${entry[1]}`);\n  }\n\n  let ref = Editor.pathRef(editor, path);\n  let pre = Editor.previous(editor, {\n    at: path\n  });\n  let next = Editor.next(editor, {\n    at: path\n  });\n\n  if (pre) {\n    Transforms.splitNodes(editor, {\n      at: path\n    });\n  }\n\n  if (next) {\n    Transforms.splitNodes(editor, {\n      at: Path.next(ref.current)\n    });\n  }\n\n  path = ref.unref();\n  const indent = node.indent ? node.indent + 1 : 1;\n  Transforms.setNodes(editor, {\n    indent\n  }, {\n    at: Path.parent(path)\n  });\n}","map":null,"metadata":{},"sourceType":"module"}