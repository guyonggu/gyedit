{"ast":null,"code":"var _jsxFileName = \"/Users/yonggu/WebstormProjects/slate/site/examples/markdown-shortcuts.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { Slate, Editable, withReact } from 'slate-react';\nimport { Editor, Transforms, Range, Point, createEditor } from 'slate';\nimport { withHistory } from 'slate-history';\nconst SHORTCUTS = {\n  '*': 'list-item',\n  '-': 'list-item',\n  '+': 'list-item',\n  '>': 'block-quote',\n  '#': 'heading-one',\n  '##': 'heading-two',\n  '###': 'heading-three',\n  '####': 'heading-four',\n  '#####': 'heading-five',\n  '######': 'heading-six'\n};\nlet {\n  delete: odelete\n} = Transforms;\n\nTransforms.delete = (editor, options) => {\n  console.log(\"Transforms.delete unit\", options.unit, \"at\", options.at);\n  odelete(editor, options);\n};\n\nconst MarkdownShortcutsExample = () => {\n  const {\n    0: value,\n    1: setValue\n  } = useState(initialValue);\n  const renderElement = useCallback(props => __jsx(Element, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 46\n    }\n  })), []);\n  const editor = useMemo(() => withShortcuts(withReact(withHistory(createEditor()))), []);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: value => setValue(value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, __jsx(Editable, {\n    renderElement: renderElement,\n    placeholder: \"Write some markdown...\",\n    spellCheck: true,\n    autoFocus: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst withShortcuts = editor => {\n  const {\n    deleteBackward,\n    insertText\n  } = editor;\n\n  editor.insertText = text => {\n    const {\n      selection\n    } = editor;\n\n    if (text === ' ' && selection && Range.isCollapsed(selection)) {\n      const {\n        anchor\n      } = selection;\n      const block = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n)\n      });\n      const path = block ? block[1] : [];\n      const start = Editor.start(editor, path);\n      const range = {\n        anchor,\n        focus: start\n      };\n      const beforeText = Editor.string(editor, range);\n      const type = SHORTCUTS[beforeText];\n\n      if (type) {\n        Transforms.select(editor, range);\n        Transforms.delete(editor);\n        Transforms.setNodes(editor, {\n          type\n        }, {\n          match: n => Editor.isBlock(editor, n)\n        });\n\n        if (type === 'list-item') {\n          const list = {\n            type: 'bulleted-list',\n            children: []\n          };\n          Transforms.wrapNodes(editor, list, {\n            match: n => n.type === 'list-item'\n          });\n        }\n\n        return;\n      }\n    }\n\n    insertText(text);\n  };\n\n  editor.deleteBackward = (...args) => {\n    const {\n      selection\n    } = editor;\n\n    if (selection && Range.isCollapsed(selection)) {\n      const match = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n)\n      });\n\n      if (match) {\n        const [block, path] = match;\n        const start = Editor.start(editor, path);\n\n        if (block.type !== 'paragraph' && Point.equals(selection.anchor, start)) {\n          Transforms.setNodes(editor, {\n            type: 'paragraph'\n          });\n\n          if (block.type === 'list-item') {\n            Transforms.unwrapNodes(editor, {\n              match: n => n.type === 'bulleted-list',\n              split: true\n            });\n          }\n\n          return;\n        }\n      }\n\n      deleteBackward(...args);\n    }\n  };\n\n  return editor;\n};\n\nconst Element = ({\n  attributes,\n  children,\n  element\n}) => {\n  switch (element.type) {\n    case 'block-quote':\n      return __jsx(\"blockquote\", _extends({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'bulleted-list':\n      return __jsx(\"ul\", _extends({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'heading-one':\n      return __jsx(\"h1\", _extends({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'heading-two':\n      return __jsx(\"h2\", _extends({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'heading-three':\n      return __jsx(\"h3\", _extends({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'heading-four':\n      return __jsx(\"h4\", _extends({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'heading-five':\n      return __jsx(\"h5\", _extends({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'heading-six':\n      return __jsx(\"h6\", _extends({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'list-item':\n      return __jsx(\"li\", _extends({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 14\n        }\n      }), children);\n\n    default:\n      return __jsx(\"p\", _extends({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 14\n        }\n      }), children);\n  }\n};\n\nconst initialValue = [{\n  type: 'paragraph',\n  children: [{\n    text: 'The editor gives you full control over the logic you can add. For example, it\\'s fairly common to want to add markdown-like shortcuts to editors. So that, when you start a line with \"> \" you get a blockquote that looks like this:'\n  }]\n}, {\n  type: 'block-quote',\n  children: [{\n    text: 'A wise quote.'\n  }]\n}, {\n  type: 'paragraph',\n  children: [{\n    text: 'Order when you start a line with \"## \" you get a level-two heading, like this:'\n  }]\n}, {\n  type: 'heading-two',\n  children: [{\n    text: 'Try it out!'\n  }]\n}, {\n  type: 'paragraph',\n  children: [{\n    text: 'Try it out for yourself! Try starting a new line with \">\", \"-\", or \"#\"s.'\n  }]\n}];\nexport default MarkdownShortcutsExample;","map":{"version":3,"sources":["/Users/yonggu/WebstormProjects/slate/site/examples/markdown-shortcuts.tsx"],"names":["React","useState","useCallback","useMemo","Slate","Editable","withReact","Editor","Transforms","Range","Point","createEditor","withHistory","SHORTCUTS","delete","odelete","editor","options","console","log","unit","at","MarkdownShortcutsExample","value","setValue","initialValue","renderElement","props","withShortcuts","deleteBackward","insertText","text","selection","isCollapsed","anchor","block","above","match","n","isBlock","path","start","range","focus","beforeText","string","type","select","setNodes","list","children","wrapNodes","args","equals","unwrapNodes","split","Element","attributes","element"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useMemo } from 'react'\nimport { Slate, Editable, withReact } from 'slate-react'\nimport { Node, Editor, Transforms, Range, Point, createEditor } from 'slate'\nimport { withHistory } from 'slate-history'\n\nconst SHORTCUTS = {\n  '*': 'list-item',\n  '-': 'list-item',\n  '+': 'list-item',\n  '>': 'block-quote',\n  '#': 'heading-one',\n  '##': 'heading-two',\n  '###': 'heading-three',\n  '####': 'heading-four',\n  '#####': 'heading-five',\n  '######': 'heading-six',\n}\nlet {delete:odelete} = Transforms\nTransforms.delete = (editor,options)=>{\n  console.log(\"Transforms.delete unit\", options.unit, \"at\", options.at)\n  odelete(editor,options)\n}\nconst MarkdownShortcutsExample = () => {\n  const [value, setValue] = useState<Node[]>(initialValue)\n  const renderElement = useCallback(props => <Element {...props} />, [])\n  const editor = useMemo(\n    () => withShortcuts(withReact(withHistory(createEditor()))),\n    []\n  )\n  return (\n    <Slate editor={editor} value={value} onChange={value => setValue(value)}>\n      <Editable\n        renderElement={renderElement}\n        placeholder=\"Write some markdown...\"\n        spellCheck\n        autoFocus\n      />\n    </Slate>\n  )\n}\n\nconst withShortcuts = editor => {\n  const { deleteBackward, insertText } = editor\n\n  editor.insertText = text => {\n    const { selection } = editor\n\n    if (text === ' ' && selection && Range.isCollapsed(selection)) {\n      const { anchor } = selection\n      const block = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n      })\n      const path = block ? block[1] : []\n      const start = Editor.start(editor, path)\n      const range = { anchor, focus: start }\n      const beforeText = Editor.string(editor, range)\n      const type = SHORTCUTS[beforeText]\n\n      if (type) {\n        Transforms.select(editor, range)\n        Transforms.delete(editor)\n        Transforms.setNodes(\n          editor,\n          { type },\n          { match: n => Editor.isBlock(editor, n) }\n        )\n\n        if (type === 'list-item') {\n          const list = { type: 'bulleted-list', children: [] }\n          Transforms.wrapNodes(editor, list, {\n            match: n => n.type === 'list-item',\n          })\n        }\n\n        return\n      }\n    }\n\n    insertText(text)\n  }\n\n  editor.deleteBackward = (...args) => {\n    const { selection } = editor\n\n    if (selection && Range.isCollapsed(selection)) {\n      const match = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n      })\n\n      if (match) {\n        const [block, path] = match\n        const start = Editor.start(editor, path)\n\n        if (\n          block.type !== 'paragraph' &&\n          Point.equals(selection.anchor, start)\n        ) {\n          Transforms.setNodes(editor, { type: 'paragraph' })\n\n          if (block.type === 'list-item') {\n            Transforms.unwrapNodes(editor, {\n              match: n => n.type === 'bulleted-list',\n              split: true,\n            })\n          }\n\n          return\n        }\n      }\n\n      deleteBackward(...args)\n    }\n  }\n\n  return editor\n}\n\nconst Element = ({ attributes, children, element }) => {\n  switch (element.type) {\n    case 'block-quote':\n      return <blockquote {...attributes}>{children}</blockquote>\n    case 'bulleted-list':\n      return <ul {...attributes}>{children}</ul>\n    case 'heading-one':\n      return <h1 {...attributes}>{children}</h1>\n    case 'heading-two':\n      return <h2 {...attributes}>{children}</h2>\n    case 'heading-three':\n      return <h3 {...attributes}>{children}</h3>\n    case 'heading-four':\n      return <h4 {...attributes}>{children}</h4>\n    case 'heading-five':\n      return <h5 {...attributes}>{children}</h5>\n    case 'heading-six':\n      return <h6 {...attributes}>{children}</h6>\n    case 'list-item':\n      return <li {...attributes}>{children}</li>\n    default:\n      return <p {...attributes}>{children}</p>\n  }\n}\n\nconst initialValue = [\n  {\n    type: 'paragraph',\n    children: [\n      {\n        text:\n          'The editor gives you full control over the logic you can add. For example, it\\'s fairly common to want to add markdown-like shortcuts to editors. So that, when you start a line with \"> \" you get a blockquote that looks like this:',\n      },\n    ],\n  },\n  {\n    type: 'block-quote',\n    children: [{ text: 'A wise quote.' }],\n  },\n  {\n    type: 'paragraph',\n    children: [\n      {\n        text:\n          'Order when you start a line with \"## \" you get a level-two heading, like this:',\n      },\n    ],\n  },\n  {\n    type: 'heading-two',\n    children: [{ text: 'Try it out!' }],\n  },\n  {\n    type: 'paragraph',\n    children: [\n      {\n        text:\n          'Try it out for yourself! Try starting a new line with \">\", \"-\", or \"#\"s.',\n      },\n    ],\n  },\n]\n\nexport default MarkdownShortcutsExample\n"]},"metadata":{},"sourceType":"module"}