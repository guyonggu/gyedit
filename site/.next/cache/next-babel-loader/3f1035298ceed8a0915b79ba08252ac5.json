{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/yonggu/WebstormProjects/slate/site/examples/markdown-preview.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\\n            font-family: monospace;\\n            background-color: #eee;\\n            padding: 3px;\\n          \"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n            display: inline-block;\\n            border-left: 2px solid #ddd;\\n            padding-left: 10px;\\n            color: #aaa;\\n            font-style: italic;\\n          \"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n            display: block;\\n            text-align: center;\\n            border-bottom: 2px solid #ddd;\\n          \"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n            padding-left: 10px;\\n            font-size: 20px;\\n            line-height: 10px;\\n          \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n            display: inline-block;\\n            font-weight: bold;\\n            font-size: 20px;\\n            margin: 20px 0 10px 0;\\n          \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n        font-weight: \", \";\\n        font-style: \", \";\\n        text-decoration: \", \";\\n        \", \"\\n        \", \"\\n        \", \"\\n        \", \"\\n        \", \"\\n      \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport Prism from 'prismjs';\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { Slate, Editable, withReact } from 'slate-react';\nimport { Text, createEditor } from 'slate';\nimport { withHistory } from 'slate-history';\nimport { css } from 'emotion' // eslint-disable-next-line\n;\nPrism.languages.markdown = Prism.languages.extend(\"markup\", {}), Prism.languages.insertBefore(\"markdown\", \"prolog\", {\n  blockquote: {\n    pattern: /^>(?:[\\t ]*>)*/m,\n    alias: \"punctuation\"\n  },\n  code: [{\n    pattern: /^(?: {4}|\\t).+/m,\n    alias: \"keyword\"\n  }, {\n    pattern: /``.+?``|`[^`\\n]+`/,\n    alias: \"keyword\"\n  }],\n  title: [{\n    pattern: /\\w+.*(?:\\r?\\n|\\r)(?:==+|--+)/,\n    alias: \"important\",\n    inside: {\n      punctuation: /==+$|--+$/\n    }\n  }, {\n    pattern: /(^\\s*)#+.+/m,\n    lookbehind: !0,\n    alias: \"important\",\n    inside: {\n      punctuation: /^#+|#+$/\n    }\n  }],\n  hr: {\n    pattern: /(^\\s*)([*-])([\\t ]*\\2){2,}(?=\\s*$)/m,\n    lookbehind: !0,\n    alias: \"punctuation\"\n  },\n  list: {\n    pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n    lookbehind: !0,\n    alias: \"punctuation\"\n  },\n  \"url-reference\": {\n    pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n    inside: {\n      variable: {\n        pattern: /^(!?\\[)[^\\]]+/,\n        lookbehind: !0\n      },\n      string: /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n      punctuation: /^[\\[\\]!:]|[<>]/\n    },\n    alias: \"url\"\n  },\n  bold: {\n    pattern: /(^|[^\\\\])(\\*\\*|__)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind: !0,\n    inside: {\n      punctuation: /^\\*\\*|^__|\\*\\*$|__$/\n    }\n  },\n  italic: {\n    pattern: /(^|[^\\\\])([*_])(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind: !0,\n    inside: {\n      punctuation: /^[*_]|[*_]$/\n    }\n  },\n  url: {\n    pattern: /!?\\[[^\\]]+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[[^\\]\\n]*\\])/,\n    inside: {\n      variable: {\n        pattern: /(!?\\[)[^\\]]+(?=\\]$)/,\n        lookbehind: !0\n      },\n      string: {\n        pattern: /\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/\n      }\n    }\n  }\n}), Prism.languages.markdown.bold.inside.url = Prism.util.clone(Prism.languages.markdown.url), Prism.languages.markdown.italic.inside.url = Prism.util.clone(Prism.languages.markdown.url), Prism.languages.markdown.bold.inside.italic = Prism.util.clone(Prism.languages.markdown.italic), Prism.languages.markdown.italic.inside.bold = Prism.util.clone(Prism.languages.markdown.bold); // prettier-ignore\n\nvar MarkdownPreviewExample = function MarkdownPreviewExample() {\n  _s();\n\n  var _useState = useState(initialValue),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var renderLeaf = useCallback(function (props) {\n    return __jsx(Leaf, _extends({}, props, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 43\n      }\n    }));\n  }, []);\n  var editor = useMemo(function () {\n    return withHistory(withReact(createEditor()));\n  }, []);\n  var decorate = useCallback(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        node = _ref2[0],\n        path = _ref2[1];\n\n    var ranges = [];\n\n    if (!Text.isText(node)) {\n      return ranges;\n    }\n\n    var getLength = function getLength(token) {\n      if (typeof token === 'string') {\n        return token.length;\n      } else if (typeof token.content === 'string') {\n        return token.content.length;\n      } else {\n        return token.content.reduce(function (l, t) {\n          return l + getLength(t);\n        }, 0);\n      }\n    };\n\n    var tokens = Prism.tokenize(node.text, Prism.languages.markdown);\n    var start = 0;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = tokens[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var token = _step.value;\n        var length = getLength(token);\n        var end = start + length;\n\n        if (typeof token !== 'string') {\n          var _ranges$push;\n\n          ranges.push((_ranges$push = {}, _defineProperty(_ranges$push, token.type, true), _defineProperty(_ranges$push, \"anchor\", {\n            path: path,\n            offset: start\n          }), _defineProperty(_ranges$push, \"focus\", {\n            path: path,\n            offset: end\n          }), _ranges$push));\n        }\n\n        start = end;\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n          _iterator[\"return\"]();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return ranges;\n  }, []);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: function onChange(value) {\n      return setValue(value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, __jsx(Editable, {\n    decorate: decorate,\n    renderLeaf: renderLeaf,\n    placeholder: \"Write some markdown...\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(MarkdownPreviewExample, \"gnGS35FPQz5Y3Cjo9BTjpOzwGpM=\");\n\n_c = MarkdownPreviewExample;\n\nvar Leaf = function Leaf(_ref3) {\n  var attributes = _ref3.attributes,\n      children = _ref3.children,\n      leaf = _ref3.leaf;\n  return __jsx(\"span\", _extends({}, attributes, {\n    className: css(_templateObject(), leaf.bold && 'bold', leaf.italic && 'italic', leaf.underlined && 'underline', leaf.title && css(_templateObject2()), leaf.list && css(_templateObject3()), leaf.hr && css(_templateObject4()), leaf.blockquote && css(_templateObject5()), leaf.code && css(_templateObject6())),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }), children);\n};\n\n_c2 = Leaf;\nvar initialValue = [{\n  children: [{\n    text: 'Slate is flexible enough to add **decorations** that can format text based on its content. For example, this editor has **Markdown** preview decorations on it, to make it _dead_ simple to make an editor with built-in Markdown previewing.'\n  }]\n}, {\n  children: [{\n    text: '## Try it out!'\n  }]\n}, {\n  children: [{\n    text: 'Try it out for yourself!'\n  }]\n}];\nexport default MarkdownPreviewExample;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MarkdownPreviewExample\");\n$RefreshReg$(_c2, \"Leaf\");","map":{"version":3,"sources":["/Users/yonggu/WebstormProjects/slate/site/examples/markdown-preview.tsx"],"names":["Prism","React","useState","useCallback","useMemo","Slate","Editable","withReact","Text","createEditor","withHistory","css","languages","markdown","extend","insertBefore","blockquote","pattern","alias","code","title","inside","punctuation","lookbehind","hr","list","variable","string","bold","italic","url","util","clone","MarkdownPreviewExample","initialValue","value","setValue","renderLeaf","props","editor","decorate","node","path","ranges","isText","getLength","token","length","content","reduce","l","t","tokens","tokenize","text","start","end","push","type","offset","Leaf","attributes","children","leaf","underlined"],"mappings":"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","sourcesContent":["import Prism from 'prismjs'\nimport React, { useState, useCallback, useMemo } from 'react'\nimport { Slate, Editable, withReact } from 'slate-react'\nimport { Node, Text, createEditor } from 'slate'\nimport { withHistory } from 'slate-history'\nimport { css } from 'emotion'\n\n// eslint-disable-next-line\n;Prism.languages.markdown=Prism.languages.extend(\"markup\",{}),Prism.languages.insertBefore(\"markdown\",\"prolog\",{blockquote:{pattern:/^>(?:[\\t ]*>)*/m,alias:\"punctuation\"},code:[{pattern:/^(?: {4}|\\t).+/m,alias:\"keyword\"},{pattern:/``.+?``|`[^`\\n]+`/,alias:\"keyword\"}],title:[{pattern:/\\w+.*(?:\\r?\\n|\\r)(?:==+|--+)/,alias:\"important\",inside:{punctuation:/==+$|--+$/}},{pattern:/(^\\s*)#+.+/m,lookbehind:!0,alias:\"important\",inside:{punctuation:/^#+|#+$/}}],hr:{pattern:/(^\\s*)([*-])([\\t ]*\\2){2,}(?=\\s*$)/m,lookbehind:!0,alias:\"punctuation\"},list:{pattern:/(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,lookbehind:!0,alias:\"punctuation\"},\"url-reference\":{pattern:/!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,inside:{variable:{pattern:/^(!?\\[)[^\\]]+/,lookbehind:!0},string:/(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,punctuation:/^[\\[\\]!:]|[<>]/},alias:\"url\"},bold:{pattern:/(^|[^\\\\])(\\*\\*|__)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,lookbehind:!0,inside:{punctuation:/^\\*\\*|^__|\\*\\*$|__$/}},italic:{pattern:/(^|[^\\\\])([*_])(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,lookbehind:!0,inside:{punctuation:/^[*_]|[*_]$/}},url:{pattern:/!?\\[[^\\]]+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[[^\\]\\n]*\\])/,inside:{variable:{pattern:/(!?\\[)[^\\]]+(?=\\]$)/,lookbehind:!0},string:{pattern:/\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/}}}}),Prism.languages.markdown.bold.inside.url=Prism.util.clone(Prism.languages.markdown.url),Prism.languages.markdown.italic.inside.url=Prism.util.clone(Prism.languages.markdown.url),Prism.languages.markdown.bold.inside.italic=Prism.util.clone(Prism.languages.markdown.italic),Prism.languages.markdown.italic.inside.bold=Prism.util.clone(Prism.languages.markdown.bold); // prettier-ignore\n\nconst MarkdownPreviewExample = () => {\n  const [value, setValue] = useState<Node[]>(initialValue)\n  const renderLeaf = useCallback(props => <Leaf {...props} />, [])\n  const editor = useMemo(() => withHistory(withReact(createEditor())), [])\n  const decorate = useCallback(([node, path]) => {\n    const ranges = []\n\n    if (!Text.isText(node)) {\n      return ranges\n    }\n\n    const getLength = token => {\n      if (typeof token === 'string') {\n        return token.length\n      } else if (typeof token.content === 'string') {\n        return token.content.length\n      } else {\n        return token.content.reduce((l, t) => l + getLength(t), 0)\n      }\n    }\n\n    const tokens = Prism.tokenize(node.text, Prism.languages.markdown)\n    let start = 0\n\n    for (const token of tokens) {\n      const length = getLength(token)\n      const end = start + length\n\n      if (typeof token !== 'string') {\n        ranges.push({\n          [token.type]: true,\n          anchor: { path, offset: start },\n          focus: { path, offset: end },\n        })\n      }\n\n      start = end\n    }\n\n    return ranges\n  }, [])\n\n  return (\n    <Slate editor={editor} value={value} onChange={value => setValue(value)}>\n      <Editable\n        decorate={decorate}\n        renderLeaf={renderLeaf}\n        placeholder=\"Write some markdown...\"\n      />\n    </Slate>\n  )\n}\n\nconst Leaf = ({ attributes, children, leaf }) => {\n  return (\n    <span\n      {...attributes}\n      className={css`\n        font-weight: ${leaf.bold && 'bold'};\n        font-style: ${leaf.italic && 'italic'};\n        text-decoration: ${leaf.underlined && 'underline'};\n        ${leaf.title &&\n          css`\n            display: inline-block;\n            font-weight: bold;\n            font-size: 20px;\n            margin: 20px 0 10px 0;\n          `}\n        ${leaf.list &&\n          css`\n            padding-left: 10px;\n            font-size: 20px;\n            line-height: 10px;\n          `}\n        ${leaf.hr &&\n          css`\n            display: block;\n            text-align: center;\n            border-bottom: 2px solid #ddd;\n          `}\n        ${leaf.blockquote &&\n          css`\n            display: inline-block;\n            border-left: 2px solid #ddd;\n            padding-left: 10px;\n            color: #aaa;\n            font-style: italic;\n          `}\n        ${leaf.code &&\n          css`\n            font-family: monospace;\n            background-color: #eee;\n            padding: 3px;\n          `}\n      `}\n    >\n      {children}\n    </span>\n  )\n}\n\nconst initialValue = [\n  {\n    children: [\n      {\n        text:\n          'Slate is flexible enough to add **decorations** that can format text based on its content. For example, this editor has **Markdown** preview decorations on it, to make it _dead_ simple to make an editor with built-in Markdown previewing.',\n      },\n    ],\n  },\n  {\n    children: [{ text: '## Try it out!' }],\n  },\n  {\n    children: [{ text: 'Try it out for yourself!' }],\n  },\n]\n\nexport default MarkdownPreviewExample\n"]},"metadata":{},"sourceType":"module"}