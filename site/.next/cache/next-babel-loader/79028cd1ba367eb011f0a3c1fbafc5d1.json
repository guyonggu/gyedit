{"ast":null,"code":"var _jsxFileName = \"/Users/yonggu/WebstormProjects/slate/site/examples/paste-html.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { jsx } from 'slate-hyperscript';\nimport { Transforms, createEditor } from 'slate';\nimport { withHistory } from 'slate-history';\nimport { css } from 'emotion';\nimport { Slate, Editable, withReact, useSelected, useFocused } from 'slate-react';\nconst ELEMENT_TAGS = {\n  A: el => ({\n    type: 'link',\n    url: el.getAttribute('href')\n  }),\n  BLOCKQUOTE: () => ({\n    type: 'quote'\n  }),\n  H1: () => ({\n    type: 'heading-one'\n  }),\n  H2: () => ({\n    type: 'heading-two'\n  }),\n  H3: () => ({\n    type: 'heading-three'\n  }),\n  H4: () => ({\n    type: 'heading-four'\n  }),\n  H5: () => ({\n    type: 'heading-five'\n  }),\n  H6: () => ({\n    type: 'heading-six'\n  }),\n  IMG: el => ({\n    type: 'image',\n    url: el.getAttribute('src')\n  }),\n  LI: () => ({\n    type: 'list-item'\n  }),\n  OL: () => ({\n    type: 'numbered-list'\n  }),\n  P: () => ({\n    type: 'paragraph'\n  }),\n  PRE: () => ({\n    type: 'code'\n  }),\n  UL: () => ({\n    type: 'bulleted-list'\n  })\n}; // COMPAT: `B` is omitted here because Google Docs uses `<b>` in weird ways.\n\nconst TEXT_TAGS = {\n  CODE: () => ({\n    code: true\n  }),\n  DEL: () => ({\n    strikethrough: true\n  }),\n  EM: () => ({\n    italic: true\n  }),\n  I: () => ({\n    italic: true\n  }),\n  S: () => ({\n    strikethrough: true\n  }),\n  STRONG: () => ({\n    bold: true\n  }),\n  U: () => ({\n    underline: true\n  })\n};\nexport const deserialize = el => {\n  if (el.nodeType === 3) {\n    return el.textContent;\n  } else if (el.nodeType !== 1) {\n    return null;\n  } else if (el.nodeName === 'BR') {\n    return '\\n';\n  }\n\n  const {\n    nodeName\n  } = el;\n  let parent = el;\n\n  if (nodeName === 'PRE' && el.childNodes[0] && el.childNodes[0].nodeName === 'CODE') {\n    parent = el.childNodes[0];\n  }\n\n  const children = Array.from(parent.childNodes).map(deserialize).flat();\n\n  if (el.nodeName === 'BODY') {\n    return jsx('fragment', {}, children);\n  }\n\n  if (ELEMENT_TAGS[nodeName]) {\n    const attrs = ELEMENT_TAGS[nodeName](el);\n    return jsx('element', attrs, children);\n  }\n\n  if (TEXT_TAGS[nodeName]) {\n    const attrs = TEXT_TAGS[nodeName](el);\n    return children.map(child => jsx('text', attrs, child));\n  }\n\n  return children;\n};\n\nconst PasteHtmlExample = () => {\n  const {\n    0: value,\n    1: setValue\n  } = useState(initialValue);\n  const renderElement = useCallback(props => __jsx(Element, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 46\n    }\n  })), []);\n  const renderLeaf = useCallback(props => __jsx(Leaf, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 43\n    }\n  })), []);\n  const editor = useMemo(() => withHtml(withReact(withHistory(createEditor()))), []);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: value => setValue(value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }, __jsx(Editable, {\n    renderElement: renderElement,\n    renderLeaf: renderLeaf,\n    placeholder: \"Paste in some HTML...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst withHtml = editor => {\n  const {\n    insertData,\n    isInline,\n    isVoid\n  } = editor;\n\n  editor.isInline = element => {\n    return element.type === 'link' ? true : isInline(element);\n  };\n\n  editor.isVoid = element => {\n    return element.type === 'image' ? true : isVoid(element);\n  };\n\n  editor.insertData = data => {\n    const html = data.getData('text/html');\n\n    if (html) {\n      const parsed = new DOMParser().parseFromString(html, 'text/html');\n      const fragment = deserialize(parsed.body);\n      Transforms.insertFragment(editor, fragment);\n      return;\n    }\n\n    insertData(data);\n  };\n\n  return editor;\n};\n\nconst Element = props => {\n  const {\n    attributes,\n    children,\n    element\n  } = props;\n\n  switch (element.type) {\n    default:\n      return __jsx(\"p\", _extends({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'quote':\n      return __jsx(\"blockquote\", _extends({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'code':\n      return __jsx(\"pre\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 9\n        }\n      }, __jsx(\"code\", _extends({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }\n      }), children));\n\n    case 'bulleted-list':\n      return __jsx(\"ul\", _extends({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'heading-one':\n      return __jsx(\"h1\", _extends({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'heading-two':\n      return __jsx(\"h2\", _extends({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'heading-three':\n      return __jsx(\"h3\", _extends({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'heading-four':\n      return __jsx(\"h4\", _extends({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'heading-five':\n      return __jsx(\"h5\", _extends({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'heading-six':\n      return __jsx(\"h6\", _extends({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'list-item':\n      return __jsx(\"li\", _extends({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'numbered-list':\n      return __jsx(\"ol\", _extends({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'link':\n      return __jsx(\"a\", _extends({\n        href: element.url\n      }, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 9\n        }\n      }), children);\n\n    case 'image':\n      return __jsx(ImageElement, _extends({}, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 14\n        }\n      }));\n  }\n};\n\nconst ImageElement = ({\n  attributes,\n  children,\n  element\n}) => {\n  const selected = useSelected();\n  const focused = useFocused();\n  return __jsx(\"div\", _extends({}, attributes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 5\n    }\n  }), children, __jsx(\"img\", {\n    src: element.url,\n    className: css`\n          display: block;\n          max-width: 100%;\n          max-height: 20em;\n          box-shadow: ${selected && focused ? '0 0 0 2px blue;' : 'none'};\n        `,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst Leaf = ({\n  attributes,\n  children,\n  leaf\n}) => {\n  if (leaf.bold) {\n    children = __jsx(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 16\n      }\n    }, children);\n  }\n\n  if (leaf.code) {\n    children = __jsx(\"code\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 16\n      }\n    }, children);\n  }\n\n  if (leaf.italic) {\n    children = __jsx(\"em\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 16\n      }\n    }, children);\n  }\n\n  if (leaf.underline) {\n    children = __jsx(\"u\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 16\n      }\n    }, children);\n  }\n\n  if (leaf.strikethrough) {\n    children = __jsx(\"del\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 16\n      }\n    }, children);\n  }\n\n  return __jsx(\"span\", _extends({}, attributes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 10\n    }\n  }), children);\n};\n\nconst initialValue = [{\n  children: [{\n    text: \"By default, pasting content into a Slate editor will use the clipboard's \"\n  }, {\n    text: \"'text/plain'\",\n    code: true\n  }, {\n    text: \" data. That's okay for some use cases, but sometimes you want users to be able to paste in content and have it maintaing its formatting. To do this, your editor needs to handle \"\n  }, {\n    text: \"'text/html'\",\n    code: true\n  }, {\n    text: ' data. '\n  }]\n}, {\n  children: [{\n    text: 'This is an example of doing exactly that!'\n  }]\n}, {\n  children: [{\n    text: \"Try it out for yourself! Copy and paste some rendered HTML rich text content (not the source code) from another site into this editor and it's formatting should be preserved.\"\n  }]\n}];\nexport default PasteHtmlExample;","map":{"version":3,"sources":["/Users/yonggu/WebstormProjects/slate/site/examples/paste-html.tsx"],"names":["React","useState","useCallback","useMemo","jsx","Transforms","createEditor","withHistory","css","Slate","Editable","withReact","useSelected","useFocused","ELEMENT_TAGS","A","el","type","url","getAttribute","BLOCKQUOTE","H1","H2","H3","H4","H5","H6","IMG","LI","OL","P","PRE","UL","TEXT_TAGS","CODE","code","DEL","strikethrough","EM","italic","I","S","STRONG","bold","U","underline","deserialize","nodeType","textContent","nodeName","parent","childNodes","children","Array","from","map","flat","attrs","child","PasteHtmlExample","value","setValue","initialValue","renderElement","props","renderLeaf","editor","withHtml","insertData","isInline","isVoid","element","data","html","getData","parsed","DOMParser","parseFromString","fragment","body","insertFragment","Element","attributes","ImageElement","selected","focused","Leaf","leaf","text"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useMemo } from 'react'\nimport { jsx } from 'slate-hyperscript'\nimport { Node, Transforms, createEditor } from 'slate'\nimport { withHistory } from 'slate-history'\nimport { css } from 'emotion'\nimport {\n  Slate,\n  Editable,\n  withReact,\n  useSelected,\n  useFocused,\n} from 'slate-react'\n\nconst ELEMENT_TAGS = {\n  A: el => ({ type: 'link', url: el.getAttribute('href') }),\n  BLOCKQUOTE: () => ({ type: 'quote' }),\n  H1: () => ({ type: 'heading-one' }),\n  H2: () => ({ type: 'heading-two' }),\n  H3: () => ({ type: 'heading-three' }),\n  H4: () => ({ type: 'heading-four' }),\n  H5: () => ({ type: 'heading-five' }),\n  H6: () => ({ type: 'heading-six' }),\n  IMG: el => ({ type: 'image', url: el.getAttribute('src') }),\n  LI: () => ({ type: 'list-item' }),\n  OL: () => ({ type: 'numbered-list' }),\n  P: () => ({ type: 'paragraph' }),\n  PRE: () => ({ type: 'code' }),\n  UL: () => ({ type: 'bulleted-list' }),\n}\n\n// COMPAT: `B` is omitted here because Google Docs uses `<b>` in weird ways.\nconst TEXT_TAGS = {\n  CODE: () => ({ code: true }),\n  DEL: () => ({ strikethrough: true }),\n  EM: () => ({ italic: true }),\n  I: () => ({ italic: true }),\n  S: () => ({ strikethrough: true }),\n  STRONG: () => ({ bold: true }),\n  U: () => ({ underline: true }),\n}\n\nexport const deserialize = el => {\n  if (el.nodeType === 3) {\n    return el.textContent\n  } else if (el.nodeType !== 1) {\n    return null\n  } else if (el.nodeName === 'BR') {\n    return '\\n'\n  }\n\n  const { nodeName } = el\n  let parent = el\n\n  if (\n    nodeName === 'PRE' &&\n    el.childNodes[0] &&\n    el.childNodes[0].nodeName === 'CODE'\n  ) {\n    parent = el.childNodes[0]\n  }\n  const children = Array.from(parent.childNodes)\n    .map(deserialize)\n    .flat()\n\n  if (el.nodeName === 'BODY') {\n    return jsx('fragment', {}, children)\n  }\n\n  if (ELEMENT_TAGS[nodeName]) {\n    const attrs = ELEMENT_TAGS[nodeName](el)\n    return jsx('element', attrs, children)\n  }\n\n  if (TEXT_TAGS[nodeName]) {\n    const attrs = TEXT_TAGS[nodeName](el)\n    return children.map(child => jsx('text', attrs, child))\n  }\n\n  return children\n}\n\nconst PasteHtmlExample = () => {\n  const [value, setValue] = useState<Node[]>(initialValue)\n  const renderElement = useCallback(props => <Element {...props} />, [])\n  const renderLeaf = useCallback(props => <Leaf {...props} />, [])\n  const editor = useMemo(\n    () => withHtml(withReact(withHistory(createEditor()))),\n    []\n  )\n  return (\n    <Slate editor={editor} value={value} onChange={value => setValue(value)}>\n      <Editable\n        renderElement={renderElement}\n        renderLeaf={renderLeaf}\n        placeholder=\"Paste in some HTML...\"\n      />\n    </Slate>\n  )\n}\n\nconst withHtml = editor => {\n  const { insertData, isInline, isVoid } = editor\n\n  editor.isInline = element => {\n    return element.type === 'link' ? true : isInline(element)\n  }\n\n  editor.isVoid = element => {\n    return element.type === 'image' ? true : isVoid(element)\n  }\n\n  editor.insertData = data => {\n    const html = data.getData('text/html')\n\n    if (html) {\n      const parsed = new DOMParser().parseFromString(html, 'text/html')\n      const fragment = deserialize(parsed.body)\n      Transforms.insertFragment(editor, fragment)\n      return\n    }\n\n    insertData(data)\n  }\n\n  return editor\n}\n\nconst Element = props => {\n  const { attributes, children, element } = props\n\n  switch (element.type) {\n    default:\n      return <p {...attributes}>{children}</p>\n    case 'quote':\n      return <blockquote {...attributes}>{children}</blockquote>\n    case 'code':\n      return (\n        <pre>\n          <code {...attributes}>{children}</code>\n        </pre>\n      )\n    case 'bulleted-list':\n      return <ul {...attributes}>{children}</ul>\n    case 'heading-one':\n      return <h1 {...attributes}>{children}</h1>\n    case 'heading-two':\n      return <h2 {...attributes}>{children}</h2>\n    case 'heading-three':\n      return <h3 {...attributes}>{children}</h3>\n    case 'heading-four':\n      return <h4 {...attributes}>{children}</h4>\n    case 'heading-five':\n      return <h5 {...attributes}>{children}</h5>\n    case 'heading-six':\n      return <h6 {...attributes}>{children}</h6>\n    case 'list-item':\n      return <li {...attributes}>{children}</li>\n    case 'numbered-list':\n      return <ol {...attributes}>{children}</ol>\n    case 'link':\n      return (\n        <a href={element.url} {...attributes}>\n          {children}\n        </a>\n      )\n    case 'image':\n      return <ImageElement {...props} />\n  }\n}\n\nconst ImageElement = ({ attributes, children, element }) => {\n  const selected = useSelected()\n  const focused = useFocused()\n  return (\n    <div {...attributes}>\n      {children}\n      <img\n        src={element.url}\n        className={css`\n          display: block;\n          max-width: 100%;\n          max-height: 20em;\n          box-shadow: ${selected && focused ? '0 0 0 2px blue;' : 'none'};\n        `}\n      />\n    </div>\n  )\n}\n\nconst Leaf = ({ attributes, children, leaf }) => {\n  if (leaf.bold) {\n    children = <strong>{children}</strong>\n  }\n\n  if (leaf.code) {\n    children = <code>{children}</code>\n  }\n\n  if (leaf.italic) {\n    children = <em>{children}</em>\n  }\n\n  if (leaf.underline) {\n    children = <u>{children}</u>\n  }\n\n  if (leaf.strikethrough) {\n    children = <del>{children}</del>\n  }\n\n  return <span {...attributes}>{children}</span>\n}\n\nconst initialValue = [\n  {\n    children: [\n      {\n        text:\n          \"By default, pasting content into a Slate editor will use the clipboard's \",\n      },\n      { text: \"'text/plain'\", code: true },\n      {\n        text:\n          \" data. That's okay for some use cases, but sometimes you want users to be able to paste in content and have it maintaing its formatting. To do this, your editor needs to handle \",\n      },\n      { text: \"'text/html'\", code: true },\n      { text: ' data. ' },\n    ],\n  },\n  {\n    children: [{ text: 'This is an example of doing exactly that!' }],\n  },\n  {\n    children: [\n      {\n        text:\n          \"Try it out for yourself! Copy and paste some rendered HTML rich text content (not the source code) from another site into this editor and it's formatting should be preserved.\",\n      },\n    ],\n  },\n]\n\nexport default PasteHtmlExample\n"]},"metadata":{},"sourceType":"module"}