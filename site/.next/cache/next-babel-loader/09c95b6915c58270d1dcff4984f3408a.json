{"ast":null,"code":"import { Editor, Range, Transforms } from 'slate';\nexport const onKeyDown = () => (e, editor) => {\n  let {\n    selection\n  } = editor;\n\n  if (e.key === 'Tab' && selection) {\n    e.preventDefault();\n    const block = Editor.above(editor, {\n      match: n => Editor.isBlock(editor, n)\n    });\n\n    if (block[0].type == 'list-item') {\n      if (Range.isCollapsed(selection)) {\n        const path = block[1];\n        const start = Editor.start(editor, path);\n        const range = {\n          anchor: selection.anchor,\n          focus: start\n        };\n        let beforeText = Editor.string(editor, range);\n\n        if (beforeText.length) {\n          Editor.insertText(editor, '\\t');\n          return;\n        }\n      } // // move down with tab\n      // const tab = !e.shiftKey;\n      // if (tab) {\n\n\n      moveListItemDown(editor, block[1]); // }\n    } else {\n      let p = selection.anchor;\n\n      if (Range.isCollapsed(selection)) {\n        p = p.path;\n      }\n\n      Editor.insertText(editor, '\\t');\n    }\n  }\n};\n\nfunction moveListItemDown(editor, path) {\n  const entry = Editor.parent(editor, path);\n  let node = entry[0];\n\n  if (node.type.endsWith('-list')) {\n    console.log(\"indent:\", node.indent);\n    node.indent++;\n    Transforms.splitNodes(editor, {\n      at: path\n    });\n  }\n}","map":{"version":3,"sources":["/Users/yonggu/WebstormProjects/gyedit/src/onKeyDown.ts"],"names":["Editor","Range","Transforms","onKeyDown","e","editor","selection","key","preventDefault","block","above","match","n","isBlock","type","isCollapsed","path","start","range","anchor","focus","beforeText","string","length","insertText","moveListItemDown","p","entry","parent","node","endsWith","console","log","indent","splitNodes","at"],"mappings":"AAAA,SAAQA,MAAR,EAAgBC,KAAhB,EAAuCC,UAAvC,QAAwD,OAAxD;AAGA,OAAO,MAAMC,SAAS,GAAG,MAAM,CAC3BC,CAD2B,EAE3BC,MAF2B,KAG1B;AACD,MAAI;AAACC,IAAAA;AAAD,MAAcD,MAAlB;;AACA,MAAID,CAAC,CAACG,GAAF,KAAU,KAAV,IAAmBD,SAAvB,EAAkC;AAC9BF,IAAAA,CAAC,CAACI,cAAF;AACA,UAAMC,KAAK,GAAGT,MAAM,CAACU,KAAP,CAAaL,MAAb,EAAqB;AAC/BM,MAAAA,KAAK,EAAEC,CAAC,IAAIZ,MAAM,CAACa,OAAP,CAAeR,MAAf,EAAuBO,CAAvB;AADmB,KAArB,CAAd;;AAGA,QAAIH,KAAK,CAAC,CAAD,CAAL,CAASK,IAAT,IAAiB,WAArB,EAAkC;AAC9B,UAAIb,KAAK,CAACc,WAAN,CAAkBT,SAAlB,CAAJ,EAAkC;AAC9B,cAAMU,IAAI,GAAGP,KAAK,CAAC,CAAD,CAAlB;AACA,cAAMQ,KAAK,GAAGjB,MAAM,CAACiB,KAAP,CAAaZ,MAAb,EAAqBW,IAArB,CAAd;AACA,cAAME,KAAK,GAAG;AAACC,UAAAA,MAAM,EAAEb,SAAS,CAACa,MAAnB;AAA2BC,UAAAA,KAAK,EAAEH;AAAlC,SAAd;AACA,YAAII,UAAU,GAAGrB,MAAM,CAACsB,MAAP,CAAcjB,MAAd,EAAsBa,KAAtB,CAAjB;;AACA,YAAIG,UAAU,CAACE,MAAf,EAAuB;AACnBvB,UAAAA,MAAM,CAACwB,UAAP,CAAkBnB,MAAlB,EAA0B,IAA1B;AACA;AACH;AACJ,OAV6B,CAW9B;AACA;AACA;;;AACAoB,MAAAA,gBAAgB,CAACpB,MAAD,EAASI,KAAK,CAAC,CAAD,CAAd,CAAhB,CAd8B,CAe9B;AACH,KAhBD,MAgBO;AACH,UAAIiB,CAAU,GAAGpB,SAAS,CAACa,MAA3B;;AACA,UAAIlB,KAAK,CAACc,WAAN,CAAkBT,SAAlB,CAAJ,EAAkC;AAC9BoB,QAAAA,CAAC,GAAGA,CAAC,CAACV,IAAN;AACH;;AACDhB,MAAAA,MAAM,CAACwB,UAAP,CAAkBnB,MAAlB,EAA0B,IAA1B;AACH;AACJ;AACJ,CAlCM;;AAoCP,SAASoB,gBAAT,CAA0BpB,MAA1B,EAA0CW,IAA1C,EAAsD;AAClD,QAAMW,KAAK,GAAG3B,MAAM,CAAC4B,MAAP,CAAcvB,MAAd,EAAsBW,IAAtB,CAAd;AACA,MAAIa,IAAc,GAAGF,KAAK,CAAC,CAAD,CAA1B;;AACA,MAAIE,IAAI,CAACf,IAAL,CAAUgB,QAAV,CAAmB,OAAnB,CAAJ,EAAiC;AAC7BC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,IAAI,CAACI,MAA5B;AACAJ,IAAAA,IAAI,CAACI,MAAL;AACA/B,IAAAA,UAAU,CAACgC,UAAX,CAAsB7B,MAAtB,EAA8B;AAAC8B,MAAAA,EAAE,EAAEnB;AAAL,KAA9B;AACH;AACJ","sourcesContent":["import {Editor, Range, Path, Location, Transforms} from 'slate'\nimport {ListNode, ListItemNode} from './types'\n\nexport const onKeyDown = () => (\n    e: KeyboardEvent,\n    editor: Editor\n) => {\n    let {selection} = editor\n    if (e.key === 'Tab' && selection) {\n        e.preventDefault()\n        const block = Editor.above(editor, {\n            match: n => Editor.isBlock(editor, n),\n        })!\n        if (block[0].type == 'list-item') {\n            if (Range.isCollapsed(selection)) {\n                const path = block[1]\n                const start = Editor.start(editor, path)\n                const range = {anchor: selection.anchor, focus: start}\n                let beforeText = Editor.string(editor, range)\n                if (beforeText.length) {\n                    Editor.insertText(editor, '\\t')\n                    return\n                }\n            }\n            // // move down with tab\n            // const tab = !e.shiftKey;\n            // if (tab) {\n            moveListItemDown(editor, block[1]);\n            // }\n        } else {\n            let p:Location = selection.anchor\n            if (Range.isCollapsed(selection)) {\n                p = p.path\n            }\n            Editor.insertText(editor, '\\t')\n        }\n    }\n};\n\nfunction moveListItemDown(editor: Editor, path: Path) {\n    const entry = Editor.parent(editor, path)\n    let node: ListNode = entry[0] as ListNode\n    if (node.type.endsWith('-list')) {\n        console.log(\"indent:\", node.indent)\n        node.indent++\n        Transforms.splitNodes(editor, {at: path})\n    }\n}"]},"metadata":{},"sourceType":"module"}