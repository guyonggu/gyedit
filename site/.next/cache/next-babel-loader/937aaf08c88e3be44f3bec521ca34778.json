{"ast":null,"code":"var _jsxFileName = \"/Users/yonggu/WebstormProjects/slate/site/examples/markdown-preview.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport Prism from 'prismjs';\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { Slate, Editable, withReact } from 'slate-react';\nimport { Text, createEditor } from 'slate';\nimport { withHistory } from 'slate-history';\nimport { css } from 'emotion' // eslint-disable-next-line\n;\nPrism.languages.markdown = Prism.languages.extend(\"markup\", {}), Prism.languages.insertBefore(\"markdown\", \"prolog\", {\n  blockquote: {\n    pattern: /^>(?:[\\t ]*>)*/m,\n    alias: \"punctuation\"\n  },\n  code: [{\n    pattern: /^(?: {4}|\\t).+/m,\n    alias: \"keyword\"\n  }, {\n    pattern: /``.+?``|`[^`\\n]+`/,\n    alias: \"keyword\"\n  }],\n  title: [{\n    pattern: /\\w+.*(?:\\r?\\n|\\r)(?:==+|--+)/,\n    alias: \"important\",\n    inside: {\n      punctuation: /==+$|--+$/\n    }\n  }, {\n    pattern: /(^\\s*)#+.+/m,\n    lookbehind: !0,\n    alias: \"important\",\n    inside: {\n      punctuation: /^#+|#+$/\n    }\n  }],\n  hr: {\n    pattern: /(^\\s*)([*-])([\\t ]*\\2){2,}(?=\\s*$)/m,\n    lookbehind: !0,\n    alias: \"punctuation\"\n  },\n  list: {\n    pattern: /(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,\n    lookbehind: !0,\n    alias: \"punctuation\"\n  },\n  \"url-reference\": {\n    pattern: /!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,\n    inside: {\n      variable: {\n        pattern: /^(!?\\[)[^\\]]+/,\n        lookbehind: !0\n      },\n      string: /(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,\n      punctuation: /^[\\[\\]!:]|[<>]/\n    },\n    alias: \"url\"\n  },\n  bold: {\n    pattern: /(^|[^\\\\])(\\*\\*|__)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind: !0,\n    inside: {\n      punctuation: /^\\*\\*|^__|\\*\\*$|__$/\n    }\n  },\n  italic: {\n    pattern: /(^|[^\\\\])([*_])(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,\n    lookbehind: !0,\n    inside: {\n      punctuation: /^[*_]|[*_]$/\n    }\n  },\n  url: {\n    pattern: /!?\\[[^\\]]+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[[^\\]\\n]*\\])/,\n    inside: {\n      variable: {\n        pattern: /(!?\\[)[^\\]]+(?=\\]$)/,\n        lookbehind: !0\n      },\n      string: {\n        pattern: /\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/\n      }\n    }\n  }\n}), Prism.languages.markdown.bold.inside.url = Prism.util.clone(Prism.languages.markdown.url), Prism.languages.markdown.italic.inside.url = Prism.util.clone(Prism.languages.markdown.url), Prism.languages.markdown.bold.inside.italic = Prism.util.clone(Prism.languages.markdown.italic), Prism.languages.markdown.italic.inside.bold = Prism.util.clone(Prism.languages.markdown.bold); // prettier-ignore\n\nconst MarkdownPreviewExample = () => {\n  const {\n    0: value,\n    1: setValue\n  } = useState(initialValue);\n  const renderLeaf = useCallback(props => __jsx(Leaf, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 43\n    }\n  })), []);\n  const editor = useMemo(() => withHistory(withReact(createEditor())), []);\n  const decorate = useCallback(([node, path]) => {\n    const ranges = [];\n\n    if (!Text.isText(node)) {\n      return ranges;\n    }\n\n    const getLength = token => {\n      if (typeof token === 'string') {\n        return token.length;\n      } else if (typeof token.content === 'string') {\n        return token.content.length;\n      } else {\n        return token.content.reduce((l, t) => l + getLength(t), 0);\n      }\n    };\n\n    const tokens = Prism.tokenize(node.text, Prism.languages.markdown);\n    let start = 0;\n\n    for (const token of tokens) {\n      const length = getLength(token);\n      const end = start + length;\n\n      if (typeof token !== 'string') {\n        ranges.push({\n          [token.type]: true,\n          anchor: {\n            path,\n            offset: start\n          },\n          focus: {\n            path,\n            offset: end\n          }\n        });\n      }\n\n      start = end;\n    }\n\n    return ranges;\n  }, []);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: value => setValue(value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, __jsx(Editable, {\n    decorate: decorate,\n    renderLeaf: renderLeaf,\n    placeholder: \"Write some markdown...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst Leaf = ({\n  attributes,\n  children,\n  leaf\n}) => {\n  return __jsx(\"span\", _extends({}, attributes, {\n    className: css`\n        font-weight: ${leaf.bold && 'bold'};\n        font-style: ${leaf.italic && 'italic'};\n        text-decoration: ${leaf.underlined && 'underline'};\n        ${leaf.title && css`\n            display: inline-block;\n            font-weight: bold;\n            font-size: 20px;\n            margin: 20px 0 10px 0;\n          `}\n        ${leaf.list && css`\n            padding-left: 10px;\n            font-size: 20px;\n            line-height: 10px;\n          `}\n        ${leaf.hr && css`\n            display: block;\n            text-align: center;\n            border-bottom: 2px solid #ddd;\n          `}\n        ${leaf.blockquote && css`\n            display: inline-block;\n            border-left: 2px solid #ddd;\n            padding-left: 10px;\n            color: #aaa;\n            font-style: italic;\n          `}\n        ${leaf.code && css`\n            font-family: monospace;\n            background-color: #eee;\n            padding: 3px;\n          `}\n      `,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }), children);\n};\n\nconst initialValue = [{\n  children: [{\n    text: 'Slate is flexible enough to add **decorations** that can format text based on its content. For example, this editor has **Markdown** preview decorations on it, to make it _dead_ simple to make an editor with built-in Markdown previewing.'\n  }]\n}, {\n  children: [{\n    text: '## Try it out!'\n  }]\n}, {\n  children: [{\n    text: 'Try it out for yourself!'\n  }]\n}];\nexport default MarkdownPreviewExample;","map":{"version":3,"sources":["/Users/yonggu/WebstormProjects/slate/site/examples/markdown-preview.tsx"],"names":["Prism","React","useState","useCallback","useMemo","Slate","Editable","withReact","Text","createEditor","withHistory","css","languages","markdown","extend","insertBefore","blockquote","pattern","alias","code","title","inside","punctuation","lookbehind","hr","list","variable","string","bold","italic","url","util","clone","MarkdownPreviewExample","value","setValue","initialValue","renderLeaf","props","editor","decorate","node","path","ranges","isText","getLength","token","length","content","reduce","l","t","tokens","tokenize","text","start","end","push","type","anchor","offset","focus","Leaf","attributes","children","leaf","underlined"],"mappings":"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","sourcesContent":["import Prism from 'prismjs'\nimport React, { useState, useCallback, useMemo } from 'react'\nimport { Slate, Editable, withReact } from 'slate-react'\nimport { Node, Text, createEditor } from 'slate'\nimport { withHistory } from 'slate-history'\nimport { css } from 'emotion'\n\n// eslint-disable-next-line\n;Prism.languages.markdown=Prism.languages.extend(\"markup\",{}),Prism.languages.insertBefore(\"markdown\",\"prolog\",{blockquote:{pattern:/^>(?:[\\t ]*>)*/m,alias:\"punctuation\"},code:[{pattern:/^(?: {4}|\\t).+/m,alias:\"keyword\"},{pattern:/``.+?``|`[^`\\n]+`/,alias:\"keyword\"}],title:[{pattern:/\\w+.*(?:\\r?\\n|\\r)(?:==+|--+)/,alias:\"important\",inside:{punctuation:/==+$|--+$/}},{pattern:/(^\\s*)#+.+/m,lookbehind:!0,alias:\"important\",inside:{punctuation:/^#+|#+$/}}],hr:{pattern:/(^\\s*)([*-])([\\t ]*\\2){2,}(?=\\s*$)/m,lookbehind:!0,alias:\"punctuation\"},list:{pattern:/(^\\s*)(?:[*+-]|\\d+\\.)(?=[\\t ].)/m,lookbehind:!0,alias:\"punctuation\"},\"url-reference\":{pattern:/!?\\[[^\\]]+\\]:[\\t ]+(?:\\S+|<(?:\\\\.|[^>\\\\])+>)(?:[\\t ]+(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\)))?/,inside:{variable:{pattern:/^(!?\\[)[^\\]]+/,lookbehind:!0},string:/(?:\"(?:\\\\.|[^\"\\\\])*\"|'(?:\\\\.|[^'\\\\])*'|\\((?:\\\\.|[^)\\\\])*\\))$/,punctuation:/^[\\[\\]!:]|[<>]/},alias:\"url\"},bold:{pattern:/(^|[^\\\\])(\\*\\*|__)(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,lookbehind:!0,inside:{punctuation:/^\\*\\*|^__|\\*\\*$|__$/}},italic:{pattern:/(^|[^\\\\])([*_])(?:(?:\\r?\\n|\\r)(?!\\r?\\n|\\r)|.)+?\\2/,lookbehind:!0,inside:{punctuation:/^[*_]|[*_]$/}},url:{pattern:/!?\\[[^\\]]+\\](?:\\([^\\s)]+(?:[\\t ]+\"(?:\\\\.|[^\"\\\\])*\")?\\)| ?\\[[^\\]\\n]*\\])/,inside:{variable:{pattern:/(!?\\[)[^\\]]+(?=\\]$)/,lookbehind:!0},string:{pattern:/\"(?:\\\\.|[^\"\\\\])*\"(?=\\)$)/}}}}),Prism.languages.markdown.bold.inside.url=Prism.util.clone(Prism.languages.markdown.url),Prism.languages.markdown.italic.inside.url=Prism.util.clone(Prism.languages.markdown.url),Prism.languages.markdown.bold.inside.italic=Prism.util.clone(Prism.languages.markdown.italic),Prism.languages.markdown.italic.inside.bold=Prism.util.clone(Prism.languages.markdown.bold); // prettier-ignore\n\nconst MarkdownPreviewExample = () => {\n  const [value, setValue] = useState<Node[]>(initialValue)\n  const renderLeaf = useCallback(props => <Leaf {...props} />, [])\n  const editor = useMemo(() => withHistory(withReact(createEditor())), [])\n  const decorate = useCallback(([node, path]) => {\n    const ranges = []\n\n    if (!Text.isText(node)) {\n      return ranges\n    }\n\n    const getLength = token => {\n      if (typeof token === 'string') {\n        return token.length\n      } else if (typeof token.content === 'string') {\n        return token.content.length\n      } else {\n        return token.content.reduce((l, t) => l + getLength(t), 0)\n      }\n    }\n\n    const tokens = Prism.tokenize(node.text, Prism.languages.markdown)\n    let start = 0\n\n    for (const token of tokens) {\n      const length = getLength(token)\n      const end = start + length\n\n      if (typeof token !== 'string') {\n        ranges.push({\n          [token.type]: true,\n          anchor: { path, offset: start },\n          focus: { path, offset: end },\n        })\n      }\n\n      start = end\n    }\n\n    return ranges\n  }, [])\n\n  return (\n    <Slate editor={editor} value={value} onChange={value => setValue(value)}>\n      <Editable\n        decorate={decorate}\n        renderLeaf={renderLeaf}\n        placeholder=\"Write some markdown...\"\n      />\n    </Slate>\n  )\n}\n\nconst Leaf = ({ attributes, children, leaf }) => {\n  return (\n    <span\n      {...attributes}\n      className={css`\n        font-weight: ${leaf.bold && 'bold'};\n        font-style: ${leaf.italic && 'italic'};\n        text-decoration: ${leaf.underlined && 'underline'};\n        ${leaf.title &&\n          css`\n            display: inline-block;\n            font-weight: bold;\n            font-size: 20px;\n            margin: 20px 0 10px 0;\n          `}\n        ${leaf.list &&\n          css`\n            padding-left: 10px;\n            font-size: 20px;\n            line-height: 10px;\n          `}\n        ${leaf.hr &&\n          css`\n            display: block;\n            text-align: center;\n            border-bottom: 2px solid #ddd;\n          `}\n        ${leaf.blockquote &&\n          css`\n            display: inline-block;\n            border-left: 2px solid #ddd;\n            padding-left: 10px;\n            color: #aaa;\n            font-style: italic;\n          `}\n        ${leaf.code &&\n          css`\n            font-family: monospace;\n            background-color: #eee;\n            padding: 3px;\n          `}\n      `}\n    >\n      {children}\n    </span>\n  )\n}\n\nconst initialValue = [\n  {\n    children: [\n      {\n        text:\n          'Slate is flexible enough to add **decorations** that can format text based on its content. For example, this editor has **Markdown** preview decorations on it, to make it _dead_ simple to make an editor with built-in Markdown previewing.',\n      },\n    ],\n  },\n  {\n    children: [{ text: '## Try it out!' }],\n  },\n  {\n    children: [{ text: 'Try it out for yourself!' }],\n  },\n]\n\nexport default MarkdownPreviewExample\n"]},"metadata":{},"sourceType":"module"}