{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n            display: block;\\n            max-width: 100%;\\n            max-height: 20em;\\n            box-shadow: \", \";\\n          \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useMemo } from 'react';\nimport imageExtensions from 'image-extensions';\nimport isUrl from 'is-url';\nimport { Transforms, createEditor } from 'slate';\nimport { Slate, Editable, useEditor, useSelected, useFocused, withReact } from 'slate-react';\nimport { withHistory } from 'slate-history';\nimport { css } from 'emotion';\nimport { Button, Icon, Toolbar } from '../components';\n\nvar ImagesExample = function ImagesExample() {\n  var _useState = useState(initialValue),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var editor = useMemo(function () {\n    return withImages(withHistory(withReact(createEditor())));\n  }, []);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: function onChange(value) {\n      return setValue(value);\n    }\n  }, __jsx(Toolbar, null, __jsx(InsertImageButton, null)), __jsx(Editable, {\n    renderElement: function renderElement(props) {\n      return __jsx(Element, props);\n    },\n    placeholder: \"Enter some text...\"\n  }));\n};\n\nvar withImages = function withImages(editor) {\n  var insertData = editor.insertData,\n      isVoid = editor.isVoid;\n\n  editor.isVoid = function (element) {\n    return element.type === 'image' ? true : isVoid(element);\n  };\n\n  editor.insertData = function (data) {\n    var text = data.getData('text/plain');\n    var files = data.files;\n\n    if (files && files.length > 0) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        var _loop = function _loop() {\n          var file = _step.value;\n          var reader = new FileReader();\n\n          var _file$type$split = file.type.split('/'),\n              _file$type$split2 = _slicedToArray(_file$type$split, 1),\n              mime = _file$type$split2[0];\n\n          if (mime === 'image') {\n            reader.addEventListener('load', function () {\n              var url = reader.result;\n              insertImage(editor, url);\n            });\n            reader.readAsDataURL(file);\n          }\n        };\n\n        for (var _iterator = files[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          _loop();\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    } else if (isImageUrl(text)) {\n      insertImage(editor, text);\n    } else {\n      insertData(data);\n    }\n  };\n\n  return editor;\n};\n\nvar insertImage = function insertImage(editor, url) {\n  var text = {\n    text: ''\n  };\n  var image = {\n    type: 'image',\n    url: url,\n    children: [text]\n  };\n  Transforms.insertNodes(editor, image);\n};\n\nvar Element = function Element(props) {\n  var attributes = props.attributes,\n      children = props.children,\n      element = props.element;\n\n  switch (element.type) {\n    case 'image':\n      return __jsx(ImageElement, props);\n\n    default:\n      return __jsx(\"p\", attributes, children);\n  }\n};\n\nvar ImageElement = function ImageElement(_ref) {\n  var attributes = _ref.attributes,\n      children = _ref.children,\n      element = _ref.element;\n  var selected = useSelected();\n  var focused = useFocused();\n  return __jsx(\"div\", attributes, __jsx(\"div\", {\n    contentEditable: false\n  }, __jsx(\"img\", {\n    src: element.url,\n    className: css(_templateObject(), selected && focused ? '0 0 0 3px #B4D5FF' : 'none')\n  })), children);\n};\n\nvar InsertImageButton = function InsertImageButton() {\n  var editor = useEditor();\n  return __jsx(Button, {\n    onMouseDown: function onMouseDown(event) {\n      event.preventDefault();\n      var url = window.prompt('Enter the URL of the image:');\n      if (!url) return;\n      insertImage(editor, url);\n    }\n  }, __jsx(Icon, null, \"image\"));\n};\n\nvar isImageUrl = function isImageUrl(url) {\n  if (!url) return false;\n  if (!isUrl(url)) return false;\n  var ext = new URL(url).pathname.split('.').pop();\n  return imageExtensions.includes(ext);\n};\n\nvar initialValue = [{\n  type: 'paragraph',\n  children: [{\n    text: 'In addition to nodes that contain editable text, you can also create other types of nodes, like images or videos.'\n  }]\n}, {\n  type: 'image',\n  url: 'https://source.unsplash.com/kFrdX5IeQzI',\n  children: [{\n    text: ''\n  }]\n}, {\n  type: 'paragraph',\n  children: [{\n    text: 'This example shows images in action. It features two ways to add images. You can either add an image via the toolbar icon above, or if you want in on a little secret, copy an image URL to your keyboard and paste it anywhere in the editor!'\n  }]\n}];\nexport default ImagesExample;","map":null,"metadata":{},"sourceType":"module"}