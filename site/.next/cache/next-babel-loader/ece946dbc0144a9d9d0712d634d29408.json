{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { Slate, Editable, withReact } from 'slate-react';\nimport { Editor, Range, Point, createEditor } from 'slate';\nimport { withHistory } from 'slate-history';\n\nvar TablesExample = function TablesExample() {\n  var _useState = useState(initialValue),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var renderElement = useCallback(function (props) {\n    return __jsx(Element, props);\n  }, []);\n  var renderLeaf = useCallback(function (props) {\n    return __jsx(Leaf, props);\n  }, []);\n  var editor = useMemo(function () {\n    return withTables(withHistory(withReact(createEditor())));\n  }, []);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: function onChange(value) {\n      return setValue(value);\n    }\n  }, __jsx(Editable, {\n    renderElement: renderElement,\n    renderLeaf: renderLeaf\n  }));\n};\n\nvar withTables = function withTables(editor) {\n  var deleteBackward = editor.deleteBackward,\n      deleteForward = editor.deleteForward,\n      insertBreak = editor.insertBreak;\n\n  editor.deleteBackward = function (unit) {\n    var selection = editor.selection;\n\n    if (selection && Range.isCollapsed(selection)) {\n      var _Editor$nodes = Editor.nodes(editor, {\n        match: function match(n) {\n          return n.type === 'table-cell';\n        }\n      }),\n          _Editor$nodes2 = _slicedToArray(_Editor$nodes, 1),\n          cell = _Editor$nodes2[0];\n\n      if (cell) {\n        var _cell = _slicedToArray(cell, 2),\n            cellPath = _cell[1];\n\n        var start = Editor.start(editor, cellPath);\n\n        if (Point.equals(selection.anchor, start)) {\n          return;\n        }\n      }\n    }\n\n    deleteBackward(unit);\n  };\n\n  editor.deleteForward = function (unit) {\n    var selection = editor.selection;\n\n    if (selection && Range.isCollapsed(selection)) {\n      var _Editor$nodes3 = Editor.nodes(editor, {\n        match: function match(n) {\n          return n.type === 'table-cell';\n        }\n      }),\n          _Editor$nodes4 = _slicedToArray(_Editor$nodes3, 1),\n          cell = _Editor$nodes4[0];\n\n      if (cell) {\n        var _cell2 = _slicedToArray(cell, 2),\n            cellPath = _cell2[1];\n\n        var end = Editor.end(editor, cellPath);\n\n        if (Point.equals(selection.anchor, end)) {\n          return;\n        }\n      }\n    }\n\n    deleteForward(unit);\n  };\n\n  editor.insertBreak = function () {\n    var selection = editor.selection;\n\n    if (selection) {\n      var _Editor$nodes5 = Editor.nodes(editor, {\n        match: function match(n) {\n          return n.type === 'table';\n        }\n      }),\n          _Editor$nodes6 = _slicedToArray(_Editor$nodes5, 1),\n          table = _Editor$nodes6[0];\n\n      if (table) {\n        return;\n      }\n    }\n\n    insertBreak();\n  };\n\n  return editor;\n};\n\nvar Element = function Element(_ref) {\n  var attributes = _ref.attributes,\n      children = _ref.children,\n      element = _ref.element;\n\n  switch (element.type) {\n    case 'table':\n      return __jsx(\"table\", null, __jsx(\"tbody\", attributes, children));\n\n    case 'table-row':\n      return __jsx(\"tr\", attributes, children);\n\n    case 'table-cell':\n      return __jsx(\"td\", attributes, children);\n\n    default:\n      return __jsx(\"p\", attributes, children);\n  }\n};\n\nvar Leaf = function Leaf(_ref2) {\n  var attributes = _ref2.attributes,\n      children = _ref2.children,\n      leaf = _ref2.leaf;\n\n  if (leaf.bold) {\n    children = __jsx(\"strong\", null, children);\n  }\n\n  return __jsx(\"span\", attributes, children);\n};\n\nvar initialValue = [{\n  children: [{\n    text: 'Since the editor is based on a recursive tree model, similar to an HTML document, you can create complex nested structures, like tables:'\n  }]\n}, {\n  type: 'table',\n  children: [{\n    type: 'table-row',\n    children: [{\n      type: 'table-cell',\n      children: [{\n        text: ''\n      }]\n    }, {\n      type: 'table-cell',\n      children: [{\n        text: 'Human',\n        bold: true\n      }]\n    }, {\n      type: 'table-cell',\n      children: [{\n        text: 'Dog',\n        bold: true\n      }]\n    }, {\n      type: 'table-cell',\n      children: [{\n        text: 'Cat',\n        bold: true\n      }]\n    }]\n  }, {\n    type: 'table-row',\n    children: [{\n      type: 'table-cell',\n      children: [{\n        text: '# of Feet',\n        bold: true\n      }]\n    }, {\n      type: 'table-cell',\n      children: [{\n        text: '2'\n      }]\n    }, {\n      type: 'table-cell',\n      children: [{\n        text: '4'\n      }]\n    }, {\n      type: 'table-cell',\n      children: [{\n        text: '4'\n      }]\n    }]\n  }, {\n    type: 'table-row',\n    children: [{\n      type: 'table-cell',\n      children: [{\n        text: '# of Lives',\n        bold: true\n      }]\n    }, {\n      type: 'table-cell',\n      children: [{\n        text: '1'\n      }]\n    }, {\n      type: 'table-cell',\n      children: [{\n        text: '1'\n      }]\n    }, {\n      type: 'table-cell',\n      children: [{\n        text: '9'\n      }]\n    }]\n  }]\n}, {\n  children: [{\n    text: \"This table is just a basic example of rendering a table, and it doesn't have fancy functionality. But you could augment it to add support for navigating with arrow keys, displaying table headers, adding column and rows, or even formulas if you wanted to get really crazy!\"\n  }]\n}];\nexport default TablesExample;","map":null,"metadata":{},"sourceType":"module"}