{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { Editor, Point, Range, Element, Transforms } from \"slate\";\nimport { fixList, isListNode } from \"./util\";\nvar SHORTCUTS = {\n  '*': 'ul-item',\n  '-': 'ul-item',\n  '+': 'ul-item',\n  '>': 'block-quote',\n  '#': 'heading-one',\n  '##': 'heading-two',\n  '###': 'heading-three',\n  '####': 'heading-four',\n  '#####': 'heading-five',\n  '######': 'heading-six'\n};\nexport var withMarkdown = function withMarkdown(editor) {\n  var deleteBackward = editor.deleteBackward,\n      insertText = editor.insertText,\n      insertBreak = editor.insertBreak,\n      deleteFragment = editor.deleteFragment,\n      normalizeNode = editor.normalizeNode;\n\n  var insertBreak2 = function insertBreak2() {\n    var handled = false;\n    var selection = editor.selection;\n\n    if (!selection || Range.isExpanded(selection)) {\n      insertBreak();\n      return;\n    }\n\n    var block = Editor.above(editor, {\n      match: function match(n) {\n        return Editor.isBlock(editor, n);\n      }\n    });\n\n    if (!block || Editor.isEditor(block[0])) {\n      insertBreak();\n      return;\n    }\n\n    var parent = Editor.parent(editor, block[1]);\n\n    if (!parent || Editor.isEditor(parent[0])) {\n      insertBreak();\n      return;\n    }\n\n    var text = Editor.string(editor, block[1]);\n\n    if (text) {\n      insertBreak();\n      return;\n    }\n\n    var blockPath = block[1];\n    var indent = 0;\n\n    if (typeof parent[0].indent === \"number\") {\n      indent = parent[0].indent > 1 ? parent[0].indent - 1 : 0;\n    }\n\n    Transforms.setNodes(editor, {\n      type: 'paragraph',\n      indent: indent\n    }, {\n      at: blockPath\n    }); // if it is the last child\n\n    if (blockPath[blockPath.length - 1] === parent[0].children.length - 1) {\n      Transforms.liftNodes(editor, {\n        at: blockPath\n      });\n      return;\n    }\n  };\n\n  editor.insertBreak = function () {\n    insertBreak2();\n    fixList(editor);\n  };\n\n  editor.insertText = function (text) {\n    var selection = editor.selection;\n\n    if (text !== ' ' || !selection || !Range.isCollapsed(selection)) {\n      insertText(text);\n      return;\n    }\n\n    var anchor = selection.anchor;\n    var block = Editor.above(editor, {\n      match: function match(n) {\n        return Editor.isBlock(editor, n);\n      }\n    });\n    var path = block ? block[1] : [];\n    var start = Editor.start(editor, path);\n    var range = {\n      anchor: anchor,\n      focus: start\n    };\n    var beforeText = Editor.string(editor, range);\n    var tabs = 0;\n\n    var _iterator = _createForOfIteratorHelper(beforeText),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var c = _step.value;\n\n        if (c === '\\t') {\n          tabs++;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    beforeText = beforeText.substr(tabs);\n    var blockType = block[0].type;\n    var inList = typeof blockType === 'string' ? blockType === 'list-item' : false;\n    var type = SHORTCUTS[beforeText];\n\n    if (!type && /^[1-9]\\d*\\./.test(beforeText)) {\n      type = 'ol-item';\n    }\n\n    var list;\n\n    switch (type) {\n      case 'ul-item':\n        if (inList) {\n          insertText(text);\n          break;\n        }\n\n        Transforms.select(editor, range);\n        Transforms[\"delete\"](editor);\n        Transforms.setNodes(editor, {\n          type: 'list-item'\n        }, {\n          match: function match(n) {\n            return Editor.isBlock(editor, n);\n          }\n        });\n        list = {\n          type: 'bulleted-list',\n          indent: tabs,\n          children: []\n        };\n        Transforms.wrapNodes(editor, list, {\n          match: function match(n) {\n            return n.type === 'list-item';\n          }\n        });\n        fixList(editor);\n        break;\n\n      case 'ol-item':\n        if (inList) {\n          insertText(text);\n          break;\n        }\n\n        var found = beforeText.match(/^([\\t]*)\\d+\\./);\n        Transforms.select(editor, range);\n        Transforms[\"delete\"](editor);\n        Transforms.setNodes(editor, {\n          type: 'list-item'\n        }, {\n          match: function match(n) {\n            return Editor.isBlock(editor, n);\n          }\n        });\n        list = {\n          type: 'numbered-list',\n          indent: tabs,\n          children: []\n        };\n        Transforms.wrapNodes(editor, list, {\n          match: function match(n) {\n            return n.type === 'list-item';\n          }\n        });\n        fixList(editor);\n        break;\n\n      case 'block-quote':\n        if (inList || blockType !== 'paragraph') {\n          insertText(text);\n          break;\n        }\n\n        var parent = Editor.above(editor, {\n          match: function match(n) {\n            return n.type === 'block-quote';\n          }\n        });\n\n        if (parent) {\n          insertText(text);\n          break;\n        }\n\n        Transforms.select(editor, range);\n        Transforms[\"delete\"](editor);\n        Transforms.wrapNodes(editor, {\n          type: 'block-quote',\n          children: []\n        }, {\n          match: function match(n) {\n            return n.type === 'paragraph';\n          }\n        });\n        break;\n\n      default:\n        insertText(text);\n    }\n\n    return;\n  };\n\n  var deleteBackward2 = function deleteBackward2(unit) {\n    console.log(\"editor.deleteBackward:\", unit);\n    var selection = editor.selection;\n\n    if (!selection || Range.isExpanded(selection)) {\n      deleteBackward(unit);\n      return;\n    }\n\n    var match = Editor.above(editor, {\n      match: function match(n) {\n        return Editor.isBlock(editor, n);\n      }\n    });\n\n    if (!match || Editor.isEditor(match[0])) {\n      deleteBackward(unit);\n      return;\n    }\n\n    var _ref = match,\n        _ref2 = _slicedToArray(_ref, 2),\n        block = _ref2[0],\n        path = _ref2[1];\n\n    var start = Editor.start(editor, path);\n\n    if (Point.equals(selection.anchor, start)) {\n      if (block.type === 'list-item') {\n        var _ref3 = Editor.parent(editor, path),\n            _ref4 = _slicedToArray(_ref3, 1),\n            listNode = _ref4[0];\n\n        if (listNode && listNode.indent > 0) {\n          Editor.withoutNormalizing(editor, function () {\n            Transforms.wrapNodes(editor, {\n              type: listNode.type,\n              indent: listNode.indent - 1,\n              children: []\n            }, {\n              at: path\n            });\n            Transforms.liftNodes(editor, {\n              at: path\n            });\n          });\n        } else {\n          Transforms.setNodes(editor, {\n            type: 'paragraph'\n          });\n          Transforms.unwrapNodes(editor, {\n            match: function match(n) {\n              return typeof n.type === 'string' && n.type.endsWith('-list');\n            },\n            split: true\n          }); // deleteBackward(unit)\n        }\n      } else if (block.type === 'paragraph') {\n        if (block.indent && block.indent > 0) {\n          Transforms.setNodes(editor, {\n            indent: block.indent - 1\n          }, {\n            at: path\n          });\n          return;\n        } else {\n          deleteBackward(unit);\n        }\n      } else {\n        Transforms.setNodes(editor, {\n          type: 'paragraph'\n        });\n      }\n\n      return;\n    } // end if at start\n\n\n    deleteBackward(unit);\n  };\n\n  editor.deleteBackward = function (unit) {\n    console.log(\"editor.deleteBackward:\", unit);\n    deleteBackward2(unit);\n    fixList(editor);\n  };\n\n  editor.deleteFragment = function () {\n    console.log(\"editor.deleteFragment:\");\n    deleteFragment();\n  };\n\n  editor.normalizeNode = function (entry) {\n    if (Element.isElement(entry[0]) && entry[0].type !== 'list-item') {\n      var _ref5 = Editor.parent(editor, entry[1]),\n          _ref6 = _slicedToArray(_ref5, 1),\n          pNode = _ref6[0];\n\n      if (isListNode(pNode)) {\n        Transforms.setNodes(editor, {\n          type: 'list-item'\n        }, {\n          at: entry[1]\n        });\n      }\n    }\n  };\n\n  return editor;\n};\n\nvar beforeTextInBlock = function beforeTextInBlock(editor) {\n  var selection = editor.selection;\n\n  if (!selection) {\n    return '';\n  }\n\n  var block = Editor.above(editor, {\n    match: function match(n) {\n      return Editor.isBlock(editor, n);\n    }\n  });\n  var path = block ? block[1] : [];\n  var start = Editor.start(editor, path);\n  var range = {\n    anchor: Range.start(editor.selection),\n    focus: start\n  };\n  var beforeText = Editor.string(editor, range);\n  return beforeText;\n}; //\n// Transforms.delete =(\n//     editor: Editor,\n//     options: {\n//     at?: Location\n//     distance?: number\n//     unit?: 'character' | 'word' | 'line' | 'block'\n//     reverse?: boolean\n//     hanging?: boolean\n//     voids?: boolean\n// } = {}\n// ):void => {\n//     Editor.withoutNormalizing(editor, () => {\n//         const {\n//             reverse = false,\n//             unit = 'character',\n//             distance = 1,\n//             voids = false,\n//         } = options\n//         let { at = editor.selection, hanging = false } = options\n//\n//         if (!at) {\n//             return\n//         }\n//\n//         if (Range.isRange(at) && Range.isCollapsed(at)) {\n//             at = at.anchor\n//         }\n//\n//         if (Point.isPoint(at)) {\n//             const furthestVoid = Editor.void(editor, { at, mode: 'highest' })\n//\n//             if (!voids && furthestVoid) {\n//                 const [, voidPath] = furthestVoid\n//                 at = voidPath\n//             } else {\n//                 const opts = { unit, distance }\n//                 const target = reverse\n//                     ? Editor.before(editor, at, opts) || Editor.start(editor, [])\n//                     : Editor.after(editor, at, opts) || Editor.end(editor, [])\n//                 at = { anchor: at, focus: target }\n//                 hanging = true\n//             }\n//         }\n//\n//         if (Path.isPath(at)) {\n//             Transforms.removeNodes(editor, { at, voids })\n//             return\n//         }\n//\n//         if (Range.isCollapsed(at)) {\n//             return\n//         }\n//\n//         if (!hanging) {\n//             at = Editor.unhangRange(editor, at, { voids })\n//         }\n//\n//         let [start, end] = Range.edges(at)\n//         const startBlock = Editor.above(editor, {\n//             match: n => Editor.isBlock(editor, n),\n//             at: start,\n//             voids,\n//         })\n//         const endBlock = Editor.above(editor, {\n//             match: n => Editor.isBlock(editor, n),\n//             at: end,\n//             voids,\n//         })\n//         const isAcrossBlocks =\n//             startBlock && endBlock && !Path.equals(startBlock[1], endBlock[1])\n//         const isSingleText = Path.equals(start.path, end.path)\n//         const startVoid = voids\n//             ? null\n//             : Editor.void(editor, { at: start, mode: 'highest' })\n//         const endVoid = voids\n//             ? null\n//             : Editor.void(editor, { at: end, mode: 'highest' })\n//\n//         // If the start or end points are inside an inline void, nudge them out.\n//         if (startVoid) {\n//             const before = Editor.before(editor, start)\n//\n//             if (\n//                 before &&\n//                 startBlock &&\n//                 Path.isAncestor(startBlock[1], before.path)\n//             ) {\n//                 start = before\n//             }\n//         }\n//\n//         if (endVoid) {\n//             const after = Editor.after(editor, end)\n//\n//             if (after && endBlock && Path.isAncestor(endBlock[1], after.path)) {\n//                 end = after\n//             }\n//         }\n//\n//         // Get the highest nodes that are completely inside the range, as well as\n//         // the start and end nodes.\n//         const matches: NodeEntry[] = []\n//         let lastPath: Path | undefined\n//\n//         for (const entry of Editor.nodes(editor, { at, voids })) {\n//             const [node, path] = entry\n//\n//             if (lastPath && Path.compare(path, lastPath) === 0) {\n//                 continue\n//             }\n//\n//             if (\n//                 (!voids && Editor.isVoid(editor, node)) ||\n//                 (!Path.isCommon(path, start.path) && !Path.isCommon(path, end.path))\n//             ) {\n//                 matches.push(entry)\n//                 lastPath = path\n//             }\n//         }\n//\n//         const pathRefs = Array.from(matches, ([, p]) => Editor.pathRef(editor, p))\n//         const startRef = Editor.pointRef(editor, start)\n//         const endRef = Editor.pointRef(editor, end)\n//\n//         if (!isSingleText && !startVoid) {\n//             const point = startRef.current!\n//             const [node] = Editor.leaf(editor, point)\n//             const { path } = point\n//             const { offset } = start\n//             const text = node.text.slice(offset)\n//             editor.apply({ type: 'remove_text', path, offset, text })\n//         }\n//\n//         for (const pathRef of pathRefs) {\n//             const path = pathRef.unref()!\n//             console.log(\"remove not at:\", path)\n//             Transforms.removeNodes(editor, { at: path, voids })\n//         }\n//\n//         if (!endVoid) {\n//             const point = endRef.current!\n//             const [node] = Editor.leaf(editor, point)\n//             const { path } = point\n//             const offset = isSingleText ? start.offset : 0\n//             const text = node.text.slice(offset, end.offset)\n//             editor.apply({ type: 'remove_text', path, offset, text })\n//         }\n//\n//         if (\n//             !isSingleText &&\n//             isAcrossBlocks &&\n//             endRef.current &&\n//             startRef.current\n//         ) {\n//             console.log(\"merge node at:\", endRef.current)\n//             Transforms.mergeNodes(editor, {\n//                 at: endRef.current,\n//                 hanging: true,\n//                 voids,\n//             })\n//         }\n//\n//         const point = endRef.unref() || startRef.unref()\n//\n//         if (options.at == null && point) {\n//             Transforms.select(editor, point)\n//         }\n//     })\n// }\n//\n// Transforms.mergeNodes = (\n//     editor: Editor,\n//     options: {\n//     at?: Location\n//     match?: (node: Node) => boolean\n//     mode?: 'highest' | 'lowest'\n//     hanging?: boolean\n//     voids?: boolean\n// } = {}\n// ) => {\n//     Editor.withoutNormalizing(editor, () => {\n//         let { match, at = editor.selection } = options\n//         const { hanging = false, voids = false, mode = 'lowest' } = options\n//\n//         if (!at) {\n//             return\n//         }\n//\n//         if (match == null) {\n//             if (Path.isPath(at)) {\n//                 const [parent] = Editor.parent(editor, at)\n//                 match = n => parent.children.includes(n)\n//             } else {\n//                 match = n => Editor.isBlock(editor, n)\n//             }\n//         }\n//\n//         if (!hanging && Range.isRange(at)) {\n//             at = Editor.unhangRange(editor, at)\n//         }\n//\n//         if (Range.isRange(at)) {\n//             if (Range.isCollapsed(at)) {\n//                 at = at.anchor\n//             } else {\n//                 const [, end] = Range.edges(at)\n//                 const pointRef = Editor.pointRef(editor, end)\n//                 Transforms.delete(editor, { at })\n//                 at = pointRef.unref()!\n//\n//                 if (options.at == null) {\n//                     Transforms.select(editor, at)\n//                 }\n//             }\n//         }\n//\n//         const [current] = Editor.nodes(editor, { at, match, voids, mode })\n//         const prev = Editor.previous(editor, { at, match, voids, mode })\n//\n//         if (!current || !prev) {\n//             return\n//         }\n//\n//         const [node, path] = current\n//         const [prevNode, prevPath] = prev\n//\n//         if (path.length === 0 || prevPath.length === 0) {\n//             return\n//         }\n//\n//         const newPath = Path.next(prevPath)\n//         const commonPath = Path.common(path, prevPath)\n//         const isPreviousSibling = Path.isSibling(path, prevPath)\n//         const levels = Array.from(Editor.levels(editor, { at: path }), ([n]) => n)\n//             .slice(commonPath.length)\n//             .slice(0, -1)\n//\n//         // Determine if the merge will leave an ancestor of the path empty as a\n//         // result, in which case we'll want to remove it after merging.\n//         const emptyAncestor = Editor.above(editor, {\n//             at: path,\n//             mode: 'highest',\n//             match: n =>\n//                 levels.includes(n) && Element.isElement(n) && n.children.length === 1,\n//         })\n//\n//         const emptyRef = emptyAncestor && Editor.pathRef(editor, emptyAncestor[1])\n//         let properties\n//         let position\n//\n//         // Ensure that the nodes are equivalent, and figure out what the position\n//         // and extra properties of the merge will be.\n//         if (Text.isText(node) && Text.isText(prevNode)) {\n//             const { text, ...rest } = node\n//             position = prevNode.text.length\n//             properties = rest as Partial<Text>\n//         } else if (Element.isElement(node) && Element.isElement(prevNode)) {\n//             const { children, ...rest } = node\n//             position = prevNode.children.length\n//             properties = rest as Partial<Element>\n//         } else {\n//             throw new Error(\n//                 `Cannot merge the node at path [${path}] with the previous sibling because it is not the same kind: ${JSON.stringify(\n//                     node\n//                 )} ${JSON.stringify(prevNode)}`\n//             )\n//         }\n//\n//         // If the node isn't already the next sibling of the previous node, move\n//         // it so that it is before merging.\n//         if (!isPreviousSibling) {\n//             console.log(\"In merge, movNodes from \", path, \"to\", newPath)\n//             Transforms.moveNodes(editor, { at: path, to: newPath, voids })\n//         }\n//\n//         // If there was going to be an empty ancestor of the node that was merged,\n//         // we remove it from the tree.\n//         if (emptyRef) {\n//             console.log(\"In merge, remove node at:\", emptyRef.current)\n//             Transforms.removeNodes(editor, { at: emptyRef.current!, voids })\n//         }\n//\n//         // If the target node that we're merging with is empty, remove it instead\n//         // of merging the two. This is a common rich text editor behavior to\n//         // prevent losing formatting when deleting entire nodes when you have a\n//         // hanging selection.\n//         if (\n//             (Element.isElement(prevNode) && Editor.isEmpty(editor, prevNode)) ||\n//             (Text.isText(prevNode) && prevNode.text === '')\n//         ) {\n//             console.log(\"In merge, remove2\", prevNode.type, \"node at:\", prevPath)\n//             Transforms.removeNodes(editor, { at: prevPath, voids })\n//         } else {\n//             editor.apply({\n//                 type: 'merge_node',\n//                 path: newPath,\n//                 position,\n//                 properties,\n//             })\n//         }\n//\n//         if (emptyRef) {\n//             emptyRef.unref()\n//         }\n//     })\n// }","map":{"version":3,"sources":["/Users/yonggu/WebstormProjects/gyedit/src/withMarkdown.ts"],"names":["Editor","Point","Range","Element","Transforms","fixList","isListNode","SHORTCUTS","withMarkdown","editor","deleteBackward","insertText","insertBreak","deleteFragment","normalizeNode","insertBreak2","handled","selection","isExpanded","block","above","match","n","isBlock","isEditor","parent","text","string","blockPath","indent","setNodes","type","at","length","children","liftNodes","isCollapsed","anchor","path","start","range","focus","beforeText","tabs","c","substr","blockType","inList","test","list","select","wrapNodes","found","deleteBackward2","unit","console","log","equals","listNode","withoutNormalizing","unwrapNodes","endsWith","split","entry","isElement","pNode","beforeTextInBlock"],"mappings":"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":["import {Editor, Path, Point, Range, Element, Text, Transforms, NodeEntry} from \"slate\";\nimport {ListNode} from './types'\nimport {fixList, isListNode} from \"./util\";\n\nconst SHORTCUTS = {\n    '*': 'ul-item',\n    '-': 'ul-item',\n    '+': 'ul-item',\n    '>': 'block-quote',\n    '#': 'heading-one',\n    '##': 'heading-two',\n    '###': 'heading-three',\n    '####': 'heading-four',\n    '#####': 'heading-five',\n    '######': 'heading-six',\n}\n\nexport const withMarkdown = (editor: Editor) => {\n    const {deleteBackward, insertText, insertBreak, deleteFragment, normalizeNode} = editor\n\n    const insertBreak2 = () => {\n        let handled = false\n        const {selection} = editor\n\n        if (!selection || Range.isExpanded(selection)) {\n            insertBreak()\n            return\n        }\n        const block = Editor.above(editor, {\n            match: n => Editor.isBlock(editor, n),\n        })\n        if (!block || Editor.isEditor(block[0])) {\n            insertBreak()\n            return\n        }\n        const parent = Editor.parent(editor, block[1])\n        if (!parent || Editor.isEditor(parent[0])) {\n            insertBreak()\n            return\n        }\n        const text = Editor.string(editor, block[1])\n        if (text) {\n            insertBreak()\n            return\n        }\n        const blockPath: Path = block[1]\n        let indent = 0\n        if (typeof parent[0].indent === \"number\") {\n            indent = parent[0].indent > 1 ? parent[0].indent - 1 : 0\n        }\n        Transforms.setNodes(editor, {type: 'paragraph', indent}, {at: blockPath})\n        // if it is the last child\n        if (blockPath[blockPath.length - 1] === parent[0].children.length - 1) {\n            Transforms.liftNodes(editor, {at: blockPath})\n            return\n        }\n    }\n    editor.insertBreak = () => {\n        insertBreak2()\n        fixList(editor)\n    }\n    editor.insertText = (text: string) => {\n        const {selection} = editor\n        if ((text !== ' ') || !selection || !Range.isCollapsed(selection)) {\n            insertText(text)\n            return\n        }\n\n        const {anchor} = selection\n        const block = Editor.above(editor, {\n            match: n => Editor.isBlock(editor, n),\n        })\n        const path = block ? block[1] : []\n        const start = Editor.start(editor, path)\n        const range = {anchor, focus: start}\n        let beforeText = Editor.string(editor, range)\n        let tabs = 0\n        for (let c of beforeText) {\n            if (c === '\\t') {\n                tabs++\n            }\n        }\n        beforeText = beforeText.substr(tabs)\n        const blockType = block![0].type as string\n        let inList = typeof blockType === 'string' ? blockType === 'list-item' : false\n\n\n        let type = SHORTCUTS[beforeText]\n\n        if (!type && /^[1-9]\\d*\\./.test(beforeText)) {\n            type = 'ol-item'\n        }\n        let list\n        switch (type) {\n            case 'ul-item':\n                if (inList) {\n                    insertText(text)\n                    break\n                }\n                Transforms.select(editor, range)\n                Transforms.delete(editor)\n                Transforms.setNodes(\n                    editor,\n                    {type: 'list-item'},\n                    {match: n => Editor.isBlock(editor, n)}\n                )\n                list = {type: 'bulleted-list', indent: tabs, children: []}\n                Transforms.wrapNodes(editor, list, {\n                    match: n => n.type === 'list-item',\n                })\n                fixList(editor)\n                break\n            case 'ol-item':\n                if (inList) {\n                    insertText(text)\n                    break\n                }\n                const found = beforeText.match(/^([\\t]*)\\d+\\./)\n                Transforms.select(editor, range)\n                Transforms.delete(editor)\n                Transforms.setNodes(\n                    editor,\n                    {type: 'list-item'},\n                    {match: n => Editor.isBlock(editor, n)}\n                )\n                list = {type: 'numbered-list', indent: tabs, children: []}\n                Transforms.wrapNodes(editor, list, {\n                    match: n => n.type === 'list-item',\n                })\n                fixList(editor)\n                break\n            case 'block-quote':\n                if (inList || blockType !== 'paragraph') {\n                    insertText(text)\n                    break\n                }\n                let parent = Editor.above(editor, {match: n => n.type === 'block-quote'})\n                if (parent) {\n                    insertText(text)\n                    break\n                }\n                Transforms.select(editor, range)\n                Transforms.delete(editor)\n                Transforms.wrapNodes(editor, {type: 'block-quote', children: []}, {\n                    match: n => n.type === 'paragraph'\n                })\n                break\n            default:\n                insertText(text)\n        }\n        return\n    }\n\n    const deleteBackward2 = (unit: 'character' | 'word' | 'line' | 'block') => {\n        console.log(\"editor.deleteBackward:\", unit)\n        const {selection} = editor\n\n        if (!selection || Range.isExpanded(selection)) {\n            deleteBackward(unit)\n            return\n        }\n        const match = Editor.above(editor, {\n            match: n => Editor.isBlock(editor, n),\n        })\n\n        if (!match || Editor.isEditor(match[0])) {\n            deleteBackward(unit)\n            return\n        }\n        const [block, path] = match as NodeEntry<ListNode>\n        const start = Editor.start(editor, path)\n\n        if (Point.equals(selection.anchor, start)) {\n            if (block.type === 'list-item') {\n                const [listNode] = Editor.parent(editor, path) as NodeEntry<ListNode>\n                if (listNode && (listNode.indent as number > 0)) {\n                    Editor.withoutNormalizing(editor, () => {\n                        Transforms.wrapNodes(editor, {\n                            type: listNode.type,\n                            indent: listNode.indent! - 1,\n                            children: []\n                        }, {at: path})\n                        Transforms.liftNodes(editor, {at: path})\n                    })\n                } else {\n                    Transforms.setNodes(editor, {type: 'paragraph'})\n                    Transforms.unwrapNodes(editor, {\n                        match: n => (typeof n.type === 'string' && n.type.endsWith('-list')),\n                        split: true,\n                    })\n                    // deleteBackward(unit)\n                }\n            } else if (block.type === 'paragraph') {\n                if (block.indent && block.indent > 0) {\n                    Transforms.setNodes(editor, {indent: block.indent - 1}, {at: path})\n                    return\n                } else {\n                    deleteBackward(unit)\n                }\n            } else {\n                Transforms.setNodes(editor, {type: 'paragraph'})\n            }\n            return\n        } // end if at start\n        deleteBackward(unit)\n    }\n\n    editor.deleteBackward = (unit: 'character' | 'word' | 'line' | 'block') => {\n        console.log(\"editor.deleteBackward:\", unit)\n        deleteBackward2(unit)\n        fixList(editor)\n    }\n\n    editor.deleteFragment = ()=>{\n        console.log(\"editor.deleteFragment:\")\n        deleteFragment()\n    }\n    editor.normalizeNode = (entry:NodeEntry)=>{\n        if (Element.isElement(entry[0]) && entry[0].type !== 'list-item') {\n            const [pNode] = Editor.parent(editor, entry[1])!\n            if (isListNode(pNode)) {\n                Transforms.setNodes(editor, {type:'list-item'}, {at:entry[1]})\n            }\n        }\n    }\n\n    return editor\n}\n\nconst beforeTextInBlock = (editor: Editor): string => {\n    const {selection} = editor\n    if (!selection) {\n        return ''\n    }\n    const block = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n    })\n    const path = block ? block[1] : []\n    const start = Editor.start(editor, path)\n    const range = {anchor: Range.start(editor.selection!), focus: start}\n    let beforeText = Editor.string(editor, range)\n    return beforeText\n}\n//\n// Transforms.delete =(\n//     editor: Editor,\n//     options: {\n//     at?: Location\n//     distance?: number\n//     unit?: 'character' | 'word' | 'line' | 'block'\n//     reverse?: boolean\n//     hanging?: boolean\n//     voids?: boolean\n// } = {}\n// ):void => {\n//     Editor.withoutNormalizing(editor, () => {\n//         const {\n//             reverse = false,\n//             unit = 'character',\n//             distance = 1,\n//             voids = false,\n//         } = options\n//         let { at = editor.selection, hanging = false } = options\n//\n//         if (!at) {\n//             return\n//         }\n//\n//         if (Range.isRange(at) && Range.isCollapsed(at)) {\n//             at = at.anchor\n//         }\n//\n//         if (Point.isPoint(at)) {\n//             const furthestVoid = Editor.void(editor, { at, mode: 'highest' })\n//\n//             if (!voids && furthestVoid) {\n//                 const [, voidPath] = furthestVoid\n//                 at = voidPath\n//             } else {\n//                 const opts = { unit, distance }\n//                 const target = reverse\n//                     ? Editor.before(editor, at, opts) || Editor.start(editor, [])\n//                     : Editor.after(editor, at, opts) || Editor.end(editor, [])\n//                 at = { anchor: at, focus: target }\n//                 hanging = true\n//             }\n//         }\n//\n//         if (Path.isPath(at)) {\n//             Transforms.removeNodes(editor, { at, voids })\n//             return\n//         }\n//\n//         if (Range.isCollapsed(at)) {\n//             return\n//         }\n//\n//         if (!hanging) {\n//             at = Editor.unhangRange(editor, at, { voids })\n//         }\n//\n//         let [start, end] = Range.edges(at)\n//         const startBlock = Editor.above(editor, {\n//             match: n => Editor.isBlock(editor, n),\n//             at: start,\n//             voids,\n//         })\n//         const endBlock = Editor.above(editor, {\n//             match: n => Editor.isBlock(editor, n),\n//             at: end,\n//             voids,\n//         })\n//         const isAcrossBlocks =\n//             startBlock && endBlock && !Path.equals(startBlock[1], endBlock[1])\n//         const isSingleText = Path.equals(start.path, end.path)\n//         const startVoid = voids\n//             ? null\n//             : Editor.void(editor, { at: start, mode: 'highest' })\n//         const endVoid = voids\n//             ? null\n//             : Editor.void(editor, { at: end, mode: 'highest' })\n//\n//         // If the start or end points are inside an inline void, nudge them out.\n//         if (startVoid) {\n//             const before = Editor.before(editor, start)\n//\n//             if (\n//                 before &&\n//                 startBlock &&\n//                 Path.isAncestor(startBlock[1], before.path)\n//             ) {\n//                 start = before\n//             }\n//         }\n//\n//         if (endVoid) {\n//             const after = Editor.after(editor, end)\n//\n//             if (after && endBlock && Path.isAncestor(endBlock[1], after.path)) {\n//                 end = after\n//             }\n//         }\n//\n//         // Get the highest nodes that are completely inside the range, as well as\n//         // the start and end nodes.\n//         const matches: NodeEntry[] = []\n//         let lastPath: Path | undefined\n//\n//         for (const entry of Editor.nodes(editor, { at, voids })) {\n//             const [node, path] = entry\n//\n//             if (lastPath && Path.compare(path, lastPath) === 0) {\n//                 continue\n//             }\n//\n//             if (\n//                 (!voids && Editor.isVoid(editor, node)) ||\n//                 (!Path.isCommon(path, start.path) && !Path.isCommon(path, end.path))\n//             ) {\n//                 matches.push(entry)\n//                 lastPath = path\n//             }\n//         }\n//\n//         const pathRefs = Array.from(matches, ([, p]) => Editor.pathRef(editor, p))\n//         const startRef = Editor.pointRef(editor, start)\n//         const endRef = Editor.pointRef(editor, end)\n//\n//         if (!isSingleText && !startVoid) {\n//             const point = startRef.current!\n//             const [node] = Editor.leaf(editor, point)\n//             const { path } = point\n//             const { offset } = start\n//             const text = node.text.slice(offset)\n//             editor.apply({ type: 'remove_text', path, offset, text })\n//         }\n//\n//         for (const pathRef of pathRefs) {\n//             const path = pathRef.unref()!\n//             console.log(\"remove not at:\", path)\n//             Transforms.removeNodes(editor, { at: path, voids })\n//         }\n//\n//         if (!endVoid) {\n//             const point = endRef.current!\n//             const [node] = Editor.leaf(editor, point)\n//             const { path } = point\n//             const offset = isSingleText ? start.offset : 0\n//             const text = node.text.slice(offset, end.offset)\n//             editor.apply({ type: 'remove_text', path, offset, text })\n//         }\n//\n//         if (\n//             !isSingleText &&\n//             isAcrossBlocks &&\n//             endRef.current &&\n//             startRef.current\n//         ) {\n//             console.log(\"merge node at:\", endRef.current)\n//             Transforms.mergeNodes(editor, {\n//                 at: endRef.current,\n//                 hanging: true,\n//                 voids,\n//             })\n//         }\n//\n//         const point = endRef.unref() || startRef.unref()\n//\n//         if (options.at == null && point) {\n//             Transforms.select(editor, point)\n//         }\n//     })\n// }\n//\n// Transforms.mergeNodes = (\n//     editor: Editor,\n//     options: {\n//     at?: Location\n//     match?: (node: Node) => boolean\n//     mode?: 'highest' | 'lowest'\n//     hanging?: boolean\n//     voids?: boolean\n// } = {}\n// ) => {\n//     Editor.withoutNormalizing(editor, () => {\n//         let { match, at = editor.selection } = options\n//         const { hanging = false, voids = false, mode = 'lowest' } = options\n//\n//         if (!at) {\n//             return\n//         }\n//\n//         if (match == null) {\n//             if (Path.isPath(at)) {\n//                 const [parent] = Editor.parent(editor, at)\n//                 match = n => parent.children.includes(n)\n//             } else {\n//                 match = n => Editor.isBlock(editor, n)\n//             }\n//         }\n//\n//         if (!hanging && Range.isRange(at)) {\n//             at = Editor.unhangRange(editor, at)\n//         }\n//\n//         if (Range.isRange(at)) {\n//             if (Range.isCollapsed(at)) {\n//                 at = at.anchor\n//             } else {\n//                 const [, end] = Range.edges(at)\n//                 const pointRef = Editor.pointRef(editor, end)\n//                 Transforms.delete(editor, { at })\n//                 at = pointRef.unref()!\n//\n//                 if (options.at == null) {\n//                     Transforms.select(editor, at)\n//                 }\n//             }\n//         }\n//\n//         const [current] = Editor.nodes(editor, { at, match, voids, mode })\n//         const prev = Editor.previous(editor, { at, match, voids, mode })\n//\n//         if (!current || !prev) {\n//             return\n//         }\n//\n//         const [node, path] = current\n//         const [prevNode, prevPath] = prev\n//\n//         if (path.length === 0 || prevPath.length === 0) {\n//             return\n//         }\n//\n//         const newPath = Path.next(prevPath)\n//         const commonPath = Path.common(path, prevPath)\n//         const isPreviousSibling = Path.isSibling(path, prevPath)\n//         const levels = Array.from(Editor.levels(editor, { at: path }), ([n]) => n)\n//             .slice(commonPath.length)\n//             .slice(0, -1)\n//\n//         // Determine if the merge will leave an ancestor of the path empty as a\n//         // result, in which case we'll want to remove it after merging.\n//         const emptyAncestor = Editor.above(editor, {\n//             at: path,\n//             mode: 'highest',\n//             match: n =>\n//                 levels.includes(n) && Element.isElement(n) && n.children.length === 1,\n//         })\n//\n//         const emptyRef = emptyAncestor && Editor.pathRef(editor, emptyAncestor[1])\n//         let properties\n//         let position\n//\n//         // Ensure that the nodes are equivalent, and figure out what the position\n//         // and extra properties of the merge will be.\n//         if (Text.isText(node) && Text.isText(prevNode)) {\n//             const { text, ...rest } = node\n//             position = prevNode.text.length\n//             properties = rest as Partial<Text>\n//         } else if (Element.isElement(node) && Element.isElement(prevNode)) {\n//             const { children, ...rest } = node\n//             position = prevNode.children.length\n//             properties = rest as Partial<Element>\n//         } else {\n//             throw new Error(\n//                 `Cannot merge the node at path [${path}] with the previous sibling because it is not the same kind: ${JSON.stringify(\n//                     node\n//                 )} ${JSON.stringify(prevNode)}`\n//             )\n//         }\n//\n//         // If the node isn't already the next sibling of the previous node, move\n//         // it so that it is before merging.\n//         if (!isPreviousSibling) {\n//             console.log(\"In merge, movNodes from \", path, \"to\", newPath)\n//             Transforms.moveNodes(editor, { at: path, to: newPath, voids })\n//         }\n//\n//         // If there was going to be an empty ancestor of the node that was merged,\n//         // we remove it from the tree.\n//         if (emptyRef) {\n//             console.log(\"In merge, remove node at:\", emptyRef.current)\n//             Transforms.removeNodes(editor, { at: emptyRef.current!, voids })\n//         }\n//\n//         // If the target node that we're merging with is empty, remove it instead\n//         // of merging the two. This is a common rich text editor behavior to\n//         // prevent losing formatting when deleting entire nodes when you have a\n//         // hanging selection.\n//         if (\n//             (Element.isElement(prevNode) && Editor.isEmpty(editor, prevNode)) ||\n//             (Text.isText(prevNode) && prevNode.text === '')\n//         ) {\n//             console.log(\"In merge, remove2\", prevNode.type, \"node at:\", prevPath)\n//             Transforms.removeNodes(editor, { at: prevPath, voids })\n//         } else {\n//             editor.apply({\n//                 type: 'merge_node',\n//                 path: newPath,\n//                 position,\n//                 properties,\n//             })\n//         }\n//\n//         if (emptyRef) {\n//             emptyRef.unref()\n//         }\n//     })\n// }"]},"metadata":{},"sourceType":"module"}