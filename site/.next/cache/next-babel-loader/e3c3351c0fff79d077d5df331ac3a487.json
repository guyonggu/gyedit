{"ast":null,"code":"var _jsxFileName = \"/Users/yonggu/WebstormProjects/gyedit/site/examples/images.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState, useMemo } from 'react';\nimport imageExtensions from 'image-extensions';\nimport isUrl from 'is-url';\nimport { Transforms, createEditor } from 'slate';\nimport { Slate, Editable, useEditor, useSelected, useFocused, withReact } from 'slate-react';\nimport { withHistory } from 'slate-history';\nimport { css } from 'emotion';\nimport { Button, Icon, Toolbar } from '../components';\n\nconst ImagesExample = () => {\n  const {\n    0: value,\n    1: setValue\n  } = useState(initialValue);\n  const editor = useMemo(() => withImages(withHistory(withReact(createEditor()))), []);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: value => setValue(value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, __jsx(Toolbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, __jsx(InsertImageButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  })), __jsx(Editable, {\n    renderElement: props => __jsx(Element, _extends({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 33\n      }\n    })),\n    placeholder: \"Enter some text...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst withImages = editor => {\n  const {\n    insertData,\n    isVoid\n  } = editor;\n\n  editor.isVoid = element => {\n    return element.type === 'image' ? true : isVoid(element);\n  };\n\n  editor.insertData = data => {\n    const text = data.getData('text/plain');\n    const {\n      files\n    } = data;\n\n    if (files && files.length > 0) {\n      for (const file of files) {\n        const reader = new FileReader();\n        const [mime] = file.type.split('/');\n\n        if (mime === 'image') {\n          reader.addEventListener('load', () => {\n            const url = reader.result;\n            insertImage(editor, url);\n          });\n          reader.readAsDataURL(file);\n        }\n      }\n    } else if (isImageUrl(text)) {\n      insertImage(editor, text);\n    } else {\n      insertData(data);\n    }\n  };\n\n  return editor;\n};\n\nconst insertImage = (editor, url) => {\n  const text = {\n    text: ''\n  };\n  const image = {\n    type: 'image',\n    url,\n    children: [text]\n  };\n  Transforms.insertNodes(editor, image);\n};\n\nconst Element = props => {\n  const {\n    attributes,\n    children,\n    element\n  } = props;\n\n  switch (element.type) {\n    case 'image':\n      return __jsx(ImageElement, _extends({}, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 14\n        }\n      }));\n\n    default:\n      return __jsx(\"p\", _extends({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 14\n        }\n      }), children);\n  }\n};\n\nconst ImageElement = ({\n  attributes,\n  children,\n  element\n}) => {\n  const selected = useSelected();\n  const focused = useFocused();\n  return __jsx(\"div\", _extends({}, attributes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  }), __jsx(\"div\", {\n    contentEditable: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, __jsx(\"img\", {\n    src: element.url,\n    className: css`\n            display: block;\n            max-width: 100%;\n            max-height: 20em;\n            box-shadow: ${selected && focused ? '0 0 0 3px #B4D5FF' : 'none'};\n          `,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  })), children);\n};\n\nconst InsertImageButton = () => {\n  const editor = useEditor();\n  return __jsx(Button, {\n    onMouseDown: event => {\n      event.preventDefault();\n      const url = window.prompt('Enter the URL of the image:');\n      if (!url) return;\n      insertImage(editor, url);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, __jsx(Icon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }, \"image\"));\n};\n\nconst isImageUrl = url => {\n  if (!url) return false;\n  if (!isUrl(url)) return false;\n  const ext = new URL(url).pathname.split('.').pop();\n  return imageExtensions.includes(ext);\n};\n\nconst initialValue = [{\n  type: 'paragraph',\n  children: [{\n    text: 'In addition to nodes that contain editable text, you can also create other types of nodes, like images or videos.'\n  }]\n}, {\n  type: 'image',\n  url: 'https://source.unsplash.com/kFrdX5IeQzI',\n  children: [{\n    text: ''\n  }]\n}, {\n  type: 'paragraph',\n  children: [{\n    text: 'This example shows images in action. It features two ways to add images. You can either add an image via the toolbar icon above, or if you want in on a little secret, copy an image URL to your keyboard and paste it anywhere in the editor!'\n  }]\n}];\nexport default ImagesExample;","map":{"version":3,"sources":["/Users/yonggu/WebstormProjects/gyedit/site/examples/images.tsx"],"names":["React","useState","useMemo","imageExtensions","isUrl","Transforms","createEditor","Slate","Editable","useEditor","useSelected","useFocused","withReact","withHistory","css","Button","Icon","Toolbar","ImagesExample","value","setValue","initialValue","editor","withImages","props","insertData","isVoid","element","type","data","text","getData","files","length","file","reader","FileReader","mime","split","addEventListener","url","result","insertImage","readAsDataURL","isImageUrl","image","children","insertNodes","Element","attributes","ImageElement","selected","focused","InsertImageButton","event","preventDefault","window","prompt","ext","URL","pathname","pop","includes"],"mappings":"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","sourcesContent":["import React, { useState, useMemo } from 'react'\nimport imageExtensions from 'image-extensions'\nimport isUrl from 'is-url'\nimport { Node, Transforms, createEditor } from 'slate'\nimport {\n  Slate,\n  Editable,\n  useEditor,\n  useSelected,\n  useFocused,\n  withReact,\n} from 'slate-react'\nimport { withHistory } from 'slate-history'\nimport { css } from 'emotion'\n\nimport { Button, Icon, Toolbar } from '../components'\n\nconst ImagesExample = () => {\n  const [value, setValue] = useState<Node[]>(initialValue)\n  const editor = useMemo(\n    () => withImages(withHistory(withReact(createEditor()))),\n    []\n  )\n\n  return (\n    <Slate editor={editor} value={value} onChange={value => setValue(value)}>\n      <Toolbar>\n        <InsertImageButton />\n      </Toolbar>\n      <Editable\n        renderElement={props => <Element {...props} />}\n        placeholder=\"Enter some text...\"\n      />\n    </Slate>\n  )\n}\n\nconst withImages = editor => {\n  const { insertData, isVoid } = editor\n\n  editor.isVoid = element => {\n    return element.type === 'image' ? true : isVoid(element)\n  }\n\n  editor.insertData = data => {\n    const text = data.getData('text/plain')\n    const { files } = data\n\n    if (files && files.length > 0) {\n      for (const file of files) {\n        const reader = new FileReader()\n        const [mime] = file.type.split('/')\n\n        if (mime === 'image') {\n          reader.addEventListener('load', () => {\n            const url = reader.result\n            insertImage(editor, url)\n          })\n\n          reader.readAsDataURL(file)\n        }\n      }\n    } else if (isImageUrl(text)) {\n      insertImage(editor, text)\n    } else {\n      insertData(data)\n    }\n  }\n\n  return editor\n}\n\nconst insertImage = (editor, url) => {\n  const text = { text: '' }\n  const image = { type: 'image', url, children: [text] }\n  Transforms.insertNodes(editor, image)\n}\n\nconst Element = props => {\n  const { attributes, children, element } = props\n\n  switch (element.type) {\n    case 'image':\n      return <ImageElement {...props} />\n    default:\n      return <p {...attributes}>{children}</p>\n  }\n}\n\nconst ImageElement = ({ attributes, children, element }) => {\n  const selected = useSelected()\n  const focused = useFocused()\n  return (\n    <div {...attributes}>\n      <div contentEditable={false}>\n        <img\n          src={element.url}\n          className={css`\n            display: block;\n            max-width: 100%;\n            max-height: 20em;\n            box-shadow: ${selected && focused ? '0 0 0 3px #B4D5FF' : 'none'};\n          `}\n        />\n      </div>\n      {children}\n    </div>\n  )\n}\n\nconst InsertImageButton = () => {\n  const editor = useEditor()\n  return (\n    <Button\n      onMouseDown={event => {\n        event.preventDefault()\n        const url = window.prompt('Enter the URL of the image:')\n        if (!url) return\n        insertImage(editor, url)\n      }}\n    >\n      <Icon>image</Icon>\n    </Button>\n  )\n}\n\nconst isImageUrl = url => {\n  if (!url) return false\n  if (!isUrl(url)) return false\n  const ext = new URL(url).pathname.split('.').pop()\n  return imageExtensions.includes(ext)\n}\n\nconst initialValue = [\n  {\n    type: 'paragraph',\n    children: [\n      {\n        text:\n          'In addition to nodes that contain editable text, you can also create other types of nodes, like images or videos.',\n      },\n    ],\n  },\n  {\n    type: 'image',\n    url: 'https://source.unsplash.com/kFrdX5IeQzI',\n    children: [{ text: '' }],\n  },\n  {\n    type: 'paragraph',\n    children: [\n      {\n        text:\n          'This example shows images in action. It features two ways to add images. You can either add an image via the toolbar icon above, or if you want in on a little secret, copy an image URL to your keyboard and paste it anywhere in the editor!',\n      },\n    ],\n  },\n]\n\nexport default ImagesExample\n"]},"metadata":{},"sourceType":"module"}