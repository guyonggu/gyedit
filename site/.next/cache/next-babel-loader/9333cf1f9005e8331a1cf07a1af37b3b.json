{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React, { useState, useMemo } from 'react';\nimport isUrl from 'is-url';\nimport { Slate, Editable, withReact, useSlate } from 'slate-react';\nimport { Transforms, Editor, Range, createEditor } from 'slate';\nimport { withHistory } from 'slate-history';\nimport { Button, Icon, Toolbar } from '../components';\n\nvar LinkExample = function LinkExample() {\n  var _useState = useState(initialValue),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var editor = useMemo(function () {\n    return withLinks(withHistory(withReact(createEditor())));\n  }, []);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: function onChange(value) {\n      return setValue(value);\n    }\n  }, __jsx(Toolbar, null, __jsx(LinkButton, null)), __jsx(Editable, {\n    renderElement: function renderElement(props) {\n      return __jsx(Element, props);\n    },\n    placeholder: \"Enter some text...\"\n  }));\n};\n\nvar withLinks = function withLinks(editor) {\n  var insertData = editor.insertData,\n      insertText = editor.insertText,\n      isInline = editor.isInline;\n\n  editor.isInline = function (element) {\n    return element.type === 'link' ? true : isInline(element);\n  };\n\n  editor.insertText = function (text) {\n    if (text && isUrl(text)) {\n      wrapLink(editor, text);\n    } else {\n      insertText(text);\n    }\n  };\n\n  editor.insertData = function (data) {\n    var text = data.getData('text/plain');\n\n    if (text && isUrl(text)) {\n      wrapLink(editor, text);\n    } else {\n      insertData(data);\n    }\n  };\n\n  return editor;\n};\n\nvar insertLink = function insertLink(editor, url) {\n  if (editor.selection) {\n    wrapLink(editor, url);\n  }\n};\n\nvar isLinkActive = function isLinkActive(editor) {\n  var _Editor$nodes = Editor.nodes(editor, {\n    match: function match(n) {\n      return n.type === 'link';\n    }\n  }),\n      _Editor$nodes2 = _slicedToArray(_Editor$nodes, 1),\n      link = _Editor$nodes2[0];\n\n  return !!link;\n};\n\nvar unwrapLink = function unwrapLink(editor) {\n  Transforms.unwrapNodes(editor, {\n    match: function match(n) {\n      return n.type === 'link';\n    }\n  });\n};\n\nvar wrapLink = function wrapLink(editor, url) {\n  if (isLinkActive(editor)) {\n    unwrapLink(editor);\n  }\n\n  var selection = editor.selection;\n  var isCollapsed = selection && Range.isCollapsed(selection);\n  var link = {\n    type: 'link',\n    url: url,\n    children: isCollapsed ? [{\n      text: url\n    }] : []\n  };\n\n  if (isCollapsed) {\n    Transforms.insertNodes(editor, link);\n  } else {\n    Transforms.wrapNodes(editor, link, {\n      split: true\n    });\n    Transforms.collapse(editor, {\n      edge: 'end'\n    });\n  }\n};\n\nvar Element = function Element(_ref) {\n  var attributes = _ref.attributes,\n      children = _ref.children,\n      element = _ref.element;\n\n  switch (element.type) {\n    case 'link':\n      return __jsx(\"a\", _extends({}, attributes, {\n        href: element.url\n      }), children);\n\n    default:\n      return __jsx(\"p\", attributes, children);\n  }\n};\n\nvar LinkButton = function LinkButton() {\n  var editor = useSlate();\n  return __jsx(Button, {\n    active: isLinkActive(editor),\n    onMouseDown: function onMouseDown(event) {\n      event.preventDefault();\n      var url = window.prompt('Enter the URL of the link:');\n      if (!url) return;\n      insertLink(editor, url);\n    }\n  }, __jsx(Icon, null, \"link\"));\n};\n\nvar initialValue = [{\n  children: [{\n    text: 'In addition to block nodes, you can create inline nodes, like '\n  }, {\n    type: 'link',\n    url: 'https://en.wikipedia.org/wiki/Hypertext',\n    children: [{\n      text: 'hyperlinks'\n    }]\n  }, {\n    text: '!'\n  }]\n}, {\n  children: [{\n    text: 'This example shows hyperlinks in action. It features two ways to add links. You can either add a link via the toolbar icon above, or if you want in on a little secret, copy a URL to your keyboard and paste it while a range of text is selected.'\n  }]\n}];\nexport default LinkExample;","map":null,"metadata":{},"sourceType":"module"}