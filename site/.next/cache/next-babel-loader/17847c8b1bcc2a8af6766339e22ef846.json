{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/yonggu/WebstormProjects/gyedit/site/examples/forced-layout.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { Slate, Editable, withReact } from 'slate-react';\nimport { Transforms, createEditor, Node } from 'slate';\nimport { withHistory } from 'slate-history';\n\nvar withLayout = function withLayout(editor) {\n  var normalizeNode = editor.normalizeNode;\n\n  editor.normalizeNode = function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        node = _ref2[0],\n        path = _ref2[1];\n\n    if (path.length === 0) {\n      if (editor.children.length < 1) {\n        var title = {\n          type: 'title',\n          children: [{\n            text: 'Untitled'\n          }]\n        };\n        Transforms.insertNodes(editor, title, {\n          at: path.concat(0)\n        });\n      }\n\n      if (editor.children.length < 2) {\n        var paragraph = {\n          type: 'paragraph',\n          children: [{\n            text: ''\n          }]\n        };\n        Transforms.insertNodes(editor, paragraph, {\n          at: path.concat(1)\n        });\n      }\n\n      var _iterator = _createForOfIteratorHelper(Node.children(editor, path)),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              child = _step$value[0],\n              childPath = _step$value[1];\n\n          var type = childPath[0] === 0 ? 'title' : 'paragraph';\n\n          if (child.type !== type) {\n            Transforms.setNodes(editor, {\n              type: type\n            }, {\n              at: childPath\n            });\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n\n    return normalizeNode([node, path]);\n  };\n\n  return editor;\n};\n\nvar ForcedLayoutExample = function ForcedLayoutExample() {\n  _s();\n\n  var _useState = useState(initialValue),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var renderElement = useCallback(function (props) {\n    return __jsx(Element, _extends({}, props, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 46\n      }\n    }));\n  }, []);\n  var editor = useMemo(function () {\n    return withLayout(withHistory(withReact(createEditor())));\n  }, []);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: function onChange(value) {\n      return setValue(value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, __jsx(Editable, {\n    renderElement: renderElement,\n    placeholder: \"Enter a title\\u2026\",\n    spellCheck: true,\n    autoFocus: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(ForcedLayoutExample, \"9HkvqXgepfcc58pVdFmOn6blq7U=\");\n\n_c = ForcedLayoutExample;\n\nvar Element = function Element(_ref3) {\n  var attributes = _ref3.attributes,\n      children = _ref3.children,\n      element = _ref3.element;\n\n  switch (element.type) {\n    case 'title':\n      return __jsx(\"h2\", _extends({}, attributes, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'paragraph':\n      return __jsx(\"p\", _extends({}, attributes, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 14\n        }\n      }), children);\n  }\n};\n\n_c2 = Element;\nvar initialValue = [{\n  type: 'title',\n  children: [{\n    text: 'Enforce Your Layout!'\n  }]\n}, {\n  type: 'paragraph',\n  children: [{\n    text: 'This example shows how to enforce your layout with domain-specific constraints. This document will always have a title block at the top and at least one paragraph in the body. Try deleting them and see what happens!'\n  }]\n}];\nexport default ForcedLayoutExample;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ForcedLayoutExample\");\n$RefreshReg$(_c2, \"Element\");","map":{"version":3,"sources":["/Users/yonggu/WebstormProjects/gyedit/site/examples/forced-layout.tsx"],"names":["React","useState","useCallback","useMemo","Slate","Editable","withReact","Transforms","createEditor","Node","withHistory","withLayout","editor","normalizeNode","node","path","length","children","title","type","text","insertNodes","at","concat","paragraph","child","childPath","setNodes","ForcedLayoutExample","initialValue","value","setValue","renderElement","props","Element","attributes","element"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useMemo } from 'react'\nimport { Slate, Editable, withReact } from 'slate-react'\nimport { Transforms, createEditor, Node } from 'slate'\nimport { withHistory } from 'slate-history'\n\nconst withLayout = editor => {\n  const { normalizeNode } = editor\n\n  editor.normalizeNode = ([node, path]) => {\n    if (path.length === 0) {\n      if (editor.children.length < 1) {\n        const title = { type: 'title', children: [{ text: 'Untitled' }] }\n        Transforms.insertNodes(editor, title, { at: path.concat(0) })\n      }\n\n      if (editor.children.length < 2) {\n        const paragraph = { type: 'paragraph', children: [{ text: '' }] }\n        Transforms.insertNodes(editor, paragraph, { at: path.concat(1) })\n      }\n\n      for (const [child, childPath] of Node.children(editor, path)) {\n        const type = childPath[0] === 0 ? 'title' : 'paragraph'\n\n        if (child.type !== type) {\n          Transforms.setNodes(editor, { type }, { at: childPath })\n        }\n      }\n    }\n\n    return normalizeNode([node, path])\n  }\n\n  return editor\n}\n\nconst ForcedLayoutExample = () => {\n  const [value, setValue] = useState<Node[]>(initialValue)\n  const renderElement = useCallback(props => <Element {...props} />, [])\n  const editor = useMemo(\n    () => withLayout(withHistory(withReact(createEditor()))),\n    []\n  )\n  return (\n    <Slate editor={editor} value={value} onChange={value => setValue(value)}>\n      <Editable\n        renderElement={renderElement}\n        placeholder=\"Enter a title…\"\n        spellCheck\n        autoFocus\n      />\n    </Slate>\n  )\n}\n\nconst Element = ({ attributes, children, element }) => {\n  switch (element.type) {\n    case 'title':\n      return <h2 {...attributes}>{children}</h2>\n    case 'paragraph':\n      return <p {...attributes}>{children}</p>\n  }\n}\n\nconst initialValue = [\n  {\n    type: 'title',\n    children: [{ text: 'Enforce Your Layout!' }],\n  },\n  {\n    type: 'paragraph',\n    children: [\n      {\n        text:\n          'This example shows how to enforce your layout with domain-specific constraints. This document will always have a title block at the top and at least one paragraph in the body. Try deleting them and see what happens!',\n      },\n    ],\n  },\n]\n\nexport default ForcedLayoutExample\n"]},"metadata":{},"sourceType":"module"}