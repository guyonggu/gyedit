{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/yonggu/WebstormProjects/slate/site/examples/check-lists.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n          flex: 1;\\n          opacity: \", \";\\n          text-decoration: \", \";\\n\\n          &:focus {\\n            outline: none;\\n          }\\n        \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n          margin-right: 0.75em;\\n        \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n        display: flex;\\n        flex-direction: row;\\n        align-items: center;\\n\\n        & + & {\\n          margin-top: 0;\\n        }\\n      \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useMemo, useCallback } from 'react';\nimport { Slate, Editable, withReact, useEditor, useReadOnly, ReactEditor } from 'slate-react';\nimport { Editor, Transforms, Range, Point, createEditor } from 'slate';\nimport { css } from 'emotion';\nimport { withHistory } from 'slate-history';\n\nvar CheckListsExample = function CheckListsExample() {\n  _s();\n\n  var _useState = useState(initialValue),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var renderElement = useCallback(function (props) {\n    return __jsx(Element, _extends({}, props, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 46\n      }\n    }));\n  }, []);\n  var editor = useMemo(function () {\n    return withChecklists(withHistory(withReact(createEditor())));\n  }, []);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: function onChange(value) {\n      return setValue(value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, __jsx(Editable, {\n    renderElement: renderElement,\n    placeholder: \"Get to work\\u2026\",\n    spellCheck: true,\n    autoFocus: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(CheckListsExample, \"9HkvqXgepfcc58pVdFmOn6blq7U=\");\n\n_c = CheckListsExample;\n\nvar withChecklists = function withChecklists(editor) {\n  var deleteBackward = editor.deleteBackward;\n\n  editor.deleteBackward = function () {\n    var selection = editor.selection;\n\n    if (selection && Range.isCollapsed(selection)) {\n      var _Editor$nodes = Editor.nodes(editor, {\n        match: function match(n) {\n          return n.type === 'check-list-item';\n        }\n      }),\n          _Editor$nodes2 = _slicedToArray(_Editor$nodes, 1),\n          match = _Editor$nodes2[0];\n\n      if (match) {\n        var _match = _slicedToArray(match, 2),\n            path = _match[1];\n\n        var start = Editor.start(editor, path);\n\n        if (Point.equals(selection.anchor, start)) {\n          Transforms.setNodes(editor, {\n            type: 'paragraph'\n          }, {\n            match: function match(n) {\n              return n.type === 'check-list-item';\n            }\n          });\n          return;\n        }\n      }\n    }\n\n    deleteBackward.apply(void 0, arguments);\n  };\n\n  return editor;\n};\n\nvar Element = function Element(props) {\n  var attributes = props.attributes,\n      children = props.children,\n      element = props.element;\n\n  switch (element.type) {\n    case 'check-list-item':\n      return __jsx(CheckListItemElement, _extends({}, props, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 14\n        }\n      }));\n\n    default:\n      return __jsx(\"p\", _extends({}, attributes, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 14\n        }\n      }), children);\n  }\n};\n\n_c2 = Element;\n\nvar CheckListItemElement = function CheckListItemElement(_ref) {\n  _s2();\n\n  var attributes = _ref.attributes,\n      children = _ref.children,\n      element = _ref.element;\n  var editor = useEditor();\n  var readOnly = useReadOnly();\n  var checked = element.checked;\n  return __jsx(\"div\", _extends({}, attributes, {\n    className: css(_templateObject()),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }), __jsx(\"span\", {\n    contentEditable: false,\n    className: css(_templateObject2()),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, __jsx(\"input\", {\n    type: \"checkbox\",\n    checked: checked,\n    onChange: function onChange(event) {\n      var path = ReactEditor.findPath(editor, element);\n      Transforms.setNodes(editor, {\n        checked: event.target.checked\n      }, {\n        at: path\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  })), __jsx(\"span\", {\n    contentEditable: !readOnly,\n    suppressContentEditableWarning: true,\n    className: css(_templateObject3(), checked ? 0.666 : 1, checked ? 'none' : 'line-through'),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, children));\n};\n\n_s2(CheckListItemElement, \"nR7ctdXwmQzQPNyKQD+g/GJMQ38=\", false, function () {\n  return [useEditor, useReadOnly];\n});\n\n_c3 = CheckListItemElement;\nvar initialValue = [{\n  children: [{\n    text: 'With Slate you can build complex block types that have their own embedded content and behaviors, like rendering checkboxes inside check list items!'\n  }]\n}, {\n  type: 'check-list-item',\n  checked: true,\n  children: [{\n    text: 'Slide to the left.'\n  }]\n}, {\n  type: 'check-list-item',\n  checked: true,\n  children: [{\n    text: 'Slide to the right.'\n  }]\n}, {\n  type: 'check-list-item',\n  checked: false,\n  children: [{\n    text: 'Criss-cross.'\n  }]\n}, {\n  type: 'check-list-item',\n  checked: true,\n  children: [{\n    text: 'Criss-cross!'\n  }]\n}, {\n  type: 'check-list-item',\n  checked: false,\n  children: [{\n    text: 'Cha cha real smoothâ€¦'\n  }]\n}, {\n  type: 'check-list-item',\n  checked: false,\n  children: [{\n    text: \"Let's go to work!\"\n  }]\n}, {\n  children: [{\n    text: 'Try it out for yourself!'\n  }]\n}];\nexport default CheckListsExample;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"CheckListsExample\");\n$RefreshReg$(_c2, \"Element\");\n$RefreshReg$(_c3, \"CheckListItemElement\");","map":{"version":3,"sources":["/Users/yonggu/WebstormProjects/slate/site/examples/check-lists.tsx"],"names":["React","useState","useMemo","useCallback","Slate","Editable","withReact","useEditor","useReadOnly","ReactEditor","Editor","Transforms","Range","Point","createEditor","css","withHistory","CheckListsExample","initialValue","value","setValue","renderElement","props","editor","withChecklists","deleteBackward","selection","isCollapsed","nodes","match","n","type","path","start","equals","anchor","setNodes","Element","attributes","children","element","CheckListItemElement","readOnly","checked","event","findPath","target","at","text"],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useCallback } from 'react'\nimport {\n  Slate,\n  Editable,\n  withReact,\n  useEditor,\n  useReadOnly,\n  ReactEditor,\n} from 'slate-react'\nimport { Node, Editor, Transforms, Range, Point, createEditor } from 'slate'\nimport { css } from 'emotion'\nimport { withHistory } from 'slate-history'\n\nconst CheckListsExample = () => {\n  const [value, setValue] = useState<Node[]>(initialValue)\n  const renderElement = useCallback(props => <Element {...props} />, [])\n  const editor = useMemo(\n    () => withChecklists(withHistory(withReact(createEditor()))),\n    []\n  )\n\n  return (\n    <Slate editor={editor} value={value} onChange={value => setValue(value)}>\n      <Editable\n        renderElement={renderElement}\n        placeholder=\"Get to workâ€¦\"\n        spellCheck\n        autoFocus\n      />\n    </Slate>\n  )\n}\n\nconst withChecklists = editor => {\n  const { deleteBackward } = editor\n\n  editor.deleteBackward = (...args) => {\n    const { selection } = editor\n\n    if (selection && Range.isCollapsed(selection)) {\n      const [match] = Editor.nodes(editor, {\n        match: n => n.type === 'check-list-item',\n      })\n\n      if (match) {\n        const [, path] = match\n        const start = Editor.start(editor, path)\n\n        if (Point.equals(selection.anchor, start)) {\n          Transforms.setNodes(\n            editor,\n            { type: 'paragraph' },\n            { match: n => n.type === 'check-list-item' }\n          )\n          return\n        }\n      }\n    }\n\n    deleteBackward(...args)\n  }\n\n  return editor\n}\n\nconst Element = props => {\n  const { attributes, children, element } = props\n\n  switch (element.type) {\n    case 'check-list-item':\n      return <CheckListItemElement {...props} />\n    default:\n      return <p {...attributes}>{children}</p>\n  }\n}\n\nconst CheckListItemElement = ({ attributes, children, element }) => {\n  const editor = useEditor()\n  const readOnly = useReadOnly()\n  const { checked } = element\n  return (\n    <div\n      {...attributes}\n      className={css`\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n\n        & + & {\n          margin-top: 0;\n        }\n      `}\n    >\n      <span\n        contentEditable={false}\n        className={css`\n          margin-right: 0.75em;\n        `}\n      >\n        <input\n          type=\"checkbox\"\n          checked={checked}\n          onChange={event => {\n            const path = ReactEditor.findPath(editor, element)\n            Transforms.setNodes(\n              editor,\n              { checked: event.target.checked },\n              { at: path }\n            )\n          }}\n        />\n      </span>\n      <span\n        contentEditable={!readOnly}\n        suppressContentEditableWarning\n        className={css`\n          flex: 1;\n          opacity: ${checked ? 0.666 : 1};\n          text-decoration: ${checked ? 'none' : 'line-through'};\n\n          &:focus {\n            outline: none;\n          }\n        `}\n      >\n        {children}\n      </span>\n    </div>\n  )\n}\n\nconst initialValue = [\n  {\n    children: [\n      {\n        text:\n          'With Slate you can build complex block types that have their own embedded content and behaviors, like rendering checkboxes inside check list items!',\n      },\n    ],\n  },\n  {\n    type: 'check-list-item',\n    checked: true,\n    children: [{ text: 'Slide to the left.' }],\n  },\n  {\n    type: 'check-list-item',\n    checked: true,\n    children: [{ text: 'Slide to the right.' }],\n  },\n  {\n    type: 'check-list-item',\n    checked: false,\n    children: [{ text: 'Criss-cross.' }],\n  },\n  {\n    type: 'check-list-item',\n    checked: true,\n    children: [{ text: 'Criss-cross!' }],\n  },\n  {\n    type: 'check-list-item',\n    checked: false,\n    children: [{ text: 'Cha cha real smoothâ€¦' }],\n  },\n  {\n    type: 'check-list-item',\n    checked: false,\n    children: [{ text: \"Let's go to work!\" }],\n  },\n  {\n    children: [{ text: 'Try it out for yourself!' }],\n  },\n]\n\nexport default CheckListsExample\n"]},"metadata":{},"sourceType":"module"}