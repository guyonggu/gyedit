{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport { Editor, Point, Range, Transforms } from \"slate\";\nvar SHORTCUTS = {\n  '*': 'ul-item',\n  '-': 'ul-item',\n  '+': 'ul-item',\n  '>': 'block-quote',\n  '#': 'heading-one',\n  '##': 'heading-two',\n  '###': 'heading-three',\n  '####': 'heading-four',\n  '#####': 'heading-five',\n  '######': 'heading-six'\n};\nexport var withMarkdown = function withMarkdown(editor) {\n  var deleteBackward = editor.deleteBackward,\n      insertText = editor.insertText;\n\n  editor.insertText = function (text) {\n    var selection = editor.selection;\n\n    if (text !== ' ' && text !== '\\t' || !selection || !Range.isCollapsed(selection)) {\n      insertText(text);\n      return;\n    }\n\n    if (text === ' ') {\n      var anchor = selection.anchor;\n      var block = Editor.above(editor, {\n        match: function match(n) {\n          return Editor.isBlock(editor, n);\n        }\n      });\n      var path = block ? block[1] : [];\n      var start = Editor.start(editor, path);\n      var range = {\n        anchor: anchor,\n        focus: start\n      };\n      var beforeText = Editor.string(editor, range);\n      var type = SHORTCUTS[beforeText];\n\n      if (!type && /^([\\t]*)\\d+\\./.test(beforeText)) {\n        type = 'ol-item';\n      }\n\n      var list;\n      var blockType = block[0].type;\n      console.log(\"blockType\", blockType);\n      var inList = typeof blockType === 'string' ? blockType.endsWith('-list') || blockType === 'list-item' : false;\n\n      switch (type) {\n        case 'ul-item':\n          if (inList) break;\n          Transforms.select(editor, range);\n          Transforms[\"delete\"](editor);\n          Transforms.setNodes(editor, {\n            type: 'list-item'\n          }, {\n            match: function match(n) {\n              return Editor.isBlock(editor, n);\n            }\n          });\n          list = {\n            type: 'bulleted-list',\n            children: []\n          };\n          Transforms.wrapNodes(editor, list, {\n            match: function match(n) {\n              return n.type === 'list-item';\n            }\n          });\n          break;\n\n        case 'ol-item':\n          if (inList) break;\n          var found = beforeText.match(/^([\\t]*)\\d+\\./);\n          var indent = found[1].length;\n          Transforms.select(editor, range);\n          Transforms[\"delete\"](editor);\n          Transforms.setNodes(editor, {\n            type: 'list-item'\n          }, {\n            match: function match(n) {\n              return Editor.isBlock(editor, n);\n            }\n          });\n          list = {\n            type: 'numbered-list',\n            children: []\n          };\n          Transforms.wrapNodes(editor, list, {\n            match: function match(n) {\n              return n.type === 'list-item';\n            }\n          });\n          break;\n\n        default:\n          insertText(text);\n          return;\n      }\n    }\n\n    insertText(text);\n  };\n\n  editor.deleteBackward = function () {\n    var selection = editor.selection;\n\n    if (selection && Range.isCollapsed(selection)) {\n      var match = Editor.above(editor, {\n        match: function match(n) {\n          return Editor.isBlock(editor, n);\n        }\n      });\n\n      if (match) {\n        var _match = _slicedToArray(match, 2),\n            block = _match[0],\n            path = _match[1];\n\n        var start = Editor.start(editor, path);\n\n        if (block.type !== 'paragraph' && Point.equals(selection.anchor, start)) {\n          Transforms.setNodes(editor, {\n            type: 'paragraph'\n          });\n\n          if (block.type === 'list-item') {\n            Transforms.unwrapNodes(editor, {\n              match: function match(n) {\n                return n.type === 'bulleted-list';\n              },\n              split: true\n            });\n          }\n\n          return;\n        }\n      }\n\n      deleteBackward.apply(void 0, arguments);\n    }\n  };\n\n  return editor;\n};","map":{"version":3,"sources":["/Users/yonggu/WebstormProjects/gyedit/src/withMarkdown.ts"],"names":["Editor","Point","Range","Transforms","SHORTCUTS","withMarkdown","editor","deleteBackward","insertText","text","selection","isCollapsed","anchor","block","above","match","n","isBlock","path","start","range","focus","beforeText","string","type","test","list","blockType","console","log","inList","endsWith","select","setNodes","children","wrapNodes","found","indent","length","equals","unwrapNodes","split"],"mappings":"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","sourcesContent":["import {Editor, Point, Range, Transforms} from \"slate\";\n\nconst SHORTCUTS = {\n    '*': 'ul-item',\n    '-': 'ul-item',\n    '+': 'ul-item',\n    '>': 'block-quote',\n    '#': 'heading-one',\n    '##': 'heading-two',\n    '###': 'heading-three',\n    '####': 'heading-four',\n    '#####': 'heading-five',\n    '######': 'heading-six',\n}\n\nexport const withMarkdown = (editor: Editor) => {\n    const {deleteBackward, insertText} = editor\n\n    editor.insertText = (text: string) => {\n        const {selection} = editor\n        if ( (text !== ' ' && text !== '\\t') ||  !selection || !Range.isCollapsed(selection)) {\n            insertText(text)\n            return\n        }\n        if (text === ' ') {\n            const {anchor} = selection\n            const block = Editor.above(editor, {\n                match: n => Editor.isBlock(editor, n),\n            })\n            const path = block ? block[1] : []\n            const start = Editor.start(editor, path)\n            const range = {anchor, focus: start}\n            const beforeText = Editor.string(editor, range)\n            let type = SHORTCUTS[beforeText]\n\n            if (!type && /^([\\t]*)\\d+\\./.test(beforeText)) {\n                type = 'ol-item'\n            }\n            let list\n            const blockType = block[0].type\n            console.log(\"blockType\", blockType)\n            let inList = typeof blockType === 'string' ? blockType.endsWith('-list') || blockType === 'list-item' : false\n            switch (type) {\n                case 'ul-item':\n                    if (inList) break\n                    Transforms.select(editor, range)\n                    Transforms.delete(editor)\n                    Transforms.setNodes(\n                        editor,\n                        {type: 'list-item'},\n                        {match: n => Editor.isBlock(editor, n)}\n                    )\n                    list = {type: 'bulleted-list', children: []}\n                    Transforms.wrapNodes(editor, list, {\n                        match: n => n.type === 'list-item',\n                    })\n                    break\n                case 'ol-item':\n                    if (inList) break\n                    const found = beforeText.match(/^([\\t]*)\\d+\\./)\n                    const indent = found[1].length\n                    Transforms.select(editor, range)\n                    Transforms.delete(editor)\n                    Transforms.setNodes(\n                        editor,\n                        {type: 'list-item'},\n                        {match: n => Editor.isBlock(editor, n)}\n                    )\n                    list = {type: 'numbered-list', children: []}\n                    Transforms.wrapNodes(editor, list, {\n                        match: n => n.type === 'list-item',\n                    })\n                    break\n                default:\n                    insertText(text)\n\n                    return\n            }\n        }\n\n        insertText(text)\n    }\n\n    editor.deleteBackward = (...args) => {\n        const {selection} = editor\n\n        if (selection && Range.isCollapsed(selection)) {\n            const match = Editor.above(editor, {\n                match: n => Editor.isBlock(editor, n),\n            })\n\n            if (match) {\n                const [block, path] = match\n                const start = Editor.start(editor, path)\n\n                if (\n                    block.type !== 'paragraph' &&\n                    Point.equals(selection.anchor, start)\n                ) {\n                    Transforms.setNodes(editor, {type: 'paragraph'})\n\n                    if (block.type === 'list-item') {\n                        Transforms.unwrapNodes(editor, {\n                            match: n => n.type === 'bulleted-list',\n                            split: true,\n                        })\n                    }\n\n                    return\n                }\n            }\n\n            deleteBackward(...args)\n        }\n    }\n\n    return editor\n}"]},"metadata":{},"sourceType":"module"}