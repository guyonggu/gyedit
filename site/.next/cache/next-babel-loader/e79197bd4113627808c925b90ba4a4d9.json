{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useMemo } from 'react';\nimport { Transforms, createEditor } from 'slate';\nimport { Slate, Editable, withReact, useEditor, ReactEditor } from 'slate-react';\n\nconst EmbedsExample = () => {\n  const {\n    0: value,\n    1: setValue\n  } = useState(initialValue);\n  const editor = useMemo(() => withEmbeds(withReact(createEditor())), []);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: value => setValue(value)\n  }, __jsx(Editable, {\n    renderElement: props => __jsx(Element, props),\n    placeholder: \"Enter some text...\"\n  }));\n};\n\nconst withEmbeds = editor => {\n  const {\n    isVoid\n  } = editor;\n\n  editor.isVoid = element => element.type === 'video' ? true : isVoid(element);\n\n  return editor;\n};\n\nconst Element = props => {\n  const {\n    attributes,\n    children,\n    element\n  } = props;\n\n  switch (element.type) {\n    case 'video':\n      return __jsx(VideoElement, props);\n\n    default:\n      return __jsx(\"p\", attributes, children);\n  }\n};\n\nconst VideoElement = ({\n  attributes,\n  children,\n  element\n}) => {\n  const editor = useEditor();\n  const {\n    url\n  } = element;\n  return __jsx(\"div\", attributes, __jsx(\"div\", {\n    contentEditable: false\n  }, __jsx(\"div\", {\n    style: {\n      padding: '75% 0 0 0',\n      position: 'relative'\n    }\n  }, __jsx(\"iframe\", {\n    src: `${url}?title=0&byline=0&portrait=0`,\n    frameBorder: \"0\",\n    style: {\n      position: 'absolute',\n      top: '0',\n      left: '0',\n      width: '100%',\n      height: '100%'\n    }\n  })), __jsx(UrlInput, {\n    url: url,\n    onChange: val => {\n      const path = ReactEditor.findPath(editor, element);\n      Transforms.setNodes(editor, {\n        url: val\n      }, {\n        at: path\n      });\n    }\n  })), children);\n};\n\nconst UrlInput = ({\n  url,\n  onChange\n}) => {\n  const [value, setValue] = React.useState(url);\n  return __jsx(\"input\", {\n    value: value,\n    onClick: e => e.stopPropagation(),\n    style: {\n      marginTop: '5px',\n      boxSizing: 'border-box'\n    },\n    onChange: e => {\n      const newUrl = e.target.value;\n      setValue(newUrl);\n      onChange(newUrl);\n    }\n  });\n};\n\nconst initialValue = [{\n  children: [{\n    text: 'In addition to simple image nodes, you can actually create complex embedded nodes. For example, this one contains an input element that lets you change the video being rendered!'\n  }]\n}, {\n  type: 'video',\n  url: 'https://player.vimeo.com/video/26689853',\n  children: [{\n    text: ''\n  }]\n}, {\n  children: [{\n    text: 'Try it out! This editor is built to handle Vimeo embeds, but you could handle any type.'\n  }]\n}];\nexport default EmbedsExample;","map":null,"metadata":{},"sourceType":"module"}