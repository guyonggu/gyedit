{"ast":null,"code":"import { Editor, Point, Range, Transforms } from \"slate\";\nconst SHORTCUTS = {\n  '*': 'ul-item',\n  '-': 'ul-item',\n  '+': 'ul-item',\n  '>': 'block-quote',\n  '#': 'heading-one',\n  '##': 'heading-two',\n  '###': 'heading-three',\n  '####': 'heading-four',\n  '#####': 'heading-five',\n  '######': 'heading-six'\n};\nexport const withMarkdown = editor => {\n  const {\n    deleteBackward,\n    insertText\n  } = editor;\n\n  editor.insertText = text => {\n    const {\n      selection\n    } = editor;\n\n    if (!selection || !Range.isCollapsed(selection)) {\n      insertText(text);\n      return;\n    }\n\n    if (text === ' ') {\n      const {\n        anchor\n      } = selection;\n      const block = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n)\n      });\n      const path = block ? block[1] : [];\n      const start = Editor.start(editor, path);\n      const range = {\n        anchor,\n        focus: start\n      };\n      const beforeText = Editor.string(editor, range);\n      let type = SHORTCUTS[beforeText];\n\n      if (!type && /^([\\t]*)\\d+\\./.test(beforeText)) {\n        type = 'ol-item';\n      }\n\n      let list;\n      const blockType = block[0].type;\n      console.log(\"blockType\", blockType);\n      let inList = typeof blockType === 'string' ? blockType.endsWith('-list') || blockType === 'list-item' : false;\n\n      switch (type) {\n        case 'ul-item':\n          if (inList) break;\n          Transforms.select(editor, range);\n          Transforms.delete(editor);\n          Transforms.setNodes(editor, {\n            type: 'list-item'\n          }, {\n            match: n => Editor.isBlock(editor, n)\n          });\n          list = {\n            type: 'bulleted-list',\n            children: []\n          };\n          Transforms.wrapNodes(editor, list, {\n            match: n => n.type === 'list-item'\n          });\n          break;\n\n        case 'ol-item':\n          if (inList) break;\n          const found = beforeText.match(/^([\\t]*)\\d+\\./);\n          const indent = found[1].length;\n          Transforms.select(editor, range);\n          Transforms.delete(editor);\n          Transforms.setNodes(editor, {\n            type: 'list-item'\n          }, {\n            match: n => Editor.isBlock(editor, n)\n          });\n          list = {\n            type: 'numbered-list',\n            children: []\n          };\n          Transforms.wrapNodes(editor, list, {\n            match: n => n.type === 'list-item'\n          });\n          break;\n\n        default:\n          insertText(text);\n          return;\n      }\n    }\n\n    insertText(text);\n  };\n\n  editor.deleteBackward = (...args) => {\n    const {\n      selection\n    } = editor;\n\n    if (selection && Range.isCollapsed(selection)) {\n      const match = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n)\n      });\n\n      if (match) {\n        const [block, path] = match;\n        const start = Editor.start(editor, path);\n\n        if (block.type !== 'paragraph' && Point.equals(selection.anchor, start)) {\n          Transforms.setNodes(editor, {\n            type: 'paragraph'\n          });\n\n          if (block.type === 'list-item') {\n            Transforms.unwrapNodes(editor, {\n              match: n => n.type === 'bulleted-list',\n              split: true\n            });\n          }\n\n          return;\n        }\n      }\n\n      deleteBackward(...args);\n    }\n  };\n\n  return editor;\n};","map":{"version":3,"sources":["/Users/yonggu/WebstormProjects/gyedit/src/withMarkdown.ts"],"names":["Editor","Point","Range","Transforms","SHORTCUTS","withMarkdown","editor","deleteBackward","insertText","text","selection","isCollapsed","anchor","block","above","match","n","isBlock","path","start","range","focus","beforeText","string","type","test","list","blockType","console","log","inList","endsWith","select","delete","setNodes","children","wrapNodes","found","indent","length","args","equals","unwrapNodes","split"],"mappings":"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","sourcesContent":["import {Editor, Point, Range, Transforms} from \"slate\";\n\nconst SHORTCUTS = {\n    '*': 'ul-item',\n    '-': 'ul-item',\n    '+': 'ul-item',\n    '>': 'block-quote',\n    '#': 'heading-one',\n    '##': 'heading-two',\n    '###': 'heading-three',\n    '####': 'heading-four',\n    '#####': 'heading-five',\n    '######': 'heading-six',\n}\n\nexport const withMarkdown = (editor:Editor) => {\n    const { deleteBackward, insertText } = editor\n\n    editor.insertText = text => {\n        const { selection } = editor\n        if (!selection || !Range.isCollapsed(selection)){\n            insertText(text)\n            return\n        }\n        if (text === ' ') {\n            const { anchor } = selection\n            const block = Editor.above(editor, {\n                match: n => Editor.isBlock(editor, n),\n            })\n            const path = block ? block[1] : []\n            const start = Editor.start(editor, path)\n            const range = { anchor, focus: start }\n            const beforeText = Editor.string(editor, range)\n            let type = SHORTCUTS[beforeText]\n\n            if (!type && /^([\\t]*)\\d+\\./.test(beforeText)){\n                type = 'ol-item'\n            }\n            let list\n            const blockType = block[0].type\n            console.log(\"blockType\",blockType)\n            let inList = typeof blockType === 'string' ? blockType.endsWith('-list') || blockType === 'list-item': false\n            switch (type) {\n                case 'ul-item':\n                    if(inList) break\n                    Transforms.select(editor, range)\n                    Transforms.delete(editor)\n                    Transforms.setNodes(\n                        editor,\n                        { type: 'list-item'},\n                        { match: n => Editor.isBlock(editor, n) }\n                    )\n                    list = { type: 'bulleted-list', children: [] }\n                    Transforms.wrapNodes(editor, list, {\n                        match: n => n.type === 'list-item',\n                    })\n                    break\n                case 'ol-item':\n                    if(inList) break\n                    const found = beforeText.match(/^([\\t]*)\\d+\\./)\n                    const indent = found[1].length\n                    Transforms.select(editor, range)\n                    Transforms.delete(editor)\n                    Transforms.setNodes(\n                        editor,\n                        { type: 'list-item' },\n                        { match: n => Editor.isBlock(editor, n) }\n                    )\n                    list = { type: 'numbered-list', children: [] }\n                    Transforms.wrapNodes(editor, list, {\n                        match: n => n.type === 'list-item',\n                    })\n                    break\n                default:\n                    insertText(text)\n\n                return\n            }\n        }\n\n        insertText(text)\n    }\n\n    editor.deleteBackward = (...args) => {\n        const { selection } = editor\n\n        if (selection && Range.isCollapsed(selection)) {\n            const match = Editor.above(editor, {\n                match: n => Editor.isBlock(editor, n),\n            })\n\n            if (match) {\n                const [block, path] = match\n                const start = Editor.start(editor, path)\n\n                if (\n                    block.type !== 'paragraph' &&\n                    Point.equals(selection.anchor, start)\n                ) {\n                    Transforms.setNodes(editor, { type: 'paragraph' })\n\n                    if (block.type === 'list-item') {\n                        Transforms.unwrapNodes(editor, {\n                            match: n => n.type === 'bulleted-list',\n                            split: true,\n                        })\n                    }\n\n                    return\n                }\n            }\n\n            deleteBackward(...args)\n        }\n    }\n\n    return editor\n}"]},"metadata":{},"sourceType":"module"}