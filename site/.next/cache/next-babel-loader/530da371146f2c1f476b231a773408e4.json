{"ast":null,"code":"import { Editor, Range, Transforms } from 'slate';\nexport var onKeyDown = function onKeyDown() {\n  return function (e, editor) {\n    console.log(\"key down:\", e.key);\n    var selection = editor.selection;\n\n    if (e.key === 'Tab' && selection) {\n      var anchor = selection.anchor;\n      var block = Editor.above(editor, {\n        match: function match(n) {\n          return Editor.isBlock(editor, n);\n        }\n      });\n\n      if (block && block[0].type == 'list-item') {\n        if (Range.isCollapsed(selection)) {\n          var path = block[1];\n          var start = Editor.start(editor, path);\n          var range = {\n            anchor: anchor,\n            focus: start\n          };\n          var beforeText = Editor.string(editor, range);\n\n          if (beforeText.length) {\n            return;\n          }\n        }\n\n        e.preventDefault(); // move down with tab\n\n        var tab = !e.shiftKey;\n\n        if (tab) {\n          moveListItemDown(editor, block[1]);\n        }\n      }\n    }\n  };\n};\n\nfunction moveListItemDown(editor, path) {\n  var entry = Editor.parent(editor, path);\n  var node = entry[0];\n\n  if (node.type.endsWith('list')) {\n    node.indent++;\n    Transforms.splitNodes(editor, {\n      at: path\n    });\n  }\n}","map":{"version":3,"sources":["/Users/yonggu/WebstormProjects/gyedit/src/onKeyDown.ts"],"names":["Editor","Range","Transforms","onKeyDown","e","editor","console","log","key","selection","anchor","block","above","match","n","isBlock","type","isCollapsed","path","start","range","focus","beforeText","string","length","preventDefault","tab","shiftKey","moveListItemDown","entry","parent","node","endsWith","indent","splitNodes","at"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,KAAjB,EAAyCC,UAAzC,QAA2D,OAA3D;AAGA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA,SAAM,UAC3BC,CAD2B,EAE3BC,MAF2B,EAG1B;AACDC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBH,CAAC,CAACI,GAA3B;AADC,QAEIC,SAFJ,GAEiBJ,MAFjB,CAEII,SAFJ;;AAGD,QAAIL,CAAC,CAACI,GAAF,KAAU,KAAV,IAAmBC,SAAvB,EAAkC;AAAA,UACtBC,MADsB,GACXD,SADW,CACtBC,MADsB;AAE9B,UAAMC,KAAK,GAAGX,MAAM,CAACY,KAAP,CAAaP,MAAb,EAAqB;AAC/BQ,QAAAA,KAAK,EAAE,eAAAC,CAAC;AAAA,iBAAId,MAAM,CAACe,OAAP,CAAeV,MAAf,EAAuBS,CAAvB,CAAJ;AAAA;AADuB,OAArB,CAAd;;AAGA,UAAIH,KAAK,IAAIA,KAAK,CAAC,CAAD,CAAL,CAASK,IAAT,IAAiB,WAA9B,EAA2C;AACvC,YAAIf,KAAK,CAACgB,WAAN,CAAkBR,SAAlB,CAAJ,EAAkC;AAC9B,cAAMS,IAAI,GAAGP,KAAK,CAAC,CAAD,CAAlB;AACA,cAAMQ,KAAK,GAAGnB,MAAM,CAACmB,KAAP,CAAad,MAAb,EAAqBa,IAArB,CAAd;AACA,cAAME,KAAK,GAAG;AAACV,YAAAA,MAAM,EAANA,MAAD;AAASW,YAAAA,KAAK,EAAEF;AAAhB,WAAd;AACA,cAAIG,UAAU,GAAGtB,MAAM,CAACuB,MAAP,CAAclB,MAAd,EAAsBe,KAAtB,CAAjB;;AACA,cAAIE,UAAU,CAACE,MAAf,EAAsB;AAClB;AACH;AACJ;;AACDpB,QAAAA,CAAC,CAACqB,cAAF,GAVuC,CAWvC;;AACA,YAAMC,GAAG,GAAG,CAACtB,CAAC,CAACuB,QAAf;;AACA,YAAID,GAAJ,EAAS;AACLE,UAAAA,gBAAgB,CAACvB,MAAD,EAASM,KAAK,CAAC,CAAD,CAAd,CAAhB;AACH;AACJ;AACJ;AACJ,GA7BwB;AAAA,CAAlB;;AA+BP,SAASiB,gBAAT,CAA0BvB,MAA1B,EAAyCa,IAAzC,EAAoD;AAChD,MAAMW,KAAK,GAAG7B,MAAM,CAAC8B,MAAP,CAAczB,MAAd,EAAsBa,IAAtB,CAAd;AACA,MAAIa,IAAc,GAAGF,KAAK,CAAC,CAAD,CAA1B;;AACA,MAAIE,IAAI,CAACf,IAAL,CAAUgB,QAAV,CAAoB,MAApB,CAAJ,EAAiC;AAC7BD,IAAAA,IAAI,CAACE,MAAL;AACA/B,IAAAA,UAAU,CAACgC,UAAX,CAAsB7B,MAAtB,EAA8B;AAAC8B,MAAAA,EAAE,EAAEjB;AAAL,KAA9B;AACH;AACJ","sourcesContent":["import { Editor, Range, Path, NodeEntry, Transforms } from 'slate'\nimport {ListNode, ListItemNode} from './types'\n\nexport const onKeyDown = () => (\n    e: KeyboardEvent,\n    editor: Editor\n) => {\n    console.log(\"key down:\", e.key)\n    let {selection} = editor\n    if (e.key === 'Tab' && selection) {\n        const { anchor } = selection\n        const block = Editor.above(editor, {\n            match: n => Editor.isBlock(editor, n),\n        })\n        if (block && block[0].type == 'list-item') {\n            if (Range.isCollapsed(selection)) {\n                const path = block[1]\n                const start = Editor.start(editor, path)\n                const range = {anchor, focus: start}\n                let beforeText = Editor.string(editor, range)\n                if (beforeText.length){\n                    return\n                }\n            }\n            e.preventDefault()\n            // move down with tab\n            const tab = !e.shiftKey;\n            if (tab) {\n                moveListItemDown(editor, block[1]);\n            }\n        }\n    }\n};\n\nfunction moveListItemDown(editor:Editor, path: Path){\n    const entry = Editor.parent(editor, path)\n    let node: ListNode = entry[0] as ListNode\n    if (node.type.endsWith( 'list')) {\n        node.indent ++\n        Transforms.splitNodes(editor, {at: path})\n    }\n}"]},"metadata":{},"sourceType":"module"}