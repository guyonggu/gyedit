{"ast":null,"code":"var _jsxFileName = \"/Users/yonggu/WebstormProjects/gyedit/site/examples/forced-layout.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { Slate, Editable, withReact } from 'slate-react';\nimport { Transforms, createEditor, Node } from 'slate';\nimport { withHistory } from 'slate-history';\n\nconst withLayout = editor => {\n  const {\n    normalizeNode\n  } = editor;\n\n  editor.normalizeNode = ([node, path]) => {\n    if (path.length === 0) {\n      if (editor.children.length < 1) {\n        const title = {\n          type: 'title',\n          children: [{\n            text: 'Untitled'\n          }]\n        };\n        Transforms.insertNodes(editor, title, {\n          at: path.concat(0)\n        });\n      }\n\n      if (editor.children.length < 2) {\n        const paragraph = {\n          type: 'paragraph',\n          children: [{\n            text: ''\n          }]\n        };\n        Transforms.insertNodes(editor, paragraph, {\n          at: path.concat(1)\n        });\n      }\n\n      for (const [child, childPath] of Node.children(editor, path)) {\n        const type = childPath[0] === 0 ? 'title' : 'paragraph';\n\n        if (child.type !== type) {\n          Transforms.setNodes(editor, {\n            type\n          }, {\n            at: childPath\n          });\n        }\n      }\n    }\n\n    return normalizeNode([node, path]);\n  };\n\n  return editor;\n};\n\nconst ForcedLayoutExample = () => {\n  const {\n    0: value,\n    1: setValue\n  } = useState(initialValue);\n  const renderElement = useCallback(props => __jsx(Element, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 46\n    }\n  })), []);\n  const editor = useMemo(() => withLayout(withHistory(withReact(createEditor()))), []);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: value => setValue(value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, __jsx(Editable, {\n    renderElement: renderElement,\n    placeholder: \"Enter a title\\u2026\",\n    spellCheck: true,\n    autoFocus: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst Element = ({\n  attributes,\n  children,\n  element\n}) => {\n  switch (element.type) {\n    case 'title':\n      return __jsx(\"h2\", _extends({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 14\n        }\n      }), children);\n\n    case 'paragraph':\n      return __jsx(\"p\", _extends({}, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 14\n        }\n      }), children);\n  }\n};\n\nconst initialValue = [{\n  type: 'title',\n  children: [{\n    text: 'Enforce Your Layout!'\n  }]\n}, {\n  type: 'paragraph',\n  children: [{\n    text: 'This example shows how to enforce your layout with domain-specific constraints. This document will always have a title block at the top and at least one paragraph in the body. Try deleting them and see what happens!'\n  }]\n}];\nexport default ForcedLayoutExample;","map":{"version":3,"sources":["/Users/yonggu/WebstormProjects/gyedit/site/examples/forced-layout.tsx"],"names":["React","useState","useCallback","useMemo","Slate","Editable","withReact","Transforms","createEditor","Node","withHistory","withLayout","editor","normalizeNode","node","path","length","children","title","type","text","insertNodes","at","concat","paragraph","child","childPath","setNodes","ForcedLayoutExample","value","setValue","initialValue","renderElement","props","Element","attributes","element"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useMemo } from 'react'\nimport { Slate, Editable, withReact } from 'slate-react'\nimport { Transforms, createEditor, Node } from 'slate'\nimport { withHistory } from 'slate-history'\n\nconst withLayout = editor => {\n  const { normalizeNode } = editor\n\n  editor.normalizeNode = ([node, path]) => {\n    if (path.length === 0) {\n      if (editor.children.length < 1) {\n        const title = { type: 'title', children: [{ text: 'Untitled' }] }\n        Transforms.insertNodes(editor, title, { at: path.concat(0) })\n      }\n\n      if (editor.children.length < 2) {\n        const paragraph = { type: 'paragraph', children: [{ text: '' }] }\n        Transforms.insertNodes(editor, paragraph, { at: path.concat(1) })\n      }\n\n      for (const [child, childPath] of Node.children(editor, path)) {\n        const type = childPath[0] === 0 ? 'title' : 'paragraph'\n\n        if (child.type !== type) {\n          Transforms.setNodes(editor, { type }, { at: childPath })\n        }\n      }\n    }\n\n    return normalizeNode([node, path])\n  }\n\n  return editor\n}\n\nconst ForcedLayoutExample = () => {\n  const [value, setValue] = useState<Node[]>(initialValue)\n  const renderElement = useCallback(props => <Element {...props} />, [])\n  const editor = useMemo(\n    () => withLayout(withHistory(withReact(createEditor()))),\n    []\n  )\n  return (\n    <Slate editor={editor} value={value} onChange={value => setValue(value)}>\n      <Editable\n        renderElement={renderElement}\n        placeholder=\"Enter a titleâ€¦\"\n        spellCheck\n        autoFocus\n      />\n    </Slate>\n  )\n}\n\nconst Element = ({ attributes, children, element }) => {\n  switch (element.type) {\n    case 'title':\n      return <h2 {...attributes}>{children}</h2>\n    case 'paragraph':\n      return <p {...attributes}>{children}</p>\n  }\n}\n\nconst initialValue = [\n  {\n    type: 'title',\n    children: [{ text: 'Enforce Your Layout!' }],\n  },\n  {\n    type: 'paragraph',\n    children: [\n      {\n        text:\n          'This example shows how to enforce your layout with domain-specific constraints. This document will always have a title block at the top and at least one paragraph in the body. Try deleting them and see what happens!',\n      },\n    ],\n  },\n]\n\nexport default ForcedLayoutExample\n"]},"metadata":{},"sourceType":"module"}