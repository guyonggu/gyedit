{"ast":null,"code":"import { Editor, Range, Path, Transforms } from 'slate';\nimport { fixList } from \"./util\";\nexport const onKeyDown = () => (e, editor) => {\n  let {\n    selection\n  } = editor;\n  if (!selection) return;\n\n  if (e.key === 'Tab') {\n    e.preventDefault();\n    onTab(editor); // Editor.insertText(editor,'\\t')\n  }\n};\n\nfunction onTab(editor) {\n  const {\n    selection\n  } = editor;\n  const entry = Editor.above(editor, {\n    match: n => Editor.isBlock(editor, n)\n  });\n\n  if (!entry) {\n    return;\n  }\n\n  if (entry[0].type == 'list-item') {\n    if (Range.isCollapsed(selection)) {\n      const path = entry[1];\n      const start = Editor.start(editor, path);\n      const range = {\n        anchor: selection.anchor,\n        focus: start\n      };\n      let beforeText = Editor.string(editor, range);\n\n      if (beforeText.length) {\n        Editor.insertText(editor, '\\t');\n        return;\n      }\n    } // // move down with tab\n    // const tab = !e.shiftKey;\n    // if (tab) {\n\n\n    moveListItemDown(editor, entry[1]);\n    fixList(editor); // }\n  } else {\n    let p = selection.anchor;\n\n    if (Range.isExpanded(selection)) {\n      p = Editor.start(editor, p.path);\n    }\n\n    const ref = Editor.rangeRef(editor, selection);\n    Transforms.select(editor, p);\n    Editor.insertText(editor, '\\t');\n    Transforms.select(editor, ref.unref());\n  }\n}\n\nfunction moveListItemDown(editor, path) {\n  let entry = Editor.parent(editor, path);\n  let node = entry[0];\n\n  if (!node.type.endsWith('-list')) {\n    throw new Error(`moveListItemDown, not a list at: ${entry[1]}`);\n  }\n\n  let ref = Editor.pathRef(editor, path);\n  let pre = Editor.previous(editor, {\n    at: path\n  });\n  let next = Editor.next(editor, {\n    at: path\n  });\n\n  if (pre) {\n    Transforms.splitNodes(editor, {\n      at: path\n    });\n  }\n\n  if (next) {\n    Transforms.splitNodes(editor, {\n      at: Path.next(ref.current)\n    });\n  }\n\n  path = ref.unref();\n  const indent = node.indent ? node.indent + 1 : 1;\n  Transforms.setNodes(editor, {\n    indent\n  }, {\n    at: Path.parent(path)\n  });\n}","map":{"version":3,"sources":["/Users/yonggu/WebstormProjects/gyedit/src/onKeyDown.ts"],"names":["Editor","Range","Path","Transforms","fixList","onKeyDown","e","editor","selection","key","preventDefault","onTab","entry","above","match","n","isBlock","type","isCollapsed","path","start","range","anchor","focus","beforeText","string","length","insertText","moveListItemDown","p","isExpanded","ref","rangeRef","select","unref","parent","node","endsWith","Error","pathRef","pre","previous","at","next","splitNodes","current","indent","setNodes"],"mappings":"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","sourcesContent":["import {Editor, Range, Path, Location, Transforms} from 'slate'\nimport {ListNode} from './types'\nimport {fixList} from \"./util\";\n\n\nexport const onKeyDown = () => (\n    e: React.KeyboardEvent<HTMLDivElement>,\n    editor: Editor\n) => {\n    let {selection} = editor\n    if (!selection) return\n    if (e.key === 'Tab') {\n        e.preventDefault()\n        onTab(editor)\n\n\n        // Editor.insertText(editor,'\\t')\n    }\n};\nfunction onTab(editor:Editor):void{\n    const {selection} = editor!\n    const entry = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n    })\n    if (!entry) {\n        return\n    }\n    if (entry[0].type == 'list-item') {\n        if (Range.isCollapsed(selection)) {\n            const path = entry[1]\n            const start = Editor.start(editor, path)\n            const range = {anchor: selection.anchor, focus: start}\n            let beforeText = Editor.string(editor, range)\n            if (beforeText.length) {\n                Editor.insertText(editor, '\\t')\n                return\n            }\n        }\n        // // move down with tab\n        // const tab = !e.shiftKey;\n        // if (tab) {\n        moveListItemDown(editor, entry[1]);\n        fixList(editor)\n        // }\n    } else {\n        let p: Location = selection.anchor\n        if (Range.isExpanded(selection)) {\n            p = Editor.start(editor, p.path)\n        }\n        const ref = Editor.rangeRef(editor, selection)\n        Transforms.select(editor, p)\n        Editor.insertText(editor, '\\t')\n        Transforms.select(editor, ref.unref()!)\n    }\n}\nfunction moveListItemDown(editor: Editor, path: Path) {\n    let entry = Editor.parent(editor, path) as [ListNode, Path]\n    let node = entry[0]\n    if (!node.type.endsWith('-list')) {\n        throw new Error(`moveListItemDown, not a list at: ${entry[1]}`)\n    }\n    let ref = Editor.pathRef(editor, path)\n    let pre = Editor.previous(editor, {at: path})\n    let next = Editor.next(editor, {at: path})\n    if (pre) {\n        Transforms.splitNodes(editor, {at: path})\n    }\n    if (next) {\n        Transforms.splitNodes(editor, {at: Path.next(ref.current!)})\n    }\n    path = ref.unref()!\n    const indent = node.indent ? node.indent + 1 : 1\n    Transforms.setNodes(editor, {indent}, {at: Path.parent(path)})\n\n\n}"]},"metadata":{},"sourceType":"module"}