{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/yonggu/WebstormProjects/slate/site/examples/search-highlighting.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n        font-weight: \", \";\\n        background-color: \", \";\\n      \"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n              padding-left: 2em;\\n              width: 100%;\\n            \"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n              position: absolute;\\n              top: 0.5em;\\n              left: 0.5em;\\n              color: #ccc;\\n            \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n            position: relative;\\n          \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useCallback, useMemo } from 'react';\nimport { Slate, Editable, withReact } from 'slate-react';\nimport { Text, createEditor } from 'slate';\nimport { css } from 'emotion';\nimport { withHistory } from 'slate-history';\nimport { Icon, Toolbar } from '../components';\n\nvar SearchHighlightingExample = function SearchHighlightingExample() {\n  _s();\n\n  var _useState = useState(initialValue),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var _useState2 = useState(),\n      search = _useState2[0],\n      setSearch = _useState2[1];\n\n  var editor = useMemo(function () {\n    return withHistory(withReact(createEditor()));\n  }, []);\n  var decorate = useCallback(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        node = _ref2[0],\n        path = _ref2[1];\n\n    var ranges = [];\n\n    if (search && Text.isText(node)) {\n      var text = node.text;\n      var parts = text.split(search);\n      var offset = 0;\n      parts.forEach(function (part, i) {\n        if (i !== 0) {\n          ranges.push({\n            anchor: {\n              path: path,\n              offset: offset - search.length\n            },\n            focus: {\n              path: path,\n              offset: offset\n            },\n            highlight: true\n          });\n        }\n\n        offset = offset + part.length + search.length;\n      });\n    }\n\n    return ranges;\n  }, [search]);\n  return __jsx(Slate, {\n    editor: editor,\n    value: value,\n    onChange: function onChange(value) {\n      return setValue(value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, __jsx(Toolbar, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: css(_templateObject()),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, __jsx(Icon, {\n    className: css(_templateObject2()),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 11\n    }\n  }, \"search\"), __jsx(\"input\", {\n    type: \"search\",\n    placeholder: \"Search the text...\",\n    onChange: function onChange(e) {\n      return setSearch(e.target.value);\n    },\n    className: css(_templateObject3()),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }))), __jsx(Editable, {\n    decorate: decorate,\n    renderLeaf: function renderLeaf(props) {\n      return __jsx(Leaf, _extends({}, props, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 58\n        }\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }));\n};\n\n_s(SearchHighlightingExample, \"iqzMYLxz6fQVedQtbB1CJ4eyXM8=\");\n\n_c = SearchHighlightingExample;\n\nvar Leaf = function Leaf(_ref3) {\n  var attributes = _ref3.attributes,\n      children = _ref3.children,\n      leaf = _ref3.leaf;\n  return __jsx(\"span\", _extends({}, attributes, {\n    className: css(_templateObject4(), leaf.bold && 'bold', leaf.highlight && '#ffeeba'),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }), children);\n};\n\n_c2 = Leaf;\nvar initialValue = [{\n  children: [{\n    text: 'This is editable text that you can search. As you search, it looks for matching strings of text, and adds '\n  }, {\n    text: 'decorations',\n    bold: true\n  }, {\n    text: ' to them in realtime.'\n  }]\n}, {\n  children: [{\n    text: 'Try it out for yourself by typing in the search box above!'\n  }]\n}];\nexport default SearchHighlightingExample;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SearchHighlightingExample\");\n$RefreshReg$(_c2, \"Leaf\");","map":{"version":3,"sources":["/Users/yonggu/WebstormProjects/slate/site/examples/search-highlighting.tsx"],"names":["React","useState","useCallback","useMemo","Slate","Editable","withReact","Text","createEditor","css","withHistory","Icon","Toolbar","SearchHighlightingExample","initialValue","value","setValue","search","setSearch","editor","decorate","node","path","ranges","isText","text","parts","split","offset","forEach","part","i","push","anchor","length","focus","highlight","e","target","props","Leaf","attributes","children","leaf","bold"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,EAAuCC,OAAvC,QAAsD,OAAtD;AACA,SAASC,KAAT,EAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,aAA3C;AACA,SAASC,IAAT,EAAqBC,YAArB,QAAyC,OAAzC;AACA,SAASC,GAAT,QAAoB,SAApB;AACA,SAASC,WAAT,QAA4B,eAA5B;AAEA,SAASC,IAAT,EAAeC,OAAf,QAA8B,eAA9B;;AAEA,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,GAAM;AAAA;;AAAA,kBACZZ,QAAQ,CAASa,YAAT,CADI;AAAA,MAC/BC,KAD+B;AAAA,MACxBC,QADwB;;AAAA,mBAEVf,QAAQ,EAFE;AAAA,MAE/BgB,MAF+B;AAAA,MAEvBC,SAFuB;;AAGtC,MAAMC,MAAM,GAAGhB,OAAO,CAAC;AAAA,WAAMO,WAAW,CAACJ,SAAS,CAACE,YAAY,EAAb,CAAV,CAAjB;AAAA,GAAD,EAA+C,EAA/C,CAAtB;AACA,MAAMY,QAAQ,GAAGlB,WAAW,CAC1B,gBAAkB;AAAA;AAAA,QAAhBmB,IAAgB;AAAA,QAAVC,IAAU;;AAChB,QAAMC,MAAM,GAAG,EAAf;;AAEA,QAAIN,MAAM,IAAIV,IAAI,CAACiB,MAAL,CAAYH,IAAZ,CAAd,EAAiC;AAAA,UACvBI,IADuB,GACdJ,IADc,CACvBI,IADuB;AAE/B,UAAMC,KAAK,GAAGD,IAAI,CAACE,KAAL,CAAWV,MAAX,CAAd;AACA,UAAIW,MAAM,GAAG,CAAb;AAEAF,MAAAA,KAAK,CAACG,OAAN,CAAc,UAACC,IAAD,EAAOC,CAAP,EAAa;AACzB,YAAIA,CAAC,KAAK,CAAV,EAAa;AACXR,UAAAA,MAAM,CAACS,IAAP,CAAY;AACVC,YAAAA,MAAM,EAAE;AAAEX,cAAAA,IAAI,EAAJA,IAAF;AAAQM,cAAAA,MAAM,EAAEA,MAAM,GAAGX,MAAM,CAACiB;AAAhC,aADE;AAEVC,YAAAA,KAAK,EAAE;AAAEb,cAAAA,IAAI,EAAJA,IAAF;AAAQM,cAAAA,MAAM,EAANA;AAAR,aAFG;AAGVQ,YAAAA,SAAS,EAAE;AAHD,WAAZ;AAKD;;AAEDR,QAAAA,MAAM,GAAGA,MAAM,GAAGE,IAAI,CAACI,MAAd,GAAuBjB,MAAM,CAACiB,MAAvC;AACD,OAVD;AAWD;;AAED,WAAOX,MAAP;AACD,GAvByB,EAwB1B,CAACN,MAAD,CAxB0B,CAA5B;AA2BA,SACE,MAAC,KAAD;AAAO,IAAA,MAAM,EAAEE,MAAf;AAAuB,IAAA,KAAK,EAAEJ,KAA9B;AAAqC,IAAA,QAAQ,EAAE,kBAAAA,KAAK;AAAA,aAAIC,QAAQ,CAACD,KAAD,CAAZ;AAAA,KAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,SAAS,EAAEN,GAAF,mBADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE,MAAC,IAAD;AACE,IAAA,SAAS,EAAEA,GAAF,oBADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,EAeE;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,WAAW,EAAC,oBAFd;AAGE,IAAA,QAAQ,EAAE,kBAAA4B,CAAC;AAAA,aAAInB,SAAS,CAACmB,CAAC,CAACC,MAAF,CAASvB,KAAV,CAAb;AAAA,KAHb;AAIE,IAAA,SAAS,EAAEN,GAAF,oBAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfF,CADF,CADF,EA4BE,MAAC,QAAD;AAAU,IAAA,QAAQ,EAAEW,QAApB;AAA8B,IAAA,UAAU,EAAE,oBAAAmB,KAAK;AAAA,aAAI,MAAC,IAAD,eAAUA,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAJ;AAAA,KAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA5BF,CADF;AAgCD,CA/DD;;GAAM1B,yB;;KAAAA,yB;;AAiEN,IAAM2B,IAAI,GAAG,SAAPA,IAAO,QAAoC;AAAA,MAAjCC,UAAiC,SAAjCA,UAAiC;AAAA,MAArBC,QAAqB,SAArBA,QAAqB;AAAA,MAAXC,IAAW,SAAXA,IAAW;AAC/C,SACE,2BACMF,UADN;AAEE,IAAA,SAAS,EAAEhC,GAAF,qBACQkC,IAAI,CAACC,IAAL,IAAa,MADrB,EAEaD,IAAI,CAACP,SAAL,IAAkB,SAF/B,CAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOGM,QAPH,CADF;AAWD,CAZD;;MAAMF,I;AAcN,IAAM1B,YAAY,GAAG,CACnB;AACE4B,EAAAA,QAAQ,EAAE,CACR;AACEjB,IAAAA,IAAI,EACF;AAFJ,GADQ,EAKR;AAAEA,IAAAA,IAAI,EAAE,aAAR;AAAuBmB,IAAAA,IAAI,EAAE;AAA7B,GALQ,EAMR;AAAEnB,IAAAA,IAAI,EAAE;AAAR,GANQ;AADZ,CADmB,EAWnB;AACEiB,EAAAA,QAAQ,EAAE,CACR;AAAEjB,IAAAA,IAAI,EAAE;AAAR,GADQ;AADZ,CAXmB,CAArB;AAkBA,eAAeZ,yBAAf","sourcesContent":["import React, { useState, useCallback, useMemo } from 'react'\nimport { Slate, Editable, withReact } from 'slate-react'\nimport { Text, Node, createEditor } from 'slate'\nimport { css } from 'emotion'\nimport { withHistory } from 'slate-history'\n\nimport { Icon, Toolbar } from '../components'\n\nconst SearchHighlightingExample = () => {\n  const [value, setValue] = useState<Node[]>(initialValue)\n  const [search, setSearch] = useState<string | undefined>()\n  const editor = useMemo(() => withHistory(withReact(createEditor())), [])\n  const decorate = useCallback(\n    ([node, path]) => {\n      const ranges = []\n\n      if (search && Text.isText(node)) {\n        const { text } = node\n        const parts = text.split(search)\n        let offset = 0\n\n        parts.forEach((part, i) => {\n          if (i !== 0) {\n            ranges.push({\n              anchor: { path, offset: offset - search.length },\n              focus: { path, offset },\n              highlight: true,\n            })\n          }\n\n          offset = offset + part.length + search.length\n        })\n      }\n\n      return ranges\n    },\n    [search]\n  )\n\n  return (\n    <Slate editor={editor} value={value} onChange={value => setValue(value)}>\n      <Toolbar>\n        <div\n          className={css`\n            position: relative;\n          `}\n        >\n          <Icon\n            className={css`\n              position: absolute;\n              top: 0.5em;\n              left: 0.5em;\n              color: #ccc;\n            `}\n          >\n            search\n          </Icon>\n          <input\n            type=\"search\"\n            placeholder=\"Search the text...\"\n            onChange={e => setSearch(e.target.value)}\n            className={css`\n              padding-left: 2em;\n              width: 100%;\n            `}\n          />\n        </div>\n      </Toolbar>\n      <Editable decorate={decorate} renderLeaf={props => <Leaf {...props} />} />\n    </Slate>\n  )\n}\n\nconst Leaf = ({ attributes, children, leaf }) => {\n  return (\n    <span\n      {...attributes}\n      className={css`\n        font-weight: ${leaf.bold && 'bold'};\n        background-color: ${leaf.highlight && '#ffeeba'};\n      `}\n    >\n      {children}\n    </span>\n  )\n}\n\nconst initialValue = [\n  {\n    children: [\n      {\n        text:\n          'This is editable text that you can search. As you search, it looks for matching strings of text, and adds ',\n      },\n      { text: 'decorations', bold: true },\n      { text: ' to them in realtime.' },\n    ],\n  },\n  {\n    children: [\n      { text: 'Try it out for yourself by typing in the search box above!' },\n    ],\n  },\n]\n\nexport default SearchHighlightingExample\n"]},"metadata":{},"sourceType":"module"}